// Code generated by go-swagger; DO NOT EDIT.

package config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDataSourceParams creates a new GetDataSourceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDataSourceParams() *GetDataSourceParams {
	return &GetDataSourceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDataSourceParamsWithTimeout creates a new GetDataSourceParams object
// with the ability to set a timeout on a request.
func NewGetDataSourceParamsWithTimeout(timeout time.Duration) *GetDataSourceParams {
	return &GetDataSourceParams{
		timeout: timeout,
	}
}

// NewGetDataSourceParamsWithContext creates a new GetDataSourceParams object
// with the ability to set a context for a request.
func NewGetDataSourceParamsWithContext(ctx context.Context) *GetDataSourceParams {
	return &GetDataSourceParams{
		Context: ctx,
	}
}

// NewGetDataSourceParamsWithHTTPClient creates a new GetDataSourceParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDataSourceParamsWithHTTPClient(client *http.Client) *GetDataSourceParams {
	return &GetDataSourceParams{
		HTTPClient: client,
	}
}

/*
GetDataSourceParams contains all the parameters to send to the API endpoint

	for the get data source operation.

	Typically these are written to a http.Request.
*/
type GetDataSourceParams struct {

	/* APIKey.

	   Corresponding objects service api key.
	*/
	APIKey *string

	/* APISecret.

	   Corresponding objects service api secret.
	*/
	APISecret *string

	/* CreationDate.

	   Data Source creation date.

	   Format: int32
	*/
	CreationDate *int32

	/* Disabled.

	   Whether this data source is disabled or running.
	*/
	Disabled *bool

	/* EncryptionKey.

	   Encryption key used for encrypting data.
	*/
	EncryptionKey *string

	/* EncryptionMode.

	   Type of encryption applied before sending data to storage.

	   Default: "CLEAR"
	*/
	EncryptionMode *string

	/* FlatStorage.

	   Store data in flat format (object-storage like).
	*/
	FlatStorage *bool

	/* LastSynchronizationDate.

	   Data Source last synchronization date.

	   Format: int32
	*/
	LastSynchronizationDate *int32

	/* Name.

	   Name of the data source (max length 34)
	*/
	Name string

	/* ObjectsBaseFolder.

	   Corresponding objects service base folder inside the bucket.
	*/
	ObjectsBaseFolder *string

	/* ObjectsBucket.

	   Corresponding objects service bucket.
	*/
	ObjectsBucket *string

	/* ObjectsHost.

	   Corresponding objects service host.
	*/
	ObjectsHost *string

	/* ObjectsPort.

	   Corresponding objects service port.

	   Format: int32
	*/
	ObjectsPort *int32

	/* ObjectsSecure.

	   Corresponding objects service connection type.
	*/
	ObjectsSecure *bool

	/* ObjectsServiceName.

	   Corresponding objects service name (underlying s3 service).
	*/
	ObjectsServiceName *string

	/* PeerAddress.

	   Peer address of the data source.
	*/
	PeerAddress *string

	/* SkipSyncOnRestart.

	   Do not trigger resync at start.
	*/
	SkipSyncOnRestart *bool

	/* StorageType.

	   Type of underlying storage (LOCAL, S3, AZURE, GCS).

	   Default: "LOCAL"
	*/
	StorageType *string

	/* VersioningPolicyName.

	   Versioning policy describes how files are kept in the versioning queue.
	*/
	VersioningPolicyName *string

	/* Watch.

	   Not implemented, whether to watch for underlying changes on the FS.
	*/
	Watch *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get data source params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDataSourceParams) WithDefaults() *GetDataSourceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get data source params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDataSourceParams) SetDefaults() {
	var (
		encryptionModeDefault = string("CLEAR")

		storageTypeDefault = string("LOCAL")
	)

	val := GetDataSourceParams{
		EncryptionMode: &encryptionModeDefault,
		StorageType:    &storageTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get data source params
func (o *GetDataSourceParams) WithTimeout(timeout time.Duration) *GetDataSourceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get data source params
func (o *GetDataSourceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get data source params
func (o *GetDataSourceParams) WithContext(ctx context.Context) *GetDataSourceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get data source params
func (o *GetDataSourceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get data source params
func (o *GetDataSourceParams) WithHTTPClient(client *http.Client) *GetDataSourceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get data source params
func (o *GetDataSourceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIKey adds the aPIKey to the get data source params
func (o *GetDataSourceParams) WithAPIKey(aPIKey *string) *GetDataSourceParams {
	o.SetAPIKey(aPIKey)
	return o
}

// SetAPIKey adds the apiKey to the get data source params
func (o *GetDataSourceParams) SetAPIKey(aPIKey *string) {
	o.APIKey = aPIKey
}

// WithAPISecret adds the aPISecret to the get data source params
func (o *GetDataSourceParams) WithAPISecret(aPISecret *string) *GetDataSourceParams {
	o.SetAPISecret(aPISecret)
	return o
}

// SetAPISecret adds the apiSecret to the get data source params
func (o *GetDataSourceParams) SetAPISecret(aPISecret *string) {
	o.APISecret = aPISecret
}

// WithCreationDate adds the creationDate to the get data source params
func (o *GetDataSourceParams) WithCreationDate(creationDate *int32) *GetDataSourceParams {
	o.SetCreationDate(creationDate)
	return o
}

// SetCreationDate adds the creationDate to the get data source params
func (o *GetDataSourceParams) SetCreationDate(creationDate *int32) {
	o.CreationDate = creationDate
}

// WithDisabled adds the disabled to the get data source params
func (o *GetDataSourceParams) WithDisabled(disabled *bool) *GetDataSourceParams {
	o.SetDisabled(disabled)
	return o
}

// SetDisabled adds the disabled to the get data source params
func (o *GetDataSourceParams) SetDisabled(disabled *bool) {
	o.Disabled = disabled
}

// WithEncryptionKey adds the encryptionKey to the get data source params
func (o *GetDataSourceParams) WithEncryptionKey(encryptionKey *string) *GetDataSourceParams {
	o.SetEncryptionKey(encryptionKey)
	return o
}

// SetEncryptionKey adds the encryptionKey to the get data source params
func (o *GetDataSourceParams) SetEncryptionKey(encryptionKey *string) {
	o.EncryptionKey = encryptionKey
}

// WithEncryptionMode adds the encryptionMode to the get data source params
func (o *GetDataSourceParams) WithEncryptionMode(encryptionMode *string) *GetDataSourceParams {
	o.SetEncryptionMode(encryptionMode)
	return o
}

// SetEncryptionMode adds the encryptionMode to the get data source params
func (o *GetDataSourceParams) SetEncryptionMode(encryptionMode *string) {
	o.EncryptionMode = encryptionMode
}

// WithFlatStorage adds the flatStorage to the get data source params
func (o *GetDataSourceParams) WithFlatStorage(flatStorage *bool) *GetDataSourceParams {
	o.SetFlatStorage(flatStorage)
	return o
}

// SetFlatStorage adds the flatStorage to the get data source params
func (o *GetDataSourceParams) SetFlatStorage(flatStorage *bool) {
	o.FlatStorage = flatStorage
}

// WithLastSynchronizationDate adds the lastSynchronizationDate to the get data source params
func (o *GetDataSourceParams) WithLastSynchronizationDate(lastSynchronizationDate *int32) *GetDataSourceParams {
	o.SetLastSynchronizationDate(lastSynchronizationDate)
	return o
}

// SetLastSynchronizationDate adds the lastSynchronizationDate to the get data source params
func (o *GetDataSourceParams) SetLastSynchronizationDate(lastSynchronizationDate *int32) {
	o.LastSynchronizationDate = lastSynchronizationDate
}

// WithName adds the name to the get data source params
func (o *GetDataSourceParams) WithName(name string) *GetDataSourceParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get data source params
func (o *GetDataSourceParams) SetName(name string) {
	o.Name = name
}

// WithObjectsBaseFolder adds the objectsBaseFolder to the get data source params
func (o *GetDataSourceParams) WithObjectsBaseFolder(objectsBaseFolder *string) *GetDataSourceParams {
	o.SetObjectsBaseFolder(objectsBaseFolder)
	return o
}

// SetObjectsBaseFolder adds the objectsBaseFolder to the get data source params
func (o *GetDataSourceParams) SetObjectsBaseFolder(objectsBaseFolder *string) {
	o.ObjectsBaseFolder = objectsBaseFolder
}

// WithObjectsBucket adds the objectsBucket to the get data source params
func (o *GetDataSourceParams) WithObjectsBucket(objectsBucket *string) *GetDataSourceParams {
	o.SetObjectsBucket(objectsBucket)
	return o
}

// SetObjectsBucket adds the objectsBucket to the get data source params
func (o *GetDataSourceParams) SetObjectsBucket(objectsBucket *string) {
	o.ObjectsBucket = objectsBucket
}

// WithObjectsHost adds the objectsHost to the get data source params
func (o *GetDataSourceParams) WithObjectsHost(objectsHost *string) *GetDataSourceParams {
	o.SetObjectsHost(objectsHost)
	return o
}

// SetObjectsHost adds the objectsHost to the get data source params
func (o *GetDataSourceParams) SetObjectsHost(objectsHost *string) {
	o.ObjectsHost = objectsHost
}

// WithObjectsPort adds the objectsPort to the get data source params
func (o *GetDataSourceParams) WithObjectsPort(objectsPort *int32) *GetDataSourceParams {
	o.SetObjectsPort(objectsPort)
	return o
}

// SetObjectsPort adds the objectsPort to the get data source params
func (o *GetDataSourceParams) SetObjectsPort(objectsPort *int32) {
	o.ObjectsPort = objectsPort
}

// WithObjectsSecure adds the objectsSecure to the get data source params
func (o *GetDataSourceParams) WithObjectsSecure(objectsSecure *bool) *GetDataSourceParams {
	o.SetObjectsSecure(objectsSecure)
	return o
}

// SetObjectsSecure adds the objectsSecure to the get data source params
func (o *GetDataSourceParams) SetObjectsSecure(objectsSecure *bool) {
	o.ObjectsSecure = objectsSecure
}

// WithObjectsServiceName adds the objectsServiceName to the get data source params
func (o *GetDataSourceParams) WithObjectsServiceName(objectsServiceName *string) *GetDataSourceParams {
	o.SetObjectsServiceName(objectsServiceName)
	return o
}

// SetObjectsServiceName adds the objectsServiceName to the get data source params
func (o *GetDataSourceParams) SetObjectsServiceName(objectsServiceName *string) {
	o.ObjectsServiceName = objectsServiceName
}

// WithPeerAddress adds the peerAddress to the get data source params
func (o *GetDataSourceParams) WithPeerAddress(peerAddress *string) *GetDataSourceParams {
	o.SetPeerAddress(peerAddress)
	return o
}

// SetPeerAddress adds the peerAddress to the get data source params
func (o *GetDataSourceParams) SetPeerAddress(peerAddress *string) {
	o.PeerAddress = peerAddress
}

// WithSkipSyncOnRestart adds the skipSyncOnRestart to the get data source params
func (o *GetDataSourceParams) WithSkipSyncOnRestart(skipSyncOnRestart *bool) *GetDataSourceParams {
	o.SetSkipSyncOnRestart(skipSyncOnRestart)
	return o
}

// SetSkipSyncOnRestart adds the skipSyncOnRestart to the get data source params
func (o *GetDataSourceParams) SetSkipSyncOnRestart(skipSyncOnRestart *bool) {
	o.SkipSyncOnRestart = skipSyncOnRestart
}

// WithStorageType adds the storageType to the get data source params
func (o *GetDataSourceParams) WithStorageType(storageType *string) *GetDataSourceParams {
	o.SetStorageType(storageType)
	return o
}

// SetStorageType adds the storageType to the get data source params
func (o *GetDataSourceParams) SetStorageType(storageType *string) {
	o.StorageType = storageType
}

// WithVersioningPolicyName adds the versioningPolicyName to the get data source params
func (o *GetDataSourceParams) WithVersioningPolicyName(versioningPolicyName *string) *GetDataSourceParams {
	o.SetVersioningPolicyName(versioningPolicyName)
	return o
}

// SetVersioningPolicyName adds the versioningPolicyName to the get data source params
func (o *GetDataSourceParams) SetVersioningPolicyName(versioningPolicyName *string) {
	o.VersioningPolicyName = versioningPolicyName
}

// WithWatch adds the watch to the get data source params
func (o *GetDataSourceParams) WithWatch(watch *bool) *GetDataSourceParams {
	o.SetWatch(watch)
	return o
}

// SetWatch adds the watch to the get data source params
func (o *GetDataSourceParams) SetWatch(watch *bool) {
	o.Watch = watch
}

// WriteToRequest writes these params to a swagger request
func (o *GetDataSourceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIKey != nil {

		// query param ApiKey
		var qrAPIKey string

		if o.APIKey != nil {
			qrAPIKey = *o.APIKey
		}
		qAPIKey := qrAPIKey
		if qAPIKey != "" {

			if err := r.SetQueryParam("ApiKey", qAPIKey); err != nil {
				return err
			}
		}
	}

	if o.APISecret != nil {

		// query param ApiSecret
		var qrAPISecret string

		if o.APISecret != nil {
			qrAPISecret = *o.APISecret
		}
		qAPISecret := qrAPISecret
		if qAPISecret != "" {

			if err := r.SetQueryParam("ApiSecret", qAPISecret); err != nil {
				return err
			}
		}
	}

	if o.CreationDate != nil {

		// query param CreationDate
		var qrCreationDate int32

		if o.CreationDate != nil {
			qrCreationDate = *o.CreationDate
		}
		qCreationDate := swag.FormatInt32(qrCreationDate)
		if qCreationDate != "" {

			if err := r.SetQueryParam("CreationDate", qCreationDate); err != nil {
				return err
			}
		}
	}

	if o.Disabled != nil {

		// query param Disabled
		var qrDisabled bool

		if o.Disabled != nil {
			qrDisabled = *o.Disabled
		}
		qDisabled := swag.FormatBool(qrDisabled)
		if qDisabled != "" {

			if err := r.SetQueryParam("Disabled", qDisabled); err != nil {
				return err
			}
		}
	}

	if o.EncryptionKey != nil {

		// query param EncryptionKey
		var qrEncryptionKey string

		if o.EncryptionKey != nil {
			qrEncryptionKey = *o.EncryptionKey
		}
		qEncryptionKey := qrEncryptionKey
		if qEncryptionKey != "" {

			if err := r.SetQueryParam("EncryptionKey", qEncryptionKey); err != nil {
				return err
			}
		}
	}

	if o.EncryptionMode != nil {

		// query param EncryptionMode
		var qrEncryptionMode string

		if o.EncryptionMode != nil {
			qrEncryptionMode = *o.EncryptionMode
		}
		qEncryptionMode := qrEncryptionMode
		if qEncryptionMode != "" {

			if err := r.SetQueryParam("EncryptionMode", qEncryptionMode); err != nil {
				return err
			}
		}
	}

	if o.FlatStorage != nil {

		// query param FlatStorage
		var qrFlatStorage bool

		if o.FlatStorage != nil {
			qrFlatStorage = *o.FlatStorage
		}
		qFlatStorage := swag.FormatBool(qrFlatStorage)
		if qFlatStorage != "" {

			if err := r.SetQueryParam("FlatStorage", qFlatStorage); err != nil {
				return err
			}
		}
	}

	if o.LastSynchronizationDate != nil {

		// query param LastSynchronizationDate
		var qrLastSynchronizationDate int32

		if o.LastSynchronizationDate != nil {
			qrLastSynchronizationDate = *o.LastSynchronizationDate
		}
		qLastSynchronizationDate := swag.FormatInt32(qrLastSynchronizationDate)
		if qLastSynchronizationDate != "" {

			if err := r.SetQueryParam("LastSynchronizationDate", qLastSynchronizationDate); err != nil {
				return err
			}
		}
	}

	// path param Name
	if err := r.SetPathParam("Name", o.Name); err != nil {
		return err
	}

	if o.ObjectsBaseFolder != nil {

		// query param ObjectsBaseFolder
		var qrObjectsBaseFolder string

		if o.ObjectsBaseFolder != nil {
			qrObjectsBaseFolder = *o.ObjectsBaseFolder
		}
		qObjectsBaseFolder := qrObjectsBaseFolder
		if qObjectsBaseFolder != "" {

			if err := r.SetQueryParam("ObjectsBaseFolder", qObjectsBaseFolder); err != nil {
				return err
			}
		}
	}

	if o.ObjectsBucket != nil {

		// query param ObjectsBucket
		var qrObjectsBucket string

		if o.ObjectsBucket != nil {
			qrObjectsBucket = *o.ObjectsBucket
		}
		qObjectsBucket := qrObjectsBucket
		if qObjectsBucket != "" {

			if err := r.SetQueryParam("ObjectsBucket", qObjectsBucket); err != nil {
				return err
			}
		}
	}

	if o.ObjectsHost != nil {

		// query param ObjectsHost
		var qrObjectsHost string

		if o.ObjectsHost != nil {
			qrObjectsHost = *o.ObjectsHost
		}
		qObjectsHost := qrObjectsHost
		if qObjectsHost != "" {

			if err := r.SetQueryParam("ObjectsHost", qObjectsHost); err != nil {
				return err
			}
		}
	}

	if o.ObjectsPort != nil {

		// query param ObjectsPort
		var qrObjectsPort int32

		if o.ObjectsPort != nil {
			qrObjectsPort = *o.ObjectsPort
		}
		qObjectsPort := swag.FormatInt32(qrObjectsPort)
		if qObjectsPort != "" {

			if err := r.SetQueryParam("ObjectsPort", qObjectsPort); err != nil {
				return err
			}
		}
	}

	if o.ObjectsSecure != nil {

		// query param ObjectsSecure
		var qrObjectsSecure bool

		if o.ObjectsSecure != nil {
			qrObjectsSecure = *o.ObjectsSecure
		}
		qObjectsSecure := swag.FormatBool(qrObjectsSecure)
		if qObjectsSecure != "" {

			if err := r.SetQueryParam("ObjectsSecure", qObjectsSecure); err != nil {
				return err
			}
		}
	}

	if o.ObjectsServiceName != nil {

		// query param ObjectsServiceName
		var qrObjectsServiceName string

		if o.ObjectsServiceName != nil {
			qrObjectsServiceName = *o.ObjectsServiceName
		}
		qObjectsServiceName := qrObjectsServiceName
		if qObjectsServiceName != "" {

			if err := r.SetQueryParam("ObjectsServiceName", qObjectsServiceName); err != nil {
				return err
			}
		}
	}

	if o.PeerAddress != nil {

		// query param PeerAddress
		var qrPeerAddress string

		if o.PeerAddress != nil {
			qrPeerAddress = *o.PeerAddress
		}
		qPeerAddress := qrPeerAddress
		if qPeerAddress != "" {

			if err := r.SetQueryParam("PeerAddress", qPeerAddress); err != nil {
				return err
			}
		}
	}

	if o.SkipSyncOnRestart != nil {

		// query param SkipSyncOnRestart
		var qrSkipSyncOnRestart bool

		if o.SkipSyncOnRestart != nil {
			qrSkipSyncOnRestart = *o.SkipSyncOnRestart
		}
		qSkipSyncOnRestart := swag.FormatBool(qrSkipSyncOnRestart)
		if qSkipSyncOnRestart != "" {

			if err := r.SetQueryParam("SkipSyncOnRestart", qSkipSyncOnRestart); err != nil {
				return err
			}
		}
	}

	if o.StorageType != nil {

		// query param StorageType
		var qrStorageType string

		if o.StorageType != nil {
			qrStorageType = *o.StorageType
		}
		qStorageType := qrStorageType
		if qStorageType != "" {

			if err := r.SetQueryParam("StorageType", qStorageType); err != nil {
				return err
			}
		}
	}

	if o.VersioningPolicyName != nil {

		// query param VersioningPolicyName
		var qrVersioningPolicyName string

		if o.VersioningPolicyName != nil {
			qrVersioningPolicyName = *o.VersioningPolicyName
		}
		qVersioningPolicyName := qrVersioningPolicyName
		if qVersioningPolicyName != "" {

			if err := r.SetQueryParam("VersioningPolicyName", qVersioningPolicyName); err != nil {
				return err
			}
		}
	}

	if o.Watch != nil {

		// query param Watch
		var qrWatch bool

		if o.Watch != nil {
			qrWatch = *o.Watch
		}
		qWatch := swag.FormatBool(qrWatch)
		if qWatch != "" {

			if err := r.SetQueryParam("Watch", qWatch); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
