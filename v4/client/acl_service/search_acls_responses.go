// Code generated by go-swagger; DO NOT EDIT.

package acl_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v4/models"
)

// SearchAclsReader is a Reader for the SearchAcls structure.
type SearchAclsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchAclsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchAclsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSearchAclsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchAclsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchAclsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchAclsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchAclsOK creates a SearchAclsOK with default headers values
func NewSearchAclsOK() *SearchAclsOK {
	return &SearchAclsOK{}
}

/*
SearchAclsOK describes a response with status code 200, with default header values.

A successful response.
*/
type SearchAclsOK struct {
	Payload *models.RestACLCollection
}

// IsSuccess returns true when this search acls o k response has a 2xx status code
func (o *SearchAclsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search acls o k response has a 3xx status code
func (o *SearchAclsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search acls o k response has a 4xx status code
func (o *SearchAclsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search acls o k response has a 5xx status code
func (o *SearchAclsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search acls o k response a status code equal to that given
func (o *SearchAclsOK) IsCode(code int) bool {
	return code == 200
}

func (o *SearchAclsOK) Error() string {
	return fmt.Sprintf("[POST /acl][%d] searchAclsOK  %+v", 200, o.Payload)
}

func (o *SearchAclsOK) String() string {
	return fmt.Sprintf("[POST /acl][%d] searchAclsOK  %+v", 200, o.Payload)
}

func (o *SearchAclsOK) GetPayload() *models.RestACLCollection {
	return o.Payload
}

func (o *SearchAclsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestACLCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchAclsUnauthorized creates a SearchAclsUnauthorized with default headers values
func NewSearchAclsUnauthorized() *SearchAclsUnauthorized {
	return &SearchAclsUnauthorized{}
}

/*
SearchAclsUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type SearchAclsUnauthorized struct {
}

// IsSuccess returns true when this search acls unauthorized response has a 2xx status code
func (o *SearchAclsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search acls unauthorized response has a 3xx status code
func (o *SearchAclsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search acls unauthorized response has a 4xx status code
func (o *SearchAclsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search acls unauthorized response has a 5xx status code
func (o *SearchAclsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search acls unauthorized response a status code equal to that given
func (o *SearchAclsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SearchAclsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /acl][%d] searchAclsUnauthorized ", 401)
}

func (o *SearchAclsUnauthorized) String() string {
	return fmt.Sprintf("[POST /acl][%d] searchAclsUnauthorized ", 401)
}

func (o *SearchAclsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchAclsForbidden creates a SearchAclsForbidden with default headers values
func NewSearchAclsForbidden() *SearchAclsForbidden {
	return &SearchAclsForbidden{}
}

/*
SearchAclsForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type SearchAclsForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this search acls forbidden response has a 2xx status code
func (o *SearchAclsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search acls forbidden response has a 3xx status code
func (o *SearchAclsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search acls forbidden response has a 4xx status code
func (o *SearchAclsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search acls forbidden response has a 5xx status code
func (o *SearchAclsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search acls forbidden response a status code equal to that given
func (o *SearchAclsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SearchAclsForbidden) Error() string {
	return fmt.Sprintf("[POST /acl][%d] searchAclsForbidden  %+v", 403, o.Payload)
}

func (o *SearchAclsForbidden) String() string {
	return fmt.Sprintf("[POST /acl][%d] searchAclsForbidden  %+v", 403, o.Payload)
}

func (o *SearchAclsForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SearchAclsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchAclsNotFound creates a SearchAclsNotFound with default headers values
func NewSearchAclsNotFound() *SearchAclsNotFound {
	return &SearchAclsNotFound{}
}

/*
SearchAclsNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type SearchAclsNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this search acls not found response has a 2xx status code
func (o *SearchAclsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search acls not found response has a 3xx status code
func (o *SearchAclsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search acls not found response has a 4xx status code
func (o *SearchAclsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search acls not found response has a 5xx status code
func (o *SearchAclsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search acls not found response a status code equal to that given
func (o *SearchAclsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SearchAclsNotFound) Error() string {
	return fmt.Sprintf("[POST /acl][%d] searchAclsNotFound  %+v", 404, o.Payload)
}

func (o *SearchAclsNotFound) String() string {
	return fmt.Sprintf("[POST /acl][%d] searchAclsNotFound  %+v", 404, o.Payload)
}

func (o *SearchAclsNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SearchAclsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchAclsInternalServerError creates a SearchAclsInternalServerError with default headers values
func NewSearchAclsInternalServerError() *SearchAclsInternalServerError {
	return &SearchAclsInternalServerError{}
}

/*
SearchAclsInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type SearchAclsInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this search acls internal server error response has a 2xx status code
func (o *SearchAclsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search acls internal server error response has a 3xx status code
func (o *SearchAclsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search acls internal server error response has a 4xx status code
func (o *SearchAclsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search acls internal server error response has a 5xx status code
func (o *SearchAclsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search acls internal server error response a status code equal to that given
func (o *SearchAclsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SearchAclsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /acl][%d] searchAclsInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchAclsInternalServerError) String() string {
	return fmt.Sprintf("[POST /acl][%d] searchAclsInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchAclsInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SearchAclsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
