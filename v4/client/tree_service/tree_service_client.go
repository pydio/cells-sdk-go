// Code generated by go-swagger; DO NOT EDIT.

package tree_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tree service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tree service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BulkStatNodes(params *BulkStatNodesParams, opts ...ClientOption) (*BulkStatNodesOK, error)

	CreateNodes(params *CreateNodesParams, opts ...ClientOption) (*CreateNodesOK, error)

	CreateSelection(params *CreateSelectionParams, opts ...ClientOption) (*CreateSelectionOK, error)

	DeleteNodes(params *DeleteNodesParams, opts ...ClientOption) (*DeleteNodesOK, error)

	HeadNode(params *HeadNodeParams, opts ...ClientOption) (*HeadNodeOK, error)

	RestoreNodes(params *RestoreNodesParams, opts ...ClientOption) (*RestoreNodesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BulkStatNodes lists meta for a list of nodes or a full directory using path syntax
*/
func (a *Client) BulkStatNodes(params *BulkStatNodesParams, opts ...ClientOption) (*BulkStatNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkStatNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkStatNodes",
		Method:             "POST",
		PathPattern:        "/tree/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &BulkStatNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkStatNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkStatNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNodes creates dirs or empty files inside the tree
*/
func (a *Client) CreateNodes(params *CreateNodesParams, opts ...ClientOption) (*CreateNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNodes",
		Method:             "POST",
		PathPattern:        "/tree/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &CreateNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSelection creates a temporary selection for further action namely download
*/
func (a *Client) CreateSelection(params *CreateSelectionParams, opts ...ClientOption) (*CreateSelectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSelectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSelection",
		Method:             "POST",
		PathPattern:        "/tree/selection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &CreateSelectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSelectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSelection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNodes handles nodes deletion
*/
func (a *Client) DeleteNodes(params *DeleteNodesParams, opts ...ClientOption) (*DeleteNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNodes",
		Method:             "POST",
		PathPattern:        "/tree/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadNode returns node meta without the node content itself
*/
func (a *Client) HeadNode(params *HeadNodeParams, opts ...ClientOption) (*HeadNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadNode",
		Method:             "GET",
		PathPattern:        "/tree/stat/{Node}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &HeadNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestoreNodes handles nodes restoration from recycle bin
*/
func (a *Client) RestoreNodes(params *RestoreNodesParams, opts ...ClientOption) (*RestoreNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RestoreNodes",
		Method:             "POST",
		PathPattern:        "/tree/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &RestoreNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RestoreNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
