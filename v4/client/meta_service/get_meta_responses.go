// Code generated by go-swagger; DO NOT EDIT.

package meta_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pydio/cells-sdk-go/v4/models"
)

// GetMetaReader is a Reader for the GetMeta structure.
type GetMetaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMetaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMetaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetMetaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMetaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMetaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMetaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMetaOK creates a GetMetaOK with default headers values
func NewGetMetaOK() *GetMetaOK {
	return &GetMetaOK{}
}

/*
GetMetaOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetMetaOK struct {
	Payload *models.TreeNode
}

// IsSuccess returns true when this get meta o k response has a 2xx status code
func (o *GetMetaOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get meta o k response has a 3xx status code
func (o *GetMetaOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get meta o k response has a 4xx status code
func (o *GetMetaOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get meta o k response has a 5xx status code
func (o *GetMetaOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get meta o k response a status code equal to that given
func (o *GetMetaOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetMetaOK) Error() string {
	return fmt.Sprintf("[POST /meta/get/{NodePath}][%d] getMetaOK  %+v", 200, o.Payload)
}

func (o *GetMetaOK) String() string {
	return fmt.Sprintf("[POST /meta/get/{NodePath}][%d] getMetaOK  %+v", 200, o.Payload)
}

func (o *GetMetaOK) GetPayload() *models.TreeNode {
	return o.Payload
}

func (o *GetMetaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TreeNode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetaUnauthorized creates a GetMetaUnauthorized with default headers values
func NewGetMetaUnauthorized() *GetMetaUnauthorized {
	return &GetMetaUnauthorized{}
}

/*
GetMetaUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type GetMetaUnauthorized struct {
}

// IsSuccess returns true when this get meta unauthorized response has a 2xx status code
func (o *GetMetaUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get meta unauthorized response has a 3xx status code
func (o *GetMetaUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get meta unauthorized response has a 4xx status code
func (o *GetMetaUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get meta unauthorized response has a 5xx status code
func (o *GetMetaUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get meta unauthorized response a status code equal to that given
func (o *GetMetaUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetMetaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /meta/get/{NodePath}][%d] getMetaUnauthorized ", 401)
}

func (o *GetMetaUnauthorized) String() string {
	return fmt.Sprintf("[POST /meta/get/{NodePath}][%d] getMetaUnauthorized ", 401)
}

func (o *GetMetaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMetaForbidden creates a GetMetaForbidden with default headers values
func NewGetMetaForbidden() *GetMetaForbidden {
	return &GetMetaForbidden{}
}

/*
GetMetaForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type GetMetaForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this get meta forbidden response has a 2xx status code
func (o *GetMetaForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get meta forbidden response has a 3xx status code
func (o *GetMetaForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get meta forbidden response has a 4xx status code
func (o *GetMetaForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get meta forbidden response has a 5xx status code
func (o *GetMetaForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get meta forbidden response a status code equal to that given
func (o *GetMetaForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetMetaForbidden) Error() string {
	return fmt.Sprintf("[POST /meta/get/{NodePath}][%d] getMetaForbidden  %+v", 403, o.Payload)
}

func (o *GetMetaForbidden) String() string {
	return fmt.Sprintf("[POST /meta/get/{NodePath}][%d] getMetaForbidden  %+v", 403, o.Payload)
}

func (o *GetMetaForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *GetMetaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetaNotFound creates a GetMetaNotFound with default headers values
func NewGetMetaNotFound() *GetMetaNotFound {
	return &GetMetaNotFound{}
}

/*
GetMetaNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type GetMetaNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this get meta not found response has a 2xx status code
func (o *GetMetaNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get meta not found response has a 3xx status code
func (o *GetMetaNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get meta not found response has a 4xx status code
func (o *GetMetaNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get meta not found response has a 5xx status code
func (o *GetMetaNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get meta not found response a status code equal to that given
func (o *GetMetaNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetMetaNotFound) Error() string {
	return fmt.Sprintf("[POST /meta/get/{NodePath}][%d] getMetaNotFound  %+v", 404, o.Payload)
}

func (o *GetMetaNotFound) String() string {
	return fmt.Sprintf("[POST /meta/get/{NodePath}][%d] getMetaNotFound  %+v", 404, o.Payload)
}

func (o *GetMetaNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *GetMetaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetaInternalServerError creates a GetMetaInternalServerError with default headers values
func NewGetMetaInternalServerError() *GetMetaInternalServerError {
	return &GetMetaInternalServerError{}
}

/*
GetMetaInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type GetMetaInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this get meta internal server error response has a 2xx status code
func (o *GetMetaInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get meta internal server error response has a 3xx status code
func (o *GetMetaInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get meta internal server error response has a 4xx status code
func (o *GetMetaInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get meta internal server error response has a 5xx status code
func (o *GetMetaInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get meta internal server error response a status code equal to that given
func (o *GetMetaInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetMetaInternalServerError) Error() string {
	return fmt.Sprintf("[POST /meta/get/{NodePath}][%d] getMetaInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMetaInternalServerError) String() string {
	return fmt.Sprintf("[POST /meta/get/{NodePath}][%d] getMetaInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMetaInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *GetMetaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetMetaBody RestMetaNamespaceRequest
swagger:model GetMetaBody
*/
type GetMetaBody struct {

	// List of namespaces to load
	Namespace []string `json:"Namespace"`
}

// Validate validates this get meta body
func (o *GetMetaBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get meta body based on context it is used
func (o *GetMetaBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetMetaBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMetaBody) UnmarshalBinary(b []byte) error {
	var res GetMetaBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
