// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JobsCtrlCommand Command sent to control a job or a task
//
// swagger:model jobsCtrlCommand
type JobsCtrlCommand struct {

	// Type of command to send (None, Pause, Resume, Stop, Delete, RunOnce, Inactive, Active)
	Cmd *JobsCommand `json:"Cmd,omitempty"`

	// Id of the job
	JobID string `json:"JobId,omitempty"`

	// Owner of the job
	OwnerID string `json:"OwnerId,omitempty"`

	// Parameters used for RunOnce command
	RunParameters map[string]string `json:"RunParameters,omitempty"`

	// Id of the associated task
	TaskID string `json:"TaskId,omitempty"`
}

// Validate validates this jobs ctrl command
func (m *JobsCtrlCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCmd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobsCtrlCommand) validateCmd(formats strfmt.Registry) error {
	if swag.IsZero(m.Cmd) { // not required
		return nil
	}

	if m.Cmd != nil {
		if err := m.Cmd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cmd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Cmd")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this jobs ctrl command based on the context it is used
func (m *JobsCtrlCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCmd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobsCtrlCommand) contextValidateCmd(ctx context.Context, formats strfmt.Registry) error {

	if m.Cmd != nil {
		if err := m.Cmd.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cmd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Cmd")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobsCtrlCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobsCtrlCommand) UnmarshalBinary(b []byte) error {
	var res JobsCtrlCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
