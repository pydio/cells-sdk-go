// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestSettingsEntry rest settings entry
//
// swagger:model restSettingsEntry
type RestSettingsEntry struct {

	// a l i a s
	ALIAS string `json:"ALIAS,omitempty"`

	// accesses
	Accesses map[string]RestSettingsAccess `json:"Accesses,omitempty"`

	// d e s c r IP t i o n
	DESCRIPTION string `json:"DESCRIPTION,omitempty"`

	// feature
	Feature string `json:"Feature,omitempty"`

	// key
	Key string `json:"Key,omitempty"`

	// l a b e l
	LABEL string `json:"LABEL,omitempty"`

	// m a n a g e r
	MANAGER string `json:"MANAGER,omitempty"`

	// m e t a d a t a
	METADATA *RestSettingsEntryMeta `json:"METADATA,omitempty"`
}

// Validate validates this rest settings entry
func (m *RestSettingsEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccesses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMETADATA(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestSettingsEntry) validateAccesses(formats strfmt.Registry) error {
	if swag.IsZero(m.Accesses) { // not required
		return nil
	}

	for k := range m.Accesses {

		if err := validate.Required("Accesses"+"."+k, "body", m.Accesses[k]); err != nil {
			return err
		}
		if val, ok := m.Accesses[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Accesses" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Accesses" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestSettingsEntry) validateMETADATA(formats strfmt.Registry) error {
	if swag.IsZero(m.METADATA) { // not required
		return nil
	}

	if m.METADATA != nil {
		if err := m.METADATA.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("METADATA")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("METADATA")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rest settings entry based on the context it is used
func (m *RestSettingsEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccesses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMETADATA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestSettingsEntry) contextValidateAccesses(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Accesses {

		if val, ok := m.Accesses[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *RestSettingsEntry) contextValidateMETADATA(ctx context.Context, formats strfmt.Registry) error {

	if m.METADATA != nil {
		if err := m.METADATA.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("METADATA")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("METADATA")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestSettingsEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestSettingsEntry) UnmarshalBinary(b []byte) error {
	var res RestSettingsEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
