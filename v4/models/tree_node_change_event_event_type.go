// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TreeNodeChangeEventEventType tree node change event event type
//
// swagger:model treeNodeChangeEventEventType
type TreeNodeChangeEventEventType string

func NewTreeNodeChangeEventEventType(value TreeNodeChangeEventEventType) *TreeNodeChangeEventEventType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TreeNodeChangeEventEventType.
func (m TreeNodeChangeEventEventType) Pointer() *TreeNodeChangeEventEventType {
	return &m
}

const (

	// TreeNodeChangeEventEventTypeCREATE captures enum value "CREATE"
	TreeNodeChangeEventEventTypeCREATE TreeNodeChangeEventEventType = "CREATE"

	// TreeNodeChangeEventEventTypeREAD captures enum value "READ"
	TreeNodeChangeEventEventTypeREAD TreeNodeChangeEventEventType = "READ"

	// TreeNodeChangeEventEventTypeUPDATEPATH captures enum value "UPDATE_PATH"
	TreeNodeChangeEventEventTypeUPDATEPATH TreeNodeChangeEventEventType = "UPDATE_PATH"

	// TreeNodeChangeEventEventTypeUPDATECONTENT captures enum value "UPDATE_CONTENT"
	TreeNodeChangeEventEventTypeUPDATECONTENT TreeNodeChangeEventEventType = "UPDATE_CONTENT"

	// TreeNodeChangeEventEventTypeUPDATEMETA captures enum value "UPDATE_META"
	TreeNodeChangeEventEventTypeUPDATEMETA TreeNodeChangeEventEventType = "UPDATE_META"

	// TreeNodeChangeEventEventTypeUPDATEUSERMETA captures enum value "UPDATE_USER_META"
	TreeNodeChangeEventEventTypeUPDATEUSERMETA TreeNodeChangeEventEventType = "UPDATE_USER_META"

	// TreeNodeChangeEventEventTypeDELETE captures enum value "DELETE"
	TreeNodeChangeEventEventTypeDELETE TreeNodeChangeEventEventType = "DELETE"
)

// for schema
var treeNodeChangeEventEventTypeEnum []interface{}

func init() {
	var res []TreeNodeChangeEventEventType
	if err := json.Unmarshal([]byte(`["CREATE","READ","UPDATE_PATH","UPDATE_CONTENT","UPDATE_META","UPDATE_USER_META","DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeNodeChangeEventEventTypeEnum = append(treeNodeChangeEventEventTypeEnum, v)
	}
}

func (m TreeNodeChangeEventEventType) validateTreeNodeChangeEventEventTypeEnum(path, location string, value TreeNodeChangeEventEventType) error {
	if err := validate.EnumCase(path, location, value, treeNodeChangeEventEventTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tree node change event event type
func (m TreeNodeChangeEventEventType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTreeNodeChangeEventEventTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tree node change event event type based on context it is used
func (m TreeNodeChangeEventEventType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
