{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https",
    "wss"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Pydio Cells Rest API",
    "contact": {
      "name": "Pydio",
      "url": "https://pydio.com"
    },
    "version": "4.0"
  },
  "paths": {
    "/acl": {
      "put": {
        "tags": [
          "ACLService"
        ],
        "summary": "Store an ACL",
        "operationId": "PutAcl",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idmACL"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmACL"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ACLService"
        ],
        "summary": "Search Acls",
        "operationId": "SearchAcls",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restSearchACLRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restACLCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/acl/bulk/delete": {
      "post": {
        "tags": [
          "ACLService"
        ],
        "summary": "Delete one or more ACLs",
        "operationId": "DeleteAcl",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idmACL"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDeleteResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/activity/stream": {
      "post": {
        "tags": [
          "ActivityService"
        ],
        "summary": "Load the the feeds of the currently logged user",
        "operationId": "Stream",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/activityStreamActivitiesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activityObject"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/activity/subscribe": {
      "post": {
        "tags": [
          "ActivityService"
        ],
        "summary": "Manage subscriptions to other users/nodes feeds",
        "operationId": "Subscribe",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/activitySubscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activitySubscription"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/activity/subscriptions": {
      "post": {
        "tags": [
          "ActivityService"
        ],
        "summary": "Load subscriptions to other users/nodes feeds",
        "operationId": "SearchSubscriptions",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/activitySearchSubscriptionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restSubscriptionsCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "TokenService"
        ],
        "summary": "Finish up the reset password process by providing the unique token",
        "operationId": "ResetPassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restResetPasswordResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/auth/reset-password-token/{UserLogin}": {
      "put": {
        "tags": [
          "TokenService"
        ],
        "summary": "Generate a unique token for the reset password process",
        "operationId": "ResetPasswordToken",
        "parameters": [
          {
            "type": "string",
            "description": "Start a ResetPassword workflow for this user",
            "name": "UserLogin",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Create": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restResetPasswordTokenResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/auth/token/document": {
      "post": {
        "tags": [
          "TokenService"
        ],
        "summary": "Generate a temporary access token for a specific document for the current user",
        "operationId": "GenerateDocumentAccessToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restDocumentAccessTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDocumentAccessTokenResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/auth/token/revoke": {
      "post": {
        "tags": [
          "TokenService"
        ],
        "summary": "Revoke a JWT token",
        "operationId": "Revoke",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restRevokeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restRevokeResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/buckets": {
      "post": {
        "tags": [
          "ConfigService"
        ],
        "summary": "List Buckets on a given object storage",
        "operationId": "ListStorageBuckets",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restListStorageBucketsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNodesCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/ctl": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "List all services and their status",
        "operationId": "ListServices",
        "parameters": [
          {
            "enum": [
              "ANY",
              "STOPPED",
              "STARTING",
              "STOPPING",
              "STARTED"
            ],
            "type": "string",
            "default": "ANY",
            "description": "Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING).",
            "name": "StatusFilter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restServiceCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ConfigService"
        ],
        "summary": "[Not Implemented]  Start/Stop a service",
        "operationId": "ControlService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restControlServiceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ctlService"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/datasource": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "List all defined datasources",
        "operationId": "ListDataSources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDataSourceCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/datasource/{Name}": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Load datasource information",
        "operationId": "GetDataSource",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the data source (max length 34)",
            "name": "Name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Whether this data source is disabled or running.",
            "name": "Disabled",
            "in": "query"
          },
          {
            "enum": [
              "LOCAL",
              "S3",
              "SMB",
              "CELLS",
              "AZURE",
              "GCS",
              "B2",
              "MANTA",
              "SIA"
            ],
            "type": "string",
            "default": "LOCAL",
            "description": "Type of underlying storage (LOCAL, S3, AZURE, GCS).",
            "name": "StorageType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service name (underlying s3 service).",
            "name": "ObjectsServiceName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service host.",
            "name": "ObjectsHost",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Corresponding objects service port.",
            "name": "ObjectsPort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Corresponding objects service connection type.",
            "name": "ObjectsSecure",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service bucket.",
            "name": "ObjectsBucket",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service base folder inside the bucket.",
            "name": "ObjectsBaseFolder",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service api key.",
            "name": "ApiKey",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service api secret.",
            "name": "ApiSecret",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Peer address of the data source.",
            "name": "PeerAddress",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Not implemented, whether to watch for underlying changes on the FS.",
            "name": "Watch",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Store data in flat format (object-storage like).",
            "name": "FlatStorage",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Do not trigger resync at start.",
            "name": "SkipSyncOnRestart",
            "in": "query"
          },
          {
            "enum": [
              "CLEAR",
              "MASTER",
              "USER",
              "USER_PWD"
            ],
            "type": "string",
            "default": "CLEAR",
            "description": "Type of encryption applied before sending data to storage.",
            "name": "EncryptionMode",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Encryption key used for encrypting data.",
            "name": "EncryptionKey",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Versioning policy describes how files are kept in the versioning queue.",
            "name": "VersioningPolicyName",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Data Source creation date.",
            "name": "CreationDate",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Data Source last synchronization date.",
            "name": "LastSynchronizationDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/objectDataSource"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Create or update a datasource",
        "operationId": "PutDataSource",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the data source (max length 34)",
            "name": "Name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "DataSource Object description",
              "properties": {
                "ApiKey": {
                  "type": "string",
                  "title": "Corresponding objects service api key"
                },
                "ApiSecret": {
                  "type": "string",
                  "title": "Corresponding objects service api secret"
                },
                "CreationDate": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Data Source creation date"
                },
                "Disabled": {
                  "type": "boolean",
                  "title": "Whether this data source is disabled or running"
                },
                "EncryptionKey": {
                  "type": "string",
                  "title": "Encryption key used for encrypting data"
                },
                "EncryptionMode": {
                  "title": "Type of encryption applied before sending data to storage",
                  "$ref": "#/definitions/objectEncryptionMode"
                },
                "FlatStorage": {
                  "type": "boolean",
                  "title": "Store data in flat format (object-storage like)"
                },
                "LastSynchronizationDate": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Data Source last synchronization date"
                },
                "ObjectsBaseFolder": {
                  "type": "string",
                  "title": "Corresponding objects service base folder inside the bucket"
                },
                "ObjectsBucket": {
                  "type": "string",
                  "title": "Corresponding objects service bucket"
                },
                "ObjectsHost": {
                  "type": "string",
                  "title": "Corresponding objects service host"
                },
                "ObjectsPort": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Corresponding objects service port"
                },
                "ObjectsSecure": {
                  "type": "boolean",
                  "title": "Corresponding objects service connection type"
                },
                "ObjectsServiceName": {
                  "type": "string",
                  "title": "Corresponding objects service name (underlying s3 service)"
                },
                "PeerAddress": {
                  "type": "string",
                  "title": "Peer address of the data source"
                },
                "SkipSyncOnRestart": {
                  "type": "boolean",
                  "title": "Do not trigger resync at start"
                },
                "StorageConfiguration": {
                  "type": "object",
                  "title": "List of key values describing storage configuration",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "StorageType": {
                  "title": "Type of underlying storage (LOCAL, S3, AZURE, GCS)",
                  "$ref": "#/definitions/objectStorageType"
                },
                "VersioningPolicyName": {
                  "type": "string",
                  "title": "Versioning policy describes how files are kept in the versioning queue"
                },
                "Watch": {
                  "type": "boolean",
                  "title": "Not implemented, whether to watch for underlying changes on the FS"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/objectDataSource"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Delete a datasource",
        "operationId": "DeleteDataSource",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the data source (max length 34)",
            "name": "Name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Whether this data source is disabled or running.",
            "name": "Disabled",
            "in": "query"
          },
          {
            "enum": [
              "LOCAL",
              "S3",
              "SMB",
              "CELLS",
              "AZURE",
              "GCS",
              "B2",
              "MANTA",
              "SIA"
            ],
            "type": "string",
            "default": "LOCAL",
            "description": "Type of underlying storage (LOCAL, S3, AZURE, GCS).",
            "name": "StorageType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service name (underlying s3 service).",
            "name": "ObjectsServiceName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service host.",
            "name": "ObjectsHost",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Corresponding objects service port.",
            "name": "ObjectsPort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Corresponding objects service connection type.",
            "name": "ObjectsSecure",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service bucket.",
            "name": "ObjectsBucket",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service base folder inside the bucket.",
            "name": "ObjectsBaseFolder",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service api key.",
            "name": "ApiKey",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Corresponding objects service api secret.",
            "name": "ApiSecret",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Peer address of the data source.",
            "name": "PeerAddress",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Not implemented, whether to watch for underlying changes on the FS.",
            "name": "Watch",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Store data in flat format (object-storage like).",
            "name": "FlatStorage",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Do not trigger resync at start.",
            "name": "SkipSyncOnRestart",
            "in": "query"
          },
          {
            "enum": [
              "CLEAR",
              "MASTER",
              "USER",
              "USER_PWD"
            ],
            "type": "string",
            "default": "CLEAR",
            "description": "Type of encryption applied before sending data to storage.",
            "name": "EncryptionMode",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Encryption key used for encrypting data.",
            "name": "EncryptionKey",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Versioning policy describes how files are kept in the versioning queue.",
            "name": "VersioningPolicyName",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Data Source creation date.",
            "name": "CreationDate",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Data Source last synchronization date.",
            "name": "LastSynchronizationDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDeleteDataSourceResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/discovery": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Publish available endpoints",
        "operationId": "EndpointsDiscovery",
        "parameters": [
          {
            "type": "string",
            "description": "Filter result to a specific endpoint type.",
            "name": "EndpointType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDiscoveryResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/discovery/forms/{ServiceName}": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Publish Forms definition for building screens in frontend",
        "operationId": "ConfigFormsDiscovery",
        "parameters": [
          {
            "type": "string",
            "description": "Retrieve a configuration form for a given service",
            "name": "ServiceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDiscoveryResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/discovery/openapi": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Publish available REST APIs",
        "operationId": "OpenApiDiscovery",
        "parameters": [
          {
            "type": "string",
            "description": "Filter result to a specific endpoint type.",
            "name": "EndpointType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restOpenApiResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/encryption/create": {
      "post": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Create a new master key",
        "operationId": "CreateEncryptionKey",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/encryptionAdminCreateKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/encryptionAdminCreateKeyResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/encryption/delete": {
      "post": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Delete an existing master key",
        "operationId": "DeleteEncryptionKey",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/encryptionAdminDeleteKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/encryptionAdminDeleteKeyResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/encryption/export": {
      "post": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Export a master key for backup purpose, protected with a password",
        "operationId": "ExportEncryptionKey",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/encryptionAdminExportKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/encryptionAdminExportKeyResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/encryption/import": {
      "put": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Import a previously exported master key, requires the password created at export time",
        "operationId": "ImportEncryptionKey",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/encryptionAdminImportKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/encryptionAdminImportKeyResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/encryption/list": {
      "post": {
        "tags": [
          "ConfigService"
        ],
        "summary": "List registered master keys",
        "operationId": "ListEncryptionKeys",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/encryptionAdminListKeysRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/encryptionAdminListKeysResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/peers": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "List all detected peers (servers on which the app is running)",
        "operationId": "ListPeersAddresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restListPeersAddressesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/peers/{PeerAddress}": {
      "put": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Create a folder on a given path for a given peer (filesystem)",
        "operationId": "CreatePeerFolder",
        "parameters": [
          {
            "type": "string",
            "description": "Restrict listing to a given peer",
            "name": "PeerAddress",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "RestCreatePeerFolderRequest",
              "properties": {
                "Path": {
                  "type": "string",
                  "title": "Path to the folder to be created"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restCreatePeerFolderResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ConfigService"
        ],
        "summary": "List folders on a peer, starting from root",
        "operationId": "ListPeerFolders",
        "parameters": [
          {
            "type": "string",
            "description": "Restrict listing to a given peer",
            "name": "PeerAddress",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "RestListPeerFoldersRequest",
              "properties": {
                "Path": {
                  "type": "string",
                  "title": "Path to the parent folder for listing"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNodesCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/processes": {
      "post": {
        "tags": [
          "ConfigService"
        ],
        "summary": "List running Processes, with option PeerId or ServiceName filter",
        "operationId": "ListProcesses",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restListProcessesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restListProcessesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/registry": {
      "post": {
        "tags": [
          "ConfigService"
        ],
        "operationId": "ListRegistry",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registryListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/registryListResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/scheduler/actions": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Publish scheduler registered actions",
        "operationId": "SchedulerActionsDiscovery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restSchedulerActionsResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/scheduler/actions/{ActionName}": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Publish scheduler action XML form for building screens in frontend",
        "operationId": "SchedulerActionFormDiscovery",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the action to load",
            "name": "ActionName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restSchedulerActionFormResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/sites/{Filter}": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "List configured sites",
        "operationId": "ListSites",
        "parameters": [
          {
            "type": "string",
            "name": "Filter",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restListSitesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/versioning": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "List all defined versioning policies",
        "operationId": "ListVersioningPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restVersioningPolicyCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/versioning/{Uuid}": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Load a given versioning policy",
        "operationId": "GetVersioningPolicy",
        "parameters": [
          {
            "type": "string",
            "name": "Uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Description",
            "in": "query"
          },
          {
            "type": "string",
            "name": "VersionsDataSourceName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "VersionsDataSourceBucket",
            "in": "query"
          },
          {
            "type": "string",
            "format": "int64",
            "name": "MaxTotalSize",
            "in": "query"
          },
          {
            "type": "string",
            "format": "int64",
            "name": "MaxSizePerFile",
            "in": "query"
          },
          {
            "type": "string",
            "format": "int64",
            "name": "IgnoreFilesGreaterThan",
            "in": "query"
          },
          {
            "enum": [
              "KeepAll",
              "KeepLast",
              "KeepNone"
            ],
            "type": "string",
            "default": "KeepAll",
            "name": "NodeDeletedStrategy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/treeVersioningPolicy"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/virtualnodes": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "List all defined virtual nodes",
        "operationId": "ListVirtualNodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNodesCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/config/{FullPath}": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Generic config Get using a full path in the config tree",
        "operationId": "GetConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Full slash-separated path to the config key",
            "name": "FullPath",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "JSON-encoded data to store.",
            "name": "Data",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restConfiguration"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ConfigService"
        ],
        "summary": "Generic config Put, using a full path in the config tree",
        "operationId": "PutConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Full slash-separated path to the config key",
            "name": "FullPath",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Configuration message. Data is an Json representation of any value",
              "properties": {
                "Data": {
                  "type": "string",
                  "title": "JSON-encoded data to store"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restConfiguration"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/frontend/binaries/{BinaryType}/{Uuid}": {
      "get": {
        "tags": [
          "FrontendService"
        ],
        "summary": "Serve frontend binaries directly (avatars / logos / bg images)",
        "operationId": "FrontServeBinary",
        "parameters": [
          {
            "type": "string",
            "description": "Currently supported values are USER and GLOBAL",
            "name": "BinaryType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Id of the binary",
            "name": "Uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restFrontBinaryResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "FrontendService"
        ],
        "summary": "Upload frontend binaries (avatars / logos / bg images)",
        "operationId": "FrontPutBinary",
        "parameters": [
          {
            "type": "string",
            "description": "Currently supported values are USER and GLOBAL",
            "name": "BinaryType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Id of the binary",
            "name": "Uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restFrontBinaryResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/frontend/bootconf": {
      "get": {
        "tags": [
          "FrontendService"
        ],
        "summary": "Add some data to the initial set of parameters loaded by the frontend",
        "operationId": "FrontBootConf",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restFrontBootConfResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/frontend/enroll": {
      "post": {
        "tags": [
          "FrontendService"
        ],
        "summary": "Generic endpoint that can be implemented by 2FA systems for enrollment",
        "operationId": "FrontEnrollAuth",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restFrontEnrollAuthRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restFrontEnrollAuthResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/frontend/messages/{Lang}": {
      "get": {
        "tags": [
          "FrontendService"
        ],
        "summary": "Serve list of I18n messages",
        "operationId": "FrontMessages",
        "parameters": [
          {
            "type": "string",
            "name": "Lang",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restFrontMessagesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/frontend/plugins/{Lang}": {
      "get": {
        "tags": [
          "FrontendService"
        ],
        "summary": "Serve list of I18n messages",
        "operationId": "FrontPlugins",
        "parameters": [
          {
            "type": "string",
            "name": "Lang",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restFrontPluginsResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/frontend/session": {
      "post": {
        "tags": [
          "FrontendService"
        ],
        "summary": "Handle JWT",
        "operationId": "FrontSession",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restFrontSessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restFrontSessionResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/frontend/settings-menu": {
      "get": {
        "tags": [
          "FrontendService"
        ],
        "summary": "Sends a tree of nodes to be used a menu in the Settings panel",
        "operationId": "SettingsMenu",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restSettingsMenuResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/frontend/state": {
      "get": {
        "tags": [
          "FrontendService"
        ],
        "summary": "Send XML state registry",
        "operationId": "FrontState",
        "parameters": [
          {
            "type": "string",
            "name": "XPath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restFrontStateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/graph/recommend": {
      "post": {
        "tags": [
          "GraphService"
        ],
        "operationId": "Recommend",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restRecommendRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restRecommendResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/graph/relation/{UserId}": {
      "get": {
        "tags": [
          "GraphService"
        ],
        "summary": "Compute relation of context user with another user",
        "operationId": "Relation",
        "parameters": [
          {
            "type": "string",
            "name": "UserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restRelationResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/graph/state/{Segment}": {
      "get": {
        "tags": [
          "GraphService"
        ],
        "summary": "Compute accessible workspaces for a given user",
        "operationId": "UserState",
        "parameters": [
          {
            "type": "string",
            "name": "Segment",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restUserStateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/install": {
      "get": {
        "tags": [
          "InstallService"
        ],
        "summary": "Loads default values for install form",
        "operationId": "GetInstall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/installGetDefaultsResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "InstallService"
        ],
        "summary": "Post values to be saved for install",
        "operationId": "PostInstall",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/installInstallRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/installInstallResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/install/agreement": {
      "get": {
        "tags": [
          "InstallService"
        ],
        "summary": "Load a textual agreement for using the software",
        "operationId": "GetAgreement",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/installGetAgreementResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/install/check": {
      "post": {
        "tags": [
          "InstallService"
        ],
        "summary": "Perform a check during install (like a valid DB connection)",
        "operationId": "PerformInstallCheck",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/installPerformCheckRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/installPerformCheckResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/install/events": {
      "get": {
        "tags": [
          "InstallService"
        ],
        "operationId": "InstallEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/installInstallEventsResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/jobs/tasks/delete": {
      "post": {
        "tags": [
          "JobsService"
        ],
        "summary": "Send a control command to clean tasks on a given job",
        "operationId": "UserDeleteTasks",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/jobsDeleteTasksRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/jobsDeleteTasksResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/jobs/tasks/logs": {
      "post": {
        "tags": [
          "JobsService"
        ],
        "summary": "Technical Logs, in Json or CSV format",
        "operationId": "ListTasksLogs",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/logListLogRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restLogMessageCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/jobs/user": {
      "put": {
        "tags": [
          "JobsService"
        ],
        "summary": "Send Control Commands to one or many jobs / tasks",
        "operationId": "UserControlJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/jobsCtrlCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/jobsCtrlCommandResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "JobsService"
        ],
        "summary": "List jobs associated with current user",
        "operationId": "UserListJobs",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/jobsListJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restUserJobsCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/jobs/user/{JobName}": {
      "put": {
        "tags": [
          "JobsService"
        ],
        "summary": "Create a predefined job to be run directly",
        "operationId": "UserCreateJob",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the job to create in the user space",
            "name": "JobName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "RestUserJobRequest",
              "properties": {
                "JsonParameters": {
                  "type": "string",
                  "title": "Json-encoded parameters for this job"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restUserJobResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/log/sys": {
      "post": {
        "tags": [
          "LogService"
        ],
        "summary": "Technical Logs, in Json or CSV format",
        "operationId": "Syslog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/logListLogRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restLogMessageCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/mailer/send": {
      "post": {
        "tags": [
          "MailerService"
        ],
        "summary": "Send an email to a user or any email address",
        "operationId": "Send",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mailerMail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mailerSendMailResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/meta/bulk/get": {
      "post": {
        "tags": [
          "MetaService"
        ],
        "summary": "List meta for a list of nodes, or a full directory using /path/* syntax",
        "operationId": "GetBulkMeta",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restGetBulkMetaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restBulkMetaResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/meta/delete/{NodePath}": {
      "post": {
        "tags": [
          "MetaService"
        ],
        "summary": "Delete metadata of a given node",
        "operationId": "DeleteMeta",
        "parameters": [
          {
            "type": "string",
            "description": "Path to the requested node",
            "name": "NodePath",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "RestMetaNamespaceRequest",
              "properties": {
                "Namespace": {
                  "type": "array",
                  "title": "List of namespaces to load",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/treeNode"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/meta/get/{NodePath}": {
      "post": {
        "tags": [
          "MetaService"
        ],
        "summary": "Load metadata for a given node",
        "operationId": "GetMeta",
        "parameters": [
          {
            "type": "string",
            "description": "Path to the requested node",
            "name": "NodePath",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "RestMetaNamespaceRequest",
              "properties": {
                "Namespace": {
                  "type": "array",
                  "title": "List of namespaces to load",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/treeNode"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/meta/set/{NodePath}": {
      "post": {
        "tags": [
          "MetaService"
        ],
        "summary": "Update metadata for a given node",
        "operationId": "SetMeta",
        "parameters": [
          {
            "type": "string",
            "name": "NodePath",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "RestMetaCollection",
              "properties": {
                "Metadatas": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/restMetadata"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/treeNode"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/policy": {
      "post": {
        "tags": [
          "PolicyService"
        ],
        "summary": "List all defined security policies",
        "operationId": "ListPolicies",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idmListPolicyGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmListPolicyGroupsResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/role": {
      "post": {
        "tags": [
          "RoleService"
        ],
        "summary": "Search Roles",
        "operationId": "SearchRoles",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restSearchRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restRolesCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/role/{Uuid}": {
      "get": {
        "tags": [
          "RoleService"
        ],
        "summary": "Get a Role by ID",
        "operationId": "GetRole",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of this role",
            "name": "Uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Label of this role.",
            "name": "Label",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether this role represents a user team or not.",
            "name": "IsTeam",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether this role is attached to a Group object.",
            "name": "GroupRole",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether this role is attached to a User object.",
            "name": "UserRole",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Last modification date of the role.",
            "name": "LastUpdated",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "List of profiles (standard, shared, admin) on which the role will be automatically applied.",
            "name": "AutoApplies",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether the policies resolve into an editable state.",
            "name": "PoliciesContextEditable",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Is used in a stack of roles, this one will always be applied last.",
            "name": "ForceOverride",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmRole"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "RoleService"
        ],
        "summary": "Create or update a Role",
        "operationId": "SetRole",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of this role",
            "name": "Uuid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Role represents a generic set of permissions that can be applied to any users or groups.",
              "type": "object",
              "properties": {
                "AutoApplies": {
                  "type": "array",
                  "title": "List of profiles (standard, shared, admin) on which the role will be automatically applied",
                  "items": {
                    "type": "string"
                  }
                },
                "ForceOverride": {
                  "description": "Is used in a stack of roles, this one will always be applied last.",
                  "type": "boolean"
                },
                "GroupRole": {
                  "type": "boolean",
                  "title": "Whether this role is attached to a Group object"
                },
                "IsTeam": {
                  "type": "boolean",
                  "title": "Whether this role represents a user team or not"
                },
                "Label": {
                  "type": "string",
                  "title": "Label of this role"
                },
                "LastUpdated": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Last modification date of the role"
                },
                "Policies": {
                  "type": "array",
                  "title": "List of policies for securing this role access",
                  "items": {
                    "$ref": "#/definitions/serviceResourcePolicy"
                  }
                },
                "PoliciesContextEditable": {
                  "type": "boolean",
                  "title": "Whether the policies resolve into an editable state"
                },
                "UserRole": {
                  "type": "boolean",
                  "title": "Whether this role is attached to a User object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmRole"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RoleService"
        ],
        "summary": "Delete a Role by ID",
        "operationId": "DeleteRole",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of this role",
            "name": "Uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Label of this role.",
            "name": "Label",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether this role represents a user team or not.",
            "name": "IsTeam",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether this role is attached to a Group object.",
            "name": "GroupRole",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether this role is attached to a User object.",
            "name": "UserRole",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Last modification date of the role.",
            "name": "LastUpdated",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "List of profiles (standard, shared, admin) on which the role will be automatically applied.",
            "name": "AutoApplies",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether the policies resolve into an editable state.",
            "name": "PoliciesContextEditable",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Is used in a stack of roles, this one will always be applied last.",
            "name": "ForceOverride",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmRole"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/search/nodes": {
      "post": {
        "tags": [
          "SearchService"
        ],
        "summary": "Search indexed nodes (files/folders) on various aspects",
        "operationId": "Nodes",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/treeSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restSearchResults"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/share/cell": {
      "put": {
        "tags": [
          "ShareService"
        ],
        "summary": "Put or Create a share room",
        "operationId": "PutCell",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restPutCellRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restCell"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/share/cell/{Uuid}": {
      "get": {
        "tags": [
          "ShareService"
        ],
        "summary": "Load a share room",
        "operationId": "GetCell",
        "parameters": [
          {
            "type": "string",
            "description": "Cell Uuid",
            "name": "Uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restCell"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShareService"
        ],
        "summary": "Delete a share room",
        "operationId": "DeleteCell",
        "parameters": [
          {
            "type": "string",
            "description": "Cell Uuid",
            "name": "Uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDeleteCellResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/share/link": {
      "put": {
        "tags": [
          "ShareService"
        ],
        "summary": "Put or Create a share room",
        "operationId": "PutShareLink",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restPutShareLinkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restShareLink"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/share/link/{Uuid}": {
      "get": {
        "tags": [
          "ShareService"
        ],
        "summary": "Load a share link with all infos",
        "operationId": "GetShareLink",
        "parameters": [
          {
            "type": "string",
            "description": "Link Uuid",
            "name": "Uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restShareLink"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShareService"
        ],
        "summary": "Delete Share Link",
        "operationId": "DeleteShareLink",
        "parameters": [
          {
            "type": "string",
            "description": "Id of Link to delete",
            "name": "Uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDeleteShareLinkResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/share/policies": {
      "put": {
        "tags": [
          "ShareService"
        ],
        "summary": "Updates policies associated to the underlying workspace for a Cell or a ShareLink",
        "operationId": "UpdateSharePolicies",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restUpdateSharePoliciesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restUpdateSharePoliciesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/share/resources": {
      "post": {
        "tags": [
          "ShareService"
        ],
        "summary": "List Shared Resources for current user or all users",
        "operationId": "ListSharedResources",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restListSharedResourcesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restListSharedResourcesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/templates": {
      "get": {
        "tags": [
          "TemplatesService"
        ],
        "summary": "List available templates",
        "operationId": "ListTemplates",
        "parameters": [
          {
            "type": "string",
            "name": "TemplateType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restListTemplatesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/tree/admin/list": {
      "post": {
        "tags": [
          "AdminTreeService"
        ],
        "summary": "List files and folders starting at the root (first level lists the datasources)",
        "operationId": "ListAdminTree",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/treeListNodesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNodesCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/tree/admin/stat": {
      "post": {
        "tags": [
          "AdminTreeService"
        ],
        "summary": "Read a node information inside the admin tree",
        "operationId": "StatAdminTree",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/treeReadNodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/treeReadNodeResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/tree/create": {
      "post": {
        "tags": [
          "TreeService"
        ],
        "summary": "Create dirs or empty files inside the tree",
        "operationId": "CreateNodes",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restCreateNodesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNodesCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/tree/delete": {
      "post": {
        "tags": [
          "TreeService"
        ],
        "summary": "Handle nodes deletion",
        "operationId": "DeleteNodes",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restDeleteNodesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDeleteNodesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/tree/restore": {
      "post": {
        "tags": [
          "TreeService"
        ],
        "summary": "Handle nodes restoration from recycle bin",
        "operationId": "RestoreNodes",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restRestoreNodesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restRestoreNodesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/tree/selection": {
      "post": {
        "tags": [
          "TreeService"
        ],
        "summary": "Create a temporary selection for further action (namely download)",
        "operationId": "CreateSelection",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restCreateSelectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restCreateSelectionResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/tree/stat/{Node}": {
      "get": {
        "tags": [
          "TreeService"
        ],
        "summary": "Return node meta without the node content itself",
        "operationId": "HeadNode",
        "parameters": [
          {
            "type": "string",
            "description": "The node to state",
            "name": "Node",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restHeadNodeResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/tree/stats": {
      "post": {
        "tags": [
          "TreeService"
        ],
        "summary": "List meta for a list of nodes, or a full directory using /path/* syntax",
        "operationId": "BulkStatNodes",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restGetBulkMetaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restBulkMetaResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/update": {
      "post": {
        "tags": [
          "UpdateService"
        ],
        "summary": "Check the remote server to see if there are available binaries",
        "operationId": "UpdateRequired",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/updateUpdateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/update/{TargetVersion}": {
      "patch": {
        "tags": [
          "UpdateService"
        ],
        "summary": "Apply an update to a given version",
        "operationId": "ApplyUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "Version of the target binary",
            "name": "TargetVersion",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "UpdateApplyUpdateRequest",
              "properties": {
                "PackageName": {
                  "type": "string",
                  "title": "Name of the package if it's not the same as the current binary"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/updateApplyUpdateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "List/Search users",
        "operationId": "SearchUsers",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restSearchUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restUsersCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/user-meta/bookmarks": {
      "post": {
        "tags": [
          "UserMetaService"
        ],
        "summary": "Special API for Bookmarks, will load userMeta and the associated nodes, and return\nas a node list",
        "operationId": "UserBookmarks",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restUserBookmarksRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restBulkMetaResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/user-meta/namespace": {
      "get": {
        "tags": [
          "UserMetaService"
        ],
        "summary": "List defined meta namespaces",
        "operationId": "ListUserMetaNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restUserMetaNamespaceCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserMetaService"
        ],
        "summary": "Admin: update namespaces",
        "operationId": "UpdateUserMetaNamespace",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idmUpdateUserMetaNamespaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmUpdateUserMetaNamespaceResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/user-meta/search": {
      "post": {
        "tags": [
          "UserMetaService"
        ],
        "summary": "Search a list of meta by node Id or by User id and by namespace",
        "operationId": "SearchUserMeta",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idmSearchUserMetaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restUserMetaCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/user-meta/tags/{Namespace}": {
      "get": {
        "tags": [
          "UserMetaService"
        ],
        "summary": "List Tags for a given namespace",
        "operationId": "ListUserMetaTags",
        "parameters": [
          {
            "type": "string",
            "description": "List user meta tags for this namespace",
            "name": "Namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restListUserMetaTagsResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserMetaService"
        ],
        "summary": "Add a new value to Tags for a given namespace",
        "operationId": "PutUserMetaTag",
        "parameters": [
          {
            "type": "string",
            "description": "Add a tag value for this namespace",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "RestPutUserMetaTagRequest",
              "properties": {
                "Tag": {
                  "type": "string",
                  "title": "New tag value"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restPutUserMetaTagResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/user-meta/tags/{Namespace}/{Tags}": {
      "delete": {
        "tags": [
          "UserMetaService"
        ],
        "summary": "Delete one or all tags for a given namespace (use * for all tags)",
        "operationId": "DeleteUserMetaTags",
        "parameters": [
          {
            "type": "string",
            "description": "Delete tags from this namespace",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Delete this tag",
            "name": "Tags",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDeleteUserMetaTagsResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/user-meta/update": {
      "put": {
        "tags": [
          "UserMetaService"
        ],
        "summary": "Update/delete user meta",
        "operationId": "UpdateUserMeta",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idmUpdateUserMetaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmUpdateUserMetaResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/user/roles/{Login}": {
      "put": {
        "tags": [
          "UserService"
        ],
        "summary": "Just save a user roles, without other datas",
        "operationId": "PutRoles",
        "parameters": [
          {
            "type": "string",
            "description": "User login is used to connect, field is empty for groups",
            "name": "Login",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "User can represent either a User or a Group",
              "properties": {
                "Attributes": {
                  "type": "object",
                  "title": "A free list of attributes",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "GroupLabel": {
                  "type": "string",
                  "title": "Label of the group, field is empty for users"
                },
                "GroupPath": {
                  "type": "string",
                  "title": "Path to the parent group"
                },
                "IsGroup": {
                  "type": "boolean",
                  "title": "Whether this object is a group or a user"
                },
                "LastConnected": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Last successful connection timestamp"
                },
                "OldPassword": {
                  "type": "string",
                  "title": "OldPassword must be set when a user updates her own password"
                },
                "Password": {
                  "type": "string",
                  "title": "Password can be passed to be updated (but never read back), field is empty for groups"
                },
                "Policies": {
                  "type": "array",
                  "title": "Policies securing access to this user",
                  "items": {
                    "$ref": "#/definitions/serviceResourcePolicy"
                  }
                },
                "PoliciesContextEditable": {
                  "description": "Context-resolved to quickly check if user is editable or not.",
                  "type": "boolean"
                },
                "Roles": {
                  "type": "array",
                  "title": "List of roles applied to this user or group",
                  "items": {
                    "$ref": "#/definitions/idmRole"
                  }
                },
                "Uuid": {
                  "type": "string",
                  "title": "User unique identifier"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmUser"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/user/{Login}": {
      "get": {
        "tags": [
          "UserService"
        ],
        "summary": "Get a user by login",
        "operationId": "GetUser",
        "parameters": [
          {
            "type": "string",
            "description": "User login is used to connect, field is empty for groups",
            "name": "Login",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User unique identifier.",
            "name": "Uuid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Path to the parent group.",
            "name": "GroupPath",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Password can be passed to be updated (but never read back), field is empty for groups.",
            "name": "Password",
            "in": "query"
          },
          {
            "type": "string",
            "description": "OldPassword must be set when a user updates her own password.",
            "name": "OldPassword",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether this object is a group or a user.",
            "name": "IsGroup",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Label of the group, field is empty for users.",
            "name": "GroupLabel",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Last successful connection timestamp.",
            "name": "LastConnected",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Context-resolved to quickly check if user is editable or not.",
            "name": "PoliciesContextEditable",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmUser"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserService"
        ],
        "summary": "Create or update a user",
        "operationId": "PutUser",
        "parameters": [
          {
            "type": "string",
            "description": "User login is used to connect, field is empty for groups",
            "name": "Login",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "User can represent either a User or a Group",
              "properties": {
                "Attributes": {
                  "type": "object",
                  "title": "A free list of attributes",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "GroupLabel": {
                  "type": "string",
                  "title": "Label of the group, field is empty for users"
                },
                "GroupPath": {
                  "type": "string",
                  "title": "Path to the parent group"
                },
                "IsGroup": {
                  "type": "boolean",
                  "title": "Whether this object is a group or a user"
                },
                "LastConnected": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Last successful connection timestamp"
                },
                "OldPassword": {
                  "type": "string",
                  "title": "OldPassword must be set when a user updates her own password"
                },
                "Password": {
                  "type": "string",
                  "title": "Password can be passed to be updated (but never read back), field is empty for groups"
                },
                "Policies": {
                  "type": "array",
                  "title": "Policies securing access to this user",
                  "items": {
                    "$ref": "#/definitions/serviceResourcePolicy"
                  }
                },
                "PoliciesContextEditable": {
                  "description": "Context-resolved to quickly check if user is editable or not.",
                  "type": "boolean"
                },
                "Roles": {
                  "type": "array",
                  "title": "List of roles applied to this user or group",
                  "items": {
                    "$ref": "#/definitions/idmRole"
                  }
                },
                "Uuid": {
                  "type": "string",
                  "title": "User unique identifier"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmUser"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserService"
        ],
        "summary": "Delete a user",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "User login is used to connect, field is empty for groups",
            "name": "Login",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User unique identifier.",
            "name": "Uuid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Path to the parent group.",
            "name": "GroupPath",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Password can be passed to be updated (but never read back), field is empty for groups.",
            "name": "Password",
            "in": "query"
          },
          {
            "type": "string",
            "description": "OldPassword must be set when a user updates her own password.",
            "name": "OldPassword",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether this object is a group or a user.",
            "name": "IsGroup",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Label of the group, field is empty for users.",
            "name": "GroupLabel",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Last successful connection timestamp.",
            "name": "LastConnected",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Context-resolved to quickly check if user is editable or not.",
            "name": "PoliciesContextEditable",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDeleteResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/workspace": {
      "post": {
        "tags": [
          "WorkspaceService"
        ],
        "summary": "Search workspaces on certain keys",
        "operationId": "SearchWorkspaces",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restSearchWorkspaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restWorkspaceCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    },
    "/workspace/{Slug}": {
      "put": {
        "tags": [
          "WorkspaceService"
        ],
        "summary": "Create or update a workspace",
        "operationId": "PutWorkspace",
        "parameters": [
          {
            "type": "string",
            "description": "Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)",
            "name": "Slug",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "A Workspace is composed of a set of nodes UUIDs and is used to provide accesses to the tree via ACLs.",
              "type": "object",
              "properties": {
                "Attributes": {
                  "type": "string",
                  "title": "JSON-encoded list of attributes"
                },
                "Description": {
                  "type": "string",
                  "title": "Description of the workspace (max length 1000)"
                },
                "Label": {
                  "type": "string",
                  "title": "Label of the workspace (max length 500)"
                },
                "LastUpdated": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Last modification time"
                },
                "Policies": {
                  "type": "array",
                  "title": "Policies for securing access",
                  "items": {
                    "$ref": "#/definitions/serviceResourcePolicy"
                  }
                },
                "PoliciesContextEditable": {
                  "type": "boolean",
                  "title": "Context-resolved to quickly check if workspace is editable or not"
                },
                "RootNodes": {
                  "type": "object",
                  "title": "List of the Root Nodes in the tree that compose this workspace",
                  "additionalProperties": {
                    "$ref": "#/definitions/treeNode"
                  }
                },
                "RootUUIDs": {
                  "type": "array",
                  "title": "Quick list of the RootNodes uuids",
                  "items": {
                    "type": "string"
                  }
                },
                "Scope": {
                  "title": "Scope can be ADMIN, ROOM (=CELL) or LINK",
                  "$ref": "#/definitions/idmWorkspaceScope"
                },
                "UUID": {
                  "type": "string",
                  "title": "Unique identifier of the workspace"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmWorkspace"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkspaceService"
        ],
        "summary": "Delete an existing workspace",
        "operationId": "DeleteWorkspace",
        "parameters": [
          {
            "type": "string",
            "description": "Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)",
            "name": "Slug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Unique identifier of the workspace.",
            "name": "UUID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Label of the workspace (max length 500).",
            "name": "Label",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Description of the workspace (max length 1000).",
            "name": "Description",
            "in": "query"
          },
          {
            "enum": [
              "ANY",
              "ADMIN",
              "ROOM",
              "LINK"
            ],
            "type": "string",
            "default": "ANY",
            "description": "Scope can be ADMIN, ROOM (=CELL) or LINK.",
            "name": "Scope",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Last modification time.",
            "name": "LastUpdated",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded list of attributes.",
            "name": "Attributes",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Quick list of the RootNodes uuids.",
            "name": "RootUUIDs",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Context-resolved to quickly check if workspace is editable or not.",
            "name": "PoliciesContextEditable",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDeleteResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ListLogRequestLogFormat": {
      "type": "string",
      "title": "Output Format",
      "default": "JSON",
      "enum": [
        "JSON",
        "CSV",
        "XLSX"
      ]
    },
    "ListSharedResourcesRequestListShareType": {
      "type": "string",
      "default": "ANY",
      "enum": [
        "ANY",
        "LINKS",
        "CELLS"
      ]
    },
    "ListSharedResourcesResponseSharedResource": {
      "type": "object",
      "title": "Container for ShareLink or Cell",
      "properties": {
        "Cells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/restCell"
          }
        },
        "Link": {
          "$ref": "#/definitions/restShareLink"
        },
        "Node": {
          "$ref": "#/definitions/treeNode"
        }
      }
    },
    "PackagePackageStatus": {
      "type": "string",
      "default": "Draft",
      "enum": [
        "Draft",
        "Pending",
        "Released"
      ]
    },
    "ResourcePolicyQueryQueryType": {
      "type": "string",
      "default": "CONTEXT",
      "enum": [
        "CONTEXT",
        "ANY",
        "NONE",
        "USER"
      ]
    },
    "UpdateUserMetaNamespaceRequestUserMetaNsOp": {
      "type": "string",
      "default": "PUT",
      "enum": [
        "PUT",
        "DELETE"
      ]
    },
    "UpdateUserMetaRequestUserMetaOp": {
      "type": "string",
      "default": "PUT",
      "enum": [
        "PUT",
        "DELETE"
      ]
    },
    "activityObject": {
      "type": "object",
      "properties": {
        "@context": {
          "type": "string"
        },
        "accuracy": {
          "type": "number",
          "format": "float",
          "title": "Place Properties"
        },
        "actor": {
          "title": "Activity Properties",
          "$ref": "#/definitions/activityObject"
        },
        "altitude": {
          "type": "number",
          "format": "float"
        },
        "anyOf": {
          "$ref": "#/definitions/activityObject"
        },
        "attachment": {
          "$ref": "#/definitions/activityObject"
        },
        "attributedTo": {
          "$ref": "#/definitions/activityObject"
        },
        "audience": {
          "$ref": "#/definitions/activityObject"
        },
        "bcc": {
          "$ref": "#/definitions/activityObject"
        },
        "bto": {
          "$ref": "#/definitions/activityObject"
        },
        "cc": {
          "$ref": "#/definitions/activityObject"
        },
        "closed": {
          "type": "string",
          "format": "date-time"
        },
        "content": {
          "$ref": "#/definitions/activityObject"
        },
        "context": {
          "$ref": "#/definitions/activityObject"
        },
        "current": {
          "$ref": "#/definitions/activityObject"
        },
        "deleted": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "first": {
          "$ref": "#/definitions/activityObject"
        },
        "formerType": {
          "title": "Tombstone Properties",
          "$ref": "#/definitions/activityObjectType"
        },
        "generator": {
          "$ref": "#/definitions/activityObject"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "href": {
          "type": "string",
          "title": "Link Properties"
        },
        "hreflang": {
          "type": "string"
        },
        "icon": {
          "$ref": "#/definitions/activityObject"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/activityObject"
        },
        "inReplyTo": {
          "$ref": "#/definitions/activityObject"
        },
        "instrument": {
          "$ref": "#/definitions/activityObject"
        },
        "items": {
          "type": "array",
          "title": "Collection Properties",
          "items": {
            "$ref": "#/definitions/activityObject"
          }
        },
        "last": {
          "$ref": "#/definitions/activityObject"
        },
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "location": {
          "$ref": "#/definitions/activityObject"
        },
        "longitude": {
          "type": "number",
          "format": "float"
        },
        "markdown": {
          "type": "string"
        },
        "mediaType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "next": {
          "$ref": "#/definitions/activityObject"
        },
        "object": {
          "$ref": "#/definitions/activityObject"
        },
        "oneOf": {
          "title": "Question Properties",
          "$ref": "#/definitions/activityObject"
        },
        "origin": {
          "$ref": "#/definitions/activityObject"
        },
        "partOf": {
          "$ref": "#/definitions/activityObject"
        },
        "prev": {
          "$ref": "#/definitions/activityObject"
        },
        "preview": {
          "$ref": "#/definitions/activityObject"
        },
        "published": {
          "type": "string",
          "format": "date-time"
        },
        "radius": {
          "type": "number",
          "format": "float"
        },
        "rel": {
          "type": "string"
        },
        "relationship": {
          "$ref": "#/definitions/activityObject"
        },
        "replies": {
          "$ref": "#/definitions/activityObject"
        },
        "result": {
          "$ref": "#/definitions/activityObject"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "subject": {
          "title": "Relationship Properties",
          "$ref": "#/definitions/activityObject"
        },
        "summary": {
          "type": "string"
        },
        "tag": {
          "$ref": "#/definitions/activityObject"
        },
        "target": {
          "$ref": "#/definitions/activityObject"
        },
        "to": {
          "$ref": "#/definitions/activityObject"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "$ref": "#/definitions/activityObjectType"
        },
        "units": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "$ref": "#/definitions/activityObject"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "activityObjectType": {
      "type": "string",
      "title": "- Collection: CollectionTypes\n - Application: Actor Types\n - Article: Objects Types\n - Accept: Activity Types\n - Workspace: Pydio Types",
      "default": "BaseObject",
      "enum": [
        "BaseObject",
        "Activity",
        "Link",
        "Mention",
        "Collection",
        "OrderedCollection",
        "CollectionPage",
        "OrderedCollectionPage",
        "Application",
        "Group",
        "Organization",
        "Person",
        "Service",
        "Article",
        "Audio",
        "Document",
        "Event",
        "Image",
        "Note",
        "Page",
        "Place",
        "Profile",
        "Relationship",
        "Tombstone",
        "Video",
        "Accept",
        "Add",
        "Announce",
        "Arrive",
        "Block",
        "Create",
        "Delete",
        "Dislike",
        "Flag",
        "Follow",
        "Ignore",
        "Invite",
        "Join",
        "Leave",
        "Like",
        "Listen",
        "Move",
        "Offer",
        "Question",
        "Reject",
        "Read",
        "Remove",
        "TentativeReject",
        "TentativeAccept",
        "Travel",
        "Undo",
        "Update",
        "UpdateComment",
        "UpdateMeta",
        "View",
        "Workspace",
        "Digest",
        "Folder",
        "Cell",
        "Share"
      ]
    },
    "activityOwnerType": {
      "type": "string",
      "default": "NODE",
      "enum": [
        "NODE",
        "USER"
      ]
    },
    "activitySearchSubscriptionsRequest": {
      "type": "object",
      "properties": {
        "ObjectIds": {
          "type": "array",
          "title": "Filter by object Ids",
          "items": {
            "type": "string"
          }
        },
        "ObjectTypes": {
          "type": "array",
          "title": "Filter by type of objects",
          "items": {
            "$ref": "#/definitions/activityOwnerType"
          }
        },
        "UserIds": {
          "type": "array",
          "title": "List of UserIds for which we want to list",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "activityStreamActivitiesRequest": {
      "type": "object",
      "properties": {
        "AsDigest": {
          "type": "boolean",
          "title": "Compute a digest of all unread activities"
        },
        "BoxName": {
          "type": "string",
          "title": "Target inbox or outbox for the given object"
        },
        "Context": {
          "title": "Define the context of the stream",
          "$ref": "#/definitions/activityStreamContext"
        },
        "ContextData": {
          "type": "string",
          "title": "Value for the context (e.g. User Id, Node Id)"
        },
        "Language": {
          "description": "Provide language information for building the human-readable strings.",
          "type": "string"
        },
        "Limit": {
          "type": "string",
          "format": "int64",
          "title": "Limit the number of results"
        },
        "Offset": {
          "type": "string",
          "format": "int64",
          "title": "Start listing at a given position"
        },
        "PointOfView": {
          "title": "Provide context for building the human-readable strings of each activity",
          "$ref": "#/definitions/activitySummaryPointOfView"
        },
        "StreamFilter": {
          "type": "string",
          "title": "Json-encoded filter"
        },
        "UnreadCountOnly": {
          "type": "boolean",
          "title": "Count last activities that were not loaded yet"
        }
      }
    },
    "activityStreamContext": {
      "type": "string",
      "default": "MYFEED",
      "enum": [
        "MYFEED",
        "USER_ID",
        "NODE_ID"
      ]
    },
    "activitySubscription": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "title": "List of events to listen to",
          "items": {
            "type": "string"
          }
        },
        "ObjectId": {
          "type": "string",
          "title": "If of the owner"
        },
        "ObjectType": {
          "title": "Type of owner",
          "$ref": "#/definitions/activityOwnerType"
        },
        "UserId": {
          "type": "string",
          "title": "Id of the user for this subscription"
        }
      }
    },
    "activitySummaryPointOfView": {
      "type": "string",
      "default": "GENERIC",
      "enum": [
        "GENERIC",
        "ACTOR",
        "SUBJECT"
      ]
    },
    "authToken": {
      "type": "object",
      "properties": {
        "AccessToken": {
          "type": "string"
        },
        "ExpiresAt": {
          "type": "string"
        },
        "IDToken": {
          "type": "string"
        },
        "RefreshToken": {
          "type": "string"
        }
      }
    },
    "ctlPeer": {
      "type": "object",
      "properties": {
        "Address": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ctlService": {
      "type": "object",
      "properties": {
        "Controllable": {
          "type": "boolean"
        },
        "Description": {
          "type": "string"
        },
        "Metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "RunningPeers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ctlPeer"
          }
        },
        "Status": {
          "$ref": "#/definitions/ctlServiceStatus"
        },
        "Tag": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "ctlServiceCommand": {
      "type": "string",
      "default": "START",
      "enum": [
        "START",
        "STOP"
      ]
    },
    "ctlServiceStatus": {
      "type": "string",
      "default": "ANY",
      "enum": [
        "ANY",
        "STOPPED",
        "STARTING",
        "STOPPING",
        "STARTED"
      ]
    },
    "encryptionAdminCreateKeyRequest": {
      "type": "object",
      "properties": {
        "KeyID": {
          "type": "string",
          "title": "Create a key with this ID"
        },
        "Label": {
          "type": "string",
          "title": "Provide label for the newly created key"
        }
      }
    },
    "encryptionAdminCreateKeyResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "encryptionAdminDeleteKeyRequest": {
      "type": "object",
      "properties": {
        "KeyID": {
          "type": "string",
          "title": "Id of the key to delete"
        }
      }
    },
    "encryptionAdminDeleteKeyResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "encryptionAdminExportKeyRequest": {
      "type": "object",
      "properties": {
        "KeyID": {
          "type": "string",
          "title": "Id of the key to export"
        },
        "StrPassword": {
          "type": "string",
          "title": "Associated password as string"
        }
      }
    },
    "encryptionAdminExportKeyResponse": {
      "type": "object",
      "properties": {
        "Key": {
          "$ref": "#/definitions/encryptionKey"
        }
      }
    },
    "encryptionAdminImportKeyRequest": {
      "type": "object",
      "properties": {
        "Key": {
          "title": "Imported key data",
          "$ref": "#/definitions/encryptionKey"
        },
        "Override": {
          "type": "boolean",
          "title": "Whether to override if a key with same ID already exists"
        },
        "StrPassword": {
          "type": "string",
          "title": "Key password"
        }
      }
    },
    "encryptionAdminImportKeyResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "encryptionAdminListKeysRequest": {
      "type": "object",
      "properties": {
        "All": {
          "type": "boolean"
        }
      }
    },
    "encryptionAdminListKeysResponse": {
      "type": "object",
      "properties": {
        "Keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/encryptionKey"
          }
        }
      }
    },
    "encryptionExport": {
      "type": "object",
      "properties": {
        "By": {
          "type": "string",
          "title": "Name of exporter"
        },
        "Date": {
          "type": "integer",
          "format": "int32",
          "title": "Date of export"
        }
      }
    },
    "encryptionImport": {
      "type": "object",
      "properties": {
        "By": {
          "type": "string",
          "title": "Name of importer"
        },
        "Date": {
          "type": "integer",
          "format": "int32",
          "title": "Date of import"
        }
      }
    },
    "encryptionKey": {
      "type": "object",
      "properties": {
        "Content": {
          "type": "string",
          "title": "Key content"
        },
        "CreationDate": {
          "type": "integer",
          "format": "int32",
          "title": "Key creation date"
        },
        "ID": {
          "type": "string",
          "title": "Key ID"
        },
        "Info": {
          "title": "Additional key info",
          "$ref": "#/definitions/encryptionKeyInfo"
        },
        "Label": {
          "type": "string",
          "title": "Key label"
        },
        "Owner": {
          "type": "string",
          "title": "Key owner"
        }
      }
    },
    "encryptionKeyInfo": {
      "type": "object",
      "properties": {
        "Exports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/encryptionExport"
          }
        },
        "Imports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/encryptionImport"
          }
        }
      }
    },
    "idmACL": {
      "description": "ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role.\nThe context of how they apply can be fine-tuned by workspace.",
      "type": "object",
      "properties": {
        "Action": {
          "title": "Action on which this ACL provides control",
          "$ref": "#/definitions/idmACLAction"
        },
        "ID": {
          "type": "string",
          "title": "Unique ID of this ACL"
        },
        "NodeID": {
          "type": "string",
          "title": "Associated Node"
        },
        "RoleID": {
          "type": "string",
          "title": "Associated Role"
        },
        "WorkspaceID": {
          "type": "string",
          "title": "Associated Workspace"
        }
      }
    },
    "idmACLAction": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "idmACLSingleQuery": {
      "type": "object",
      "properties": {
        "Actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmACLAction"
          }
        },
        "NodeIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RoleIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "WorkspaceIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "not": {
          "type": "boolean"
        }
      }
    },
    "idmListPolicyGroupsRequest": {
      "type": "object",
      "properties": {
        "Filter": {
          "type": "string"
        }
      }
    },
    "idmListPolicyGroupsResponse": {
      "type": "object",
      "properties": {
        "PolicyGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmPolicyGroup"
          }
        },
        "Total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "idmNodeType": {
      "type": "string",
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "USER",
        "GROUP"
      ]
    },
    "idmPolicy": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/idmPolicyCondition"
          }
        },
        "description": {
          "type": "string"
        },
        "effect": {
          "$ref": "#/definitions/idmPolicyEffect"
        },
        "id": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "idmPolicyCondition": {
      "type": "object",
      "properties": {
        "jsonOptions": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "idmPolicyEffect": {
      "type": "string",
      "default": "unknown",
      "enum": [
        "unknown",
        "deny",
        "allow"
      ]
    },
    "idmPolicyGroup": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "LastUpdated": {
          "type": "integer",
          "format": "int32"
        },
        "Name": {
          "type": "string"
        },
        "OwnerUuid": {
          "type": "string"
        },
        "Policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmPolicy"
          }
        },
        "ResourceGroup": {
          "$ref": "#/definitions/idmPolicyResourceGroup"
        },
        "Uuid": {
          "type": "string"
        }
      }
    },
    "idmPolicyResourceGroup": {
      "type": "string",
      "default": "rest",
      "enum": [
        "rest",
        "acl",
        "oidc"
      ]
    },
    "idmRole": {
      "description": "Role represents a generic set of permissions that can be applied to any users or groups.",
      "type": "object",
      "properties": {
        "AutoApplies": {
          "type": "array",
          "title": "List of profiles (standard, shared, admin) on which the role will be automatically applied",
          "items": {
            "type": "string"
          }
        },
        "ForceOverride": {
          "description": "Is used in a stack of roles, this one will always be applied last.",
          "type": "boolean"
        },
        "GroupRole": {
          "type": "boolean",
          "title": "Whether this role is attached to a Group object"
        },
        "IsTeam": {
          "type": "boolean",
          "title": "Whether this role represents a user team or not"
        },
        "Label": {
          "type": "string",
          "title": "Label of this role"
        },
        "LastUpdated": {
          "type": "integer",
          "format": "int32",
          "title": "Last modification date of the role"
        },
        "Policies": {
          "type": "array",
          "title": "List of policies for securing this role access",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PoliciesContextEditable": {
          "type": "boolean",
          "title": "Whether the policies resolve into an editable state"
        },
        "UserRole": {
          "type": "boolean",
          "title": "Whether this role is attached to a User object"
        },
        "Uuid": {
          "type": "string",
          "title": "Unique identifier of this role"
        }
      }
    },
    "idmRoleSingleQuery": {
      "description": "RoleSingleQuery is the basic unit for building queries to Roles.",
      "type": "object",
      "properties": {
        "HasAutoApply": {
          "type": "boolean",
          "title": "Look for roles that have any value in the autoApplies field"
        },
        "IsGroupRole": {
          "type": "boolean",
          "title": "Look for group roles only"
        },
        "IsTeam": {
          "type": "boolean",
          "title": "Look for team roles only"
        },
        "IsUserRole": {
          "type": "boolean",
          "title": "Look for user roles only"
        },
        "Label": {
          "type": "string",
          "title": "Look for roles by label, eventually using wildchar"
        },
        "Uuid": {
          "type": "array",
          "title": "Look for roles by Uuid",
          "items": {
            "type": "string"
          }
        },
        "not": {
          "type": "boolean",
          "title": "Negate the query"
        }
      }
    },
    "idmSearchUserMetaRequest": {
      "type": "object",
      "title": "Request for searching UserMeta by NodeUuid or by Namespace",
      "properties": {
        "MetaUuids": {
          "type": "array",
          "title": "Look for meta by their unique identifier",
          "items": {
            "type": "string"
          }
        },
        "Namespace": {
          "type": "string",
          "title": "Filter meta by their namespace"
        },
        "NodeUuids": {
          "type": "array",
          "title": "Look for all meta for a list of nodes",
          "items": {
            "type": "string"
          }
        },
        "ResourceQuery": {
          "title": "Filter meta by policies query",
          "$ref": "#/definitions/serviceResourcePolicyQuery"
        },
        "ResourceSubjectOwner": {
          "type": "string",
          "title": "Filter meta by owner (in the sense of the policies)"
        }
      }
    },
    "idmUpdateUserMetaNamespaceRequest": {
      "type": "object",
      "title": "Modify UserMetaNamespaces",
      "properties": {
        "Namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmUserMetaNamespace"
          }
        },
        "Operation": {
          "$ref": "#/definitions/UpdateUserMetaNamespaceRequestUserMetaNsOp"
        }
      }
    },
    "idmUpdateUserMetaNamespaceResponse": {
      "type": "object",
      "title": "Response of the",
      "properties": {
        "Namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmUserMetaNamespace"
          }
        }
      }
    },
    "idmUpdateUserMetaRequest": {
      "type": "object",
      "title": "Request for modifying UserMeta",
      "properties": {
        "MetaDatas": {
          "type": "array",
          "title": "List of metadatas to update or delete",
          "items": {
            "$ref": "#/definitions/idmUserMeta"
          }
        },
        "Operation": {
          "title": "Type of operation to apply (PUT / DELETE)",
          "$ref": "#/definitions/UpdateUserMetaRequestUserMetaOp"
        }
      }
    },
    "idmUpdateUserMetaResponse": {
      "type": "object",
      "title": "Response of UpdateUserMeta service",
      "properties": {
        "MetaDatas": {
          "type": "array",
          "title": "List of metadatas",
          "items": {
            "$ref": "#/definitions/idmUserMeta"
          }
        }
      }
    },
    "idmUser": {
      "type": "object",
      "title": "User can represent either a User or a Group",
      "properties": {
        "Attributes": {
          "type": "object",
          "title": "A free list of attributes",
          "additionalProperties": {
            "type": "string"
          }
        },
        "GroupLabel": {
          "type": "string",
          "title": "Label of the group, field is empty for users"
        },
        "GroupPath": {
          "type": "string",
          "title": "Path to the parent group"
        },
        "IsGroup": {
          "type": "boolean",
          "title": "Whether this object is a group or a user"
        },
        "LastConnected": {
          "type": "integer",
          "format": "int32",
          "title": "Last successful connection timestamp"
        },
        "Login": {
          "type": "string",
          "title": "User login is used to connect, field is empty for groups"
        },
        "OldPassword": {
          "type": "string",
          "title": "OldPassword must be set when a user updates her own password"
        },
        "Password": {
          "type": "string",
          "title": "Password can be passed to be updated (but never read back), field is empty for groups"
        },
        "Policies": {
          "type": "array",
          "title": "Policies securing access to this user",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PoliciesContextEditable": {
          "description": "Context-resolved to quickly check if user is editable or not.",
          "type": "boolean"
        },
        "Roles": {
          "type": "array",
          "title": "List of roles applied to this user or group",
          "items": {
            "$ref": "#/definitions/idmRole"
          }
        },
        "Uuid": {
          "type": "string",
          "title": "User unique identifier"
        }
      }
    },
    "idmUserMeta": {
      "type": "object",
      "title": "Piece of metadata attached to a node",
      "properties": {
        "JsonValue": {
          "type": "string",
          "title": "Json encoded value used to pass any type of values"
        },
        "Namespace": {
          "type": "string",
          "title": "Namespace for the metadata"
        },
        "NodeUuid": {
          "type": "string",
          "title": "Unique identifier of the node to which meta is attached"
        },
        "Policies": {
          "type": "array",
          "title": "Policies for securing access",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PoliciesContextEditable": {
          "type": "boolean",
          "title": "Context-resolved to quickly check if this meta is editable or not"
        },
        "ResolvedNode": {
          "title": "Pass along resolved Node for advanced filtering",
          "$ref": "#/definitions/treeNode"
        },
        "Uuid": {
          "type": "string",
          "title": "Unique identifier of the metadata"
        }
      }
    },
    "idmUserMetaNamespace": {
      "type": "object",
      "title": "Globally declared Namespace with associated policies",
      "properties": {
        "Indexable": {
          "type": "boolean",
          "title": "Whether a modification of a metadata value for this namespace should trigger an indexation by the search engine"
        },
        "JsonDefinition": {
          "type": "string",
          "title": "Json-encoded type to provide accurate interface for edition"
        },
        "Label": {
          "type": "string",
          "title": "Human-readable Label"
        },
        "Namespace": {
          "type": "string",
          "title": "Namespace identifier, must be unique"
        },
        "Order": {
          "type": "integer",
          "format": "int32",
          "title": "Order is used for sorting lists of namesapces"
        },
        "Policies": {
          "type": "array",
          "title": "Policies securing this namespace",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PoliciesContextEditable": {
          "type": "boolean",
          "title": "Context-resolved to quickly check if this meta is editable or not"
        }
      }
    },
    "idmUserSingleQuery": {
      "type": "object",
      "properties": {
        "AttributeAnyValue": {
          "type": "boolean"
        },
        "AttributeName": {
          "type": "string",
          "title": "Search on attribute"
        },
        "AttributeValue": {
          "type": "string"
        },
        "ConnectedSince": {
          "type": "string",
          "title": "Compare to last connection date, starting with \u003e or \u003c"
        },
        "FullPath": {
          "type": "string",
          "title": "Search a specific group by path"
        },
        "GroupPath": {
          "type": "string",
          "title": "Search on group path, and if so, search recursively"
        },
        "HasProfile": {
          "type": "string",
          "title": "Shortcut for pydio:profile attribute"
        },
        "HasRole": {
          "type": "string",
          "title": "Search on roles"
        },
        "Login": {
          "type": "string"
        },
        "NodeType": {
          "$ref": "#/definitions/idmNodeType"
        },
        "Password": {
          "type": "string"
        },
        "Recursive": {
          "type": "boolean"
        },
        "Uuid": {
          "type": "string"
        },
        "not": {
          "type": "boolean"
        }
      }
    },
    "idmWorkspace": {
      "description": "A Workspace is composed of a set of nodes UUIDs and is used to provide accesses to the tree via ACLs.",
      "type": "object",
      "properties": {
        "Attributes": {
          "type": "string",
          "title": "JSON-encoded list of attributes"
        },
        "Description": {
          "type": "string",
          "title": "Description of the workspace (max length 1000)"
        },
        "Label": {
          "type": "string",
          "title": "Label of the workspace (max length 500)"
        },
        "LastUpdated": {
          "type": "integer",
          "format": "int32",
          "title": "Last modification time"
        },
        "Policies": {
          "type": "array",
          "title": "Policies for securing access",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PoliciesContextEditable": {
          "type": "boolean",
          "title": "Context-resolved to quickly check if workspace is editable or not"
        },
        "RootNodes": {
          "type": "object",
          "title": "List of the Root Nodes in the tree that compose this workspace",
          "additionalProperties": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "RootUUIDs": {
          "type": "array",
          "title": "Quick list of the RootNodes uuids",
          "items": {
            "type": "string"
          }
        },
        "Scope": {
          "title": "Scope can be ADMIN, ROOM (=CELL) or LINK",
          "$ref": "#/definitions/idmWorkspaceScope"
        },
        "Slug": {
          "type": "string",
          "title": "Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)"
        },
        "UUID": {
          "type": "string",
          "title": "Unique identifier of the workspace"
        }
      }
    },
    "idmWorkspaceScope": {
      "type": "string",
      "default": "ANY",
      "enum": [
        "ANY",
        "ADMIN",
        "ROOM",
        "LINK"
      ]
    },
    "idmWorkspaceSingleQuery": {
      "type": "object",
      "properties": {
        "AttributeName": {
          "type": "string"
        },
        "AttributeValue": {
          "type": "string"
        },
        "HasAttribute": {
          "type": "string"
        },
        "LastUpdated": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "not": {
          "type": "boolean"
        },
        "scope": {
          "$ref": "#/definitions/idmWorkspaceScope"
        },
        "slug": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "installCheckResult": {
      "type": "object",
      "properties": {
        "JsonResult": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "installGetAgreementResponse": {
      "type": "object",
      "properties": {
        "Text": {
          "type": "string"
        }
      }
    },
    "installGetDefaultsResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/installInstallConfig"
        }
      }
    },
    "installInstallConfig": {
      "type": "object",
      "properties": {
        "CheckResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/installCheckResult"
          }
        },
        "DocumentsDSN": {
          "type": "string",
          "title": "Additional Documents DSN data"
        },
        "ProxyConfig": {
          "title": "Additional proxy config (optional)",
          "$ref": "#/definitions/installProxyConfig"
        },
        "UseDocumentsDSN": {
          "type": "boolean"
        },
        "dbConnectionType": {
          "type": "string"
        },
        "dbManualDSN": {
          "type": "string"
        },
        "dbSocketFile": {
          "type": "string"
        },
        "dbSocketName": {
          "type": "string"
        },
        "dbSocketPassword": {
          "type": "string"
        },
        "dbSocketUser": {
          "type": "string"
        },
        "dbTCPHostname": {
          "type": "string"
        },
        "dbTCPName": {
          "type": "string"
        },
        "dbTCPPassword": {
          "type": "string"
        },
        "dbTCPPort": {
          "type": "string"
        },
        "dbTCPUser": {
          "type": "string"
        },
        "dbUseDefaults": {
          "type": "boolean"
        },
        "dsFolder": {
          "type": "string"
        },
        "dsName": {
          "type": "string"
        },
        "dsPort": {
          "type": "string"
        },
        "dsS3ApiKey": {
          "type": "string"
        },
        "dsS3ApiSecret": {
          "type": "string"
        },
        "dsS3BucketBinaries": {
          "type": "string"
        },
        "dsS3BucketCells": {
          "type": "string"
        },
        "dsS3BucketDefault": {
          "type": "string"
        },
        "dsS3BucketPersonal": {
          "type": "string"
        },
        "dsS3BucketThumbs": {
          "type": "string"
        },
        "dsS3BucketVersions": {
          "type": "string"
        },
        "dsS3Custom": {
          "type": "string"
        },
        "dsS3CustomRegion": {
          "type": "string"
        },
        "dsType": {
          "type": "string"
        },
        "frontendApplicationTitle": {
          "type": "string"
        },
        "frontendDefaultLanguage": {
          "type": "string"
        },
        "frontendHosts": {
          "type": "string"
        },
        "frontendLogin": {
          "type": "string"
        },
        "frontendPassword": {
          "type": "string"
        },
        "frontendRepeatPassword": {
          "type": "string"
        },
        "internalUrl": {
          "type": "string"
        },
        "licenseRequired": {
          "type": "boolean"
        },
        "licenseString": {
          "type": "string"
        }
      }
    },
    "installInstallEventsResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "installInstallRequest": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/installInstallConfig"
        }
      }
    },
    "installInstallResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "installPerformCheckRequest": {
      "type": "object",
      "properties": {
        "Config": {
          "$ref": "#/definitions/installInstallConfig"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "installPerformCheckResponse": {
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/installCheckResult"
        }
      }
    },
    "installProxyConfig": {
      "type": "object",
      "title": "ProxyConfig gives necessary URL and TLS configurations to start proxy",
      "properties": {
        "Binds": {
          "type": "array",
          "title": "A list of [host]:port to bind to",
          "items": {
            "type": "string"
          }
        },
        "Certificate": {
          "$ref": "#/definitions/installTLSCertificate"
        },
        "LetsEncrypt": {
          "$ref": "#/definitions/installTLSLetsEncrypt"
        },
        "Maintenance": {
          "type": "boolean",
          "title": "If set, this site will be in maintenance mode"
        },
        "MaintenanceConditions": {
          "type": "array",
          "title": "Append caddy directive to restrict maintenance mode",
          "items": {
            "type": "string"
          }
        },
        "ReverseProxyURL": {
          "type": "string",
          "title": "Optional URL of reverse proxy exposing this site"
        },
        "SSLRedirect": {
          "type": "boolean",
          "title": "If TLS is set, whether to automatically redirect each http://host:port to https://host:port"
        },
        "SelfSigned": {
          "$ref": "#/definitions/installTLSSelfSigned"
        }
      }
    },
    "installTLSCertificate": {
      "type": "object",
      "title": "TLSCertificate is a TLSConfig where user passes",
      "properties": {
        "CellsRootCA": {
          "type": "string"
        },
        "CertFile": {
          "type": "string"
        },
        "KeyFile": {
          "type": "string"
        }
      }
    },
    "installTLSLetsEncrypt": {
      "type": "object",
      "title": "TLSLetsEncrypt set up proxy to automatically get a valid certificate from let's encrypt servers",
      "properties": {
        "AcceptEULA": {
          "type": "boolean"
        },
        "Email": {
          "type": "string"
        },
        "StagingCA": {
          "type": "boolean"
        }
      }
    },
    "installTLSSelfSigned": {
      "type": "object",
      "title": "TLSSelfSigned generates a selfsigned certificate",
      "properties": {
        "Hostnames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "jobsAction": {
      "type": "object",
      "properties": {
        "ActionOutputFilter": {
          "title": "Previous action output filter",
          "$ref": "#/definitions/jobsActionOutputFilter"
        },
        "BreakAfter": {
          "type": "boolean",
          "title": "Stop full chain now : do not carry on executing next actions"
        },
        "Bypass": {
          "type": "boolean",
          "title": "Bypass this action (forward input to output and do nothing)"
        },
        "ChainedActions": {
          "type": "array",
          "title": "Other actions to perform after this one is finished,\nusing the Output of this action as Input for the next.\nIf there are many, it is considered they can be triggered\nin parallel",
          "items": {
            "$ref": "#/definitions/jobsAction"
          }
        },
        "ContextMetaFilter": {
          "title": "Metadata policy-based filter",
          "$ref": "#/definitions/jobsContextMetaFilter"
        },
        "DataSourceFilter": {
          "title": "DataSource objects filter",
          "$ref": "#/definitions/jobsDataSourceSelector"
        },
        "DataSourceSelector": {
          "title": "DataSource objects collector",
          "$ref": "#/definitions/jobsDataSourceSelector"
        },
        "Description": {
          "type": "string",
          "title": "User-defined comment for this action"
        },
        "FailedFilterActions": {
          "type": "array",
          "title": "If any Filter is used, next actions can be triggered on Failure\nThis adds ability to create conditional Yes/No branches",
          "items": {
            "$ref": "#/definitions/jobsAction"
          }
        },
        "ID": {
          "type": "string",
          "title": "String Identifier for specific action"
        },
        "IdmFilter": {
          "title": "Idm objects filter",
          "$ref": "#/definitions/jobsIdmSelector"
        },
        "IdmSelector": {
          "title": "Idm objects collector",
          "$ref": "#/definitions/jobsIdmSelector"
        },
        "Label": {
          "type": "string",
          "title": "User-defined label for this action"
        },
        "NodesFilter": {
          "title": "Node Filter",
          "$ref": "#/definitions/jobsNodesSelector"
        },
        "NodesSelector": {
          "title": "Nodes Selector",
          "$ref": "#/definitions/jobsNodesSelector"
        },
        "Parameters": {
          "type": "object",
          "title": "Defined parameters for this action",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Timeout": {
          "type": "string",
          "title": "Optional timeout for this action"
        },
        "TriggerFilter": {
          "title": "Filter on specific triggers",
          "$ref": "#/definitions/jobsTriggerFilter"
        },
        "UsersFilter": {
          "title": "User Filter (deprecated in favor of IdmSelector)",
          "$ref": "#/definitions/jobsUsersSelector"
        },
        "UsersSelector": {
          "title": "Users Selector (deprecated in favor of IdmSelector)",
          "$ref": "#/definitions/jobsUsersSelector"
        }
      }
    },
    "jobsActionLog": {
      "type": "object",
      "properties": {
        "Action": {
          "$ref": "#/definitions/jobsAction"
        },
        "InputMessage": {
          "$ref": "#/definitions/jobsActionMessage"
        },
        "OutputMessage": {
          "$ref": "#/definitions/jobsActionMessage"
        }
      }
    },
    "jobsActionMessage": {
      "type": "object",
      "title": "Message passed along from one action to another, main properties\nare modified by the various actions.\nOutputChain is being stacked up when passing through actions",
      "properties": {
        "Acls": {
          "type": "array",
          "title": "One or more ACL",
          "items": {
            "$ref": "#/definitions/idmACL"
          }
        },
        "Activities": {
          "type": "array",
          "title": "One or more Activity",
          "items": {
            "$ref": "#/definitions/activityObject"
          }
        },
        "DataSources": {
          "type": "array",
          "title": "One or more DataSource",
          "items": {
            "$ref": "#/definitions/objectDataSource"
          }
        },
        "Event": {
          "title": "Initial event that triggered the Job",
          "$ref": "#/definitions/protobufAny"
        },
        "Nodes": {
          "type": "array",
          "title": "One or more Node",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "OutputChain": {
          "type": "array",
          "title": "Stack of ActionOutput messages appended by all previous actions",
          "items": {
            "$ref": "#/definitions/jobsActionOutput"
          }
        },
        "Roles": {
          "type": "array",
          "title": "One or more Role",
          "items": {
            "$ref": "#/definitions/idmRole"
          }
        },
        "Users": {
          "type": "array",
          "title": "One or more User",
          "items": {
            "$ref": "#/definitions/idmUser"
          }
        },
        "Workspaces": {
          "type": "array",
          "title": "One or more Workspace",
          "items": {
            "$ref": "#/definitions/idmWorkspace"
          }
        }
      }
    },
    "jobsActionOutput": {
      "type": "object",
      "title": "Standard output of an action. Success value is required\nother are optional",
      "properties": {
        "ErrorString": {
          "type": "string",
          "title": "Error"
        },
        "Ignored": {
          "type": "boolean",
          "title": "If action was returned WithIgnore()"
        },
        "JsonBody": {
          "type": "string",
          "format": "byte",
          "title": "Arbitrary JSON-encoded bytes"
        },
        "RawBody": {
          "type": "string",
          "format": "byte",
          "title": "Arbitrary bytes sequence"
        },
        "StringBody": {
          "type": "string",
          "title": "Arbitrary string"
        },
        "Success": {
          "type": "boolean",
          "title": "True if action succeeded"
        },
        "Time": {
          "type": "integer",
          "format": "int32",
          "title": "Time taken to run the action"
        }
      }
    },
    "jobsActionOutputFilter": {
      "type": "object",
      "title": "ActionOutputFilter can be used to filter last message output",
      "properties": {
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Query built from ActionOutputSingleQuery",
          "$ref": "#/definitions/serviceQuery"
        }
      }
    },
    "jobsCommand": {
      "type": "string",
      "default": "None",
      "enum": [
        "None",
        "Pause",
        "Resume",
        "Stop",
        "Delete",
        "RunOnce",
        "Inactive",
        "Active"
      ]
    },
    "jobsContextMetaFilter": {
      "type": "object",
      "title": "PolicyContextFilter can be used to filter request metadata",
      "properties": {
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Can be built with ContextMetaSingleQuery",
          "$ref": "#/definitions/serviceQuery"
        },
        "Type": {
          "title": "Type of context filter",
          "$ref": "#/definitions/jobsContextMetaFilterType"
        }
      }
    },
    "jobsContextMetaFilterType": {
      "type": "string",
      "default": "RequestMeta",
      "enum": [
        "RequestMeta",
        "ContextUser"
      ]
    },
    "jobsCtrlCommand": {
      "type": "object",
      "title": "Command sent to control a job or a task",
      "properties": {
        "Cmd": {
          "title": "Type of command to send (None, Pause, Resume, Stop, Delete, RunOnce, Inactive, Active)",
          "$ref": "#/definitions/jobsCommand"
        },
        "JobId": {
          "type": "string",
          "title": "Id of the job"
        },
        "OwnerId": {
          "type": "string",
          "title": "Owner of the job"
        },
        "RunParameters": {
          "type": "object",
          "title": "Parameters used for RunOnce command",
          "additionalProperties": {
            "type": "string"
          }
        },
        "TaskId": {
          "type": "string",
          "title": "Id of the associated task"
        }
      }
    },
    "jobsCtrlCommandResponse": {
      "type": "object",
      "title": "Response to the CtrlCommand",
      "properties": {
        "Msg": {
          "type": "string"
        }
      }
    },
    "jobsDataSourceSelector": {
      "type": "object",
      "title": "Selector/Filter for DataSource objects",
      "properties": {
        "All": {
          "type": "boolean",
          "title": "Select all"
        },
        "Collect": {
          "type": "boolean",
          "title": "Collect results"
        },
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Composition of DataSourceSingleQueries",
          "$ref": "#/definitions/serviceQuery"
        },
        "Timeout": {
          "type": "string",
          "title": "Optional Timeout for this selector"
        },
        "Type": {
          "title": "Selector type, either DataSource or Object service",
          "$ref": "#/definitions/jobsDataSourceSelectorType"
        }
      }
    },
    "jobsDataSourceSelectorType": {
      "type": "string",
      "default": "DataSource",
      "enum": [
        "DataSource",
        "Object"
      ]
    },
    "jobsDeleteTasksRequest": {
      "type": "object",
      "properties": {
        "JobId": {
          "type": "string",
          "title": "Id of the job"
        },
        "PruneLimit": {
          "type": "integer",
          "format": "int32",
          "title": "If deleting by status, optionally keep only a number of tasks"
        },
        "Status": {
          "type": "array",
          "title": "If no TaskID and/or no JobID are passed, delete tasks by status",
          "items": {
            "$ref": "#/definitions/jobsTaskStatus"
          }
        },
        "TaskID": {
          "type": "array",
          "title": "Ids of tasks to delete",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "jobsDeleteTasksResponse": {
      "type": "object",
      "properties": {
        "Deleted": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "jobsIdmSelector": {
      "type": "object",
      "title": "Generic container for select/filter idm objects",
      "properties": {
        "All": {
          "type": "boolean",
          "title": "Load all objects"
        },
        "Collect": {
          "type": "boolean",
          "title": "Pass a slice of objects to one action, or trigger all actions in parallel"
        },
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Serialized search query",
          "$ref": "#/definitions/serviceQuery"
        },
        "Timeout": {
          "type": "string",
          "title": "Optional Timeout for this selector"
        },
        "Type": {
          "title": "Type of objects to look for",
          "$ref": "#/definitions/jobsIdmSelectorType"
        }
      }
    },
    "jobsIdmSelectorType": {
      "type": "string",
      "title": "Possible values for IdmSelector.Type",
      "default": "User",
      "enum": [
        "User",
        "Role",
        "Workspace",
        "Acl"
      ]
    },
    "jobsJob": {
      "type": "object",
      "properties": {
        "Actions": {
          "type": "array",
          "title": "Chain of actions to perform",
          "items": {
            "$ref": "#/definitions/jobsAction"
          }
        },
        "AutoClean": {
          "type": "boolean",
          "title": "Remove job automatically once it is finished (success only)"
        },
        "AutoStart": {
          "type": "boolean",
          "title": "Start task as soon as job is inserted"
        },
        "ContextMetaFilter": {
          "title": "Event Context Filter",
          "$ref": "#/definitions/jobsContextMetaFilter"
        },
        "Custom": {
          "type": "boolean",
          "title": "Job created by application or by administrator"
        },
        "DataSourceFilter": {
          "title": "DataSource objects filter",
          "$ref": "#/definitions/jobsDataSourceSelector"
        },
        "EventNames": {
          "type": "array",
          "title": "How the job will be triggered.\nOne of these must be set (not exclusive)\nListen to a given set of events",
          "items": {
            "type": "string"
          }
        },
        "ID": {
          "type": "string",
          "title": "Unique ID for this Job"
        },
        "IdmFilter": {
          "title": "Idm objects filter",
          "$ref": "#/definitions/jobsIdmSelector"
        },
        "Inactive": {
          "type": "boolean",
          "title": "Admin can temporarily disable this job"
        },
        "Label": {
          "type": "string",
          "title": "Human-readable Label"
        },
        "Languages": {
          "type": "array",
          "title": "Optional list of languages detected in the context at launch time",
          "items": {
            "type": "string"
          }
        },
        "MaxConcurrency": {
          "type": "integer",
          "format": "int32",
          "title": "Task properties"
        },
        "NodeEventFilter": {
          "title": "Filter out specific events",
          "$ref": "#/definitions/jobsNodesSelector"
        },
        "Owner": {
          "type": "string",
          "title": "Who created this Job"
        },
        "Parameters": {
          "type": "array",
          "title": "Job-level parameters that can be passed to underlying actions",
          "items": {
            "$ref": "#/definitions/jobsJobParameter"
          }
        },
        "ResourcesDependencies": {
          "type": "array",
          "title": "Additional dependencies that may be required when running the job",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        },
        "Schedule": {
          "title": "Schedule a periodic repetition",
          "$ref": "#/definitions/jobsSchedule"
        },
        "Tasks": {
          "type": "array",
          "title": "Filled with currently running tasks",
          "items": {
            "$ref": "#/definitions/jobsTask"
          }
        },
        "TasksSilentUpdate": {
          "type": "boolean",
          "title": "Do not send notification on task update"
        },
        "Timeout": {
          "type": "string",
          "title": "Optional Timeout any running job"
        },
        "UserEventFilter": {
          "title": "Deprecated in favor of more generic IdmSelector",
          "$ref": "#/definitions/jobsUsersSelector"
        }
      }
    },
    "jobsJobParameter": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string",
          "title": "Additional description"
        },
        "JsonChoices": {
          "type": "string",
          "title": "Additional data used by GUI elements"
        },
        "Mandatory": {
          "type": "boolean",
          "title": "If mandatory, job cannot start without a value"
        },
        "Name": {
          "type": "string",
          "title": "Parameter name"
        },
        "Type": {
          "type": "string",
          "title": "Parameter type used in GUI forms"
        },
        "Value": {
          "type": "string",
          "title": "Value saved for this parameter"
        }
      }
    },
    "jobsListJobsRequest": {
      "type": "object",
      "properties": {
        "EventsOnly": {
          "type": "boolean",
          "title": "Filter with only event-based jobs"
        },
        "JobIDs": {
          "type": "array",
          "title": "Load jobs by their ID",
          "items": {
            "type": "string"
          }
        },
        "LoadTasks": {
          "title": "Load tasks that correspond to the given TaskStatus",
          "$ref": "#/definitions/jobsTaskStatus"
        },
        "Owner": {
          "type": "string",
          "title": "Restrict to a specific owner (current user by default)"
        },
        "TasksLimit": {
          "type": "integer",
          "format": "int32",
          "title": "Lmit the number of results"
        },
        "TasksOffset": {
          "type": "integer",
          "format": "int32",
          "title": "Start listing at a given position"
        },
        "TimersOnly": {
          "type": "boolean",
          "title": "Filter with only timer-based jobs"
        }
      }
    },
    "jobsNodesSelector": {
      "type": "object",
      "title": "/////////////////\nJOB  SERVICE  //\n/////////////////",
      "properties": {
        "All": {
          "type": "boolean",
          "title": "Select all files - ignore any other condition"
        },
        "Collect": {
          "type": "boolean",
          "title": "Whether to trigger one action per node or one action\nwith all nodes as selection"
        },
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Pathes": {
          "type": "array",
          "title": "Preset list of node pathes",
          "items": {
            "type": "string"
          }
        },
        "Query": {
          "title": "Query to apply to select users (or filter a given node passed by event)",
          "$ref": "#/definitions/serviceQuery"
        },
        "Timeout": {
          "type": "string",
          "title": "Optional Timeout for this selector"
        }
      }
    },
    "jobsSchedule": {
      "type": "object",
      "properties": {
        "Iso8601MinDelta": {
          "type": "string",
          "title": "Minimum time between two runs"
        },
        "Iso8601Schedule": {
          "description": "ISO 8601 Description of the scheduling for instance \"R2/2015-06-04T19:25:16.828696-07:00/PT4S\"\nwhere first part is the number of repetitions (if 0, infinite repetition), \nsecond part the starting date and last part, the duration between 2 occurrences.",
          "type": "string"
        }
      }
    },
    "jobsTask": {
      "type": "object",
      "properties": {
        "ActionsLogs": {
          "type": "array",
          "title": "Logs of all the actions performed",
          "items": {
            "$ref": "#/definitions/jobsActionLog"
          }
        },
        "CanPause": {
          "type": "boolean",
          "title": "Can be paused/resumed"
        },
        "CanStop": {
          "type": "boolean",
          "title": "Can be interrupted"
        },
        "EndTime": {
          "type": "integer",
          "format": "int32"
        },
        "HasProgress": {
          "type": "boolean",
          "title": "Tasks publish a progress"
        },
        "ID": {
          "type": "string"
        },
        "JobID": {
          "type": "string"
        },
        "Progress": {
          "type": "number",
          "format": "float",
          "title": "Float value of the progress between 0 and 1"
        },
        "StartTime": {
          "type": "integer",
          "format": "int32"
        },
        "Status": {
          "$ref": "#/definitions/jobsTaskStatus"
        },
        "StatusMessage": {
          "type": "string"
        },
        "TriggerOwner": {
          "type": "string"
        }
      }
    },
    "jobsTaskStatus": {
      "type": "string",
      "title": "/////////////////\nTASK SERVICE  //\n/////////////////",
      "default": "Unknown",
      "enum": [
        "Unknown",
        "Idle",
        "Running",
        "Finished",
        "Interrupted",
        "Paused",
        "Any",
        "Error",
        "Queued"
      ]
    },
    "jobsTriggerFilter": {
      "type": "object",
      "title": "Filter for events, can be applied on action branches",
      "properties": {
        "Description": {
          "type": "string",
          "title": "Filter additional description"
        },
        "Label": {
          "type": "string",
          "title": "Filter custom label"
        },
        "Query": {
          "title": "Filter type",
          "$ref": "#/definitions/serviceQuery"
        }
      }
    },
    "jobsUsersSelector": {
      "type": "object",
      "title": "Select or filter users - should be replaced by more generic IdmSelector",
      "properties": {
        "All": {
          "type": "boolean",
          "title": "Select all users"
        },
        "Collect": {
          "type": "boolean",
          "title": "Wether to trigger one action per user or one action\nwith all user as a selection"
        },
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Filter users using this query",
          "$ref": "#/definitions/serviceQuery"
        },
        "Timeout": {
          "type": "string",
          "title": "Optional Timeout for this selector"
        },
        "Users": {
          "type": "array",
          "title": "Preset set of Users",
          "items": {
            "$ref": "#/definitions/idmUser"
          }
        }
      }
    },
    "logListLogRequest": {
      "description": "ListLogRequest launches a parameterised query in the log repository and streams the results.",
      "type": "object",
      "properties": {
        "Format": {
          "$ref": "#/definitions/ListLogRequestLogFormat"
        },
        "Page": {
          "type": "integer",
          "format": "int32",
          "title": "Start at page"
        },
        "Query": {
          "type": "string",
          "title": "Bleve-type Query stsring"
        },
        "Size": {
          "type": "integer",
          "format": "int32",
          "title": "Number of results"
        }
      }
    },
    "logLogMessage": {
      "description": "LogMessage is the format used to transmit log messages to clients via the REST API.",
      "type": "object",
      "properties": {
        "GroupPath": {
          "type": "string"
        },
        "HttpProtocol": {
          "type": "string"
        },
        "JsonZaps": {
          "type": "string",
          "title": "Other Unkown Fields"
        },
        "Level": {
          "type": "string"
        },
        "Logger": {
          "type": "string"
        },
        "Msg": {
          "type": "string"
        },
        "MsgId": {
          "type": "string",
          "title": "Pydio specific"
        },
        "NodePath": {
          "type": "string"
        },
        "NodeUuid": {
          "type": "string",
          "title": "Tree Info"
        },
        "OperationLabel": {
          "type": "string"
        },
        "OperationUuid": {
          "type": "string",
          "title": "High Level Operation Info"
        },
        "Profile": {
          "type": "string"
        },
        "RemoteAddress": {
          "type": "string",
          "title": "Client info"
        },
        "RoleUuids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SchedulerJobUuid": {
          "type": "string"
        },
        "SchedulerTaskActionPath": {
          "type": "string"
        },
        "SchedulerTaskUuid": {
          "type": "string"
        },
        "SpanParentUuid": {
          "type": "string"
        },
        "SpanRootUuid": {
          "type": "string"
        },
        "SpanUuid": {
          "type": "string",
          "title": "Span Info"
        },
        "Ts": {
          "type": "integer",
          "format": "int32",
          "title": "Generic zap fields"
        },
        "UserAgent": {
          "type": "string"
        },
        "UserName": {
          "type": "string",
          "title": "User Info"
        },
        "UserUuid": {
          "type": "string"
        },
        "WsScope": {
          "type": "string"
        },
        "WsUuid": {
          "type": "string"
        }
      }
    },
    "mailerMail": {
      "type": "object",
      "properties": {
        "Attachments": {
          "type": "array",
          "title": "List of attachments",
          "items": {
            "type": "string"
          }
        },
        "Cc": {
          "type": "array",
          "title": "List of target users to put in CC",
          "items": {
            "$ref": "#/definitions/mailerUser"
          }
        },
        "ContentHtml": {
          "type": "string",
          "title": "HTML content used for the body"
        },
        "ContentMarkdown": {
          "type": "string",
          "title": "Markdown content used for the body"
        },
        "ContentPlain": {
          "type": "string",
          "title": "Plain-text content used for the body, if not set will be generated from the ContentHtml"
        },
        "DateSent": {
          "type": "string",
          "format": "int64",
          "title": "Date of sending"
        },
        "From": {
          "title": "User object used to compute the From header",
          "$ref": "#/definitions/mailerUser"
        },
        "Retries": {
          "type": "integer",
          "format": "int32",
          "title": "Number of retries after failed attempts (used internally)"
        },
        "Sender": {
          "title": "User object used to compute the Sender header",
          "$ref": "#/definitions/mailerUser"
        },
        "Subject": {
          "type": "string",
          "title": "String used as subject for the email"
        },
        "TemplateData": {
          "type": "object",
          "title": "Key/values to pass to the template",
          "additionalProperties": {
            "type": "string"
          }
        },
        "TemplateId": {
          "type": "string",
          "title": "Mail Template Id refers to predefined templates"
        },
        "ThreadIndex": {
          "type": "string",
          "title": "Not used, could be used to create conversations"
        },
        "ThreadUuid": {
          "type": "string",
          "title": "Not used, could be used to create conversations"
        },
        "To": {
          "type": "array",
          "title": "List of target users to send the mail to",
          "items": {
            "$ref": "#/definitions/mailerUser"
          }
        },
        "sendErrors": {
          "type": "array",
          "title": "Errors stacked on failed attempts",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "mailerSendMailResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "mailerUser": {
      "type": "object",
      "properties": {
        "Address": {
          "type": "string"
        },
        "Language": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Uuid": {
          "type": "string"
        }
      }
    },
    "objectDataSource": {
      "type": "object",
      "title": "DataSource Object description",
      "properties": {
        "ApiKey": {
          "type": "string",
          "title": "Corresponding objects service api key"
        },
        "ApiSecret": {
          "type": "string",
          "title": "Corresponding objects service api secret"
        },
        "CreationDate": {
          "type": "integer",
          "format": "int32",
          "title": "Data Source creation date"
        },
        "Disabled": {
          "type": "boolean",
          "title": "Whether this data source is disabled or running"
        },
        "EncryptionKey": {
          "type": "string",
          "title": "Encryption key used for encrypting data"
        },
        "EncryptionMode": {
          "title": "Type of encryption applied before sending data to storage",
          "$ref": "#/definitions/objectEncryptionMode"
        },
        "FlatStorage": {
          "type": "boolean",
          "title": "Store data in flat format (object-storage like)"
        },
        "LastSynchronizationDate": {
          "type": "integer",
          "format": "int32",
          "title": "Data Source last synchronization date"
        },
        "Name": {
          "type": "string",
          "title": "Name of the data source (max length 34)"
        },
        "ObjectsBaseFolder": {
          "type": "string",
          "title": "Corresponding objects service base folder inside the bucket"
        },
        "ObjectsBucket": {
          "type": "string",
          "title": "Corresponding objects service bucket"
        },
        "ObjectsHost": {
          "type": "string",
          "title": "Corresponding objects service host"
        },
        "ObjectsPort": {
          "type": "integer",
          "format": "int32",
          "title": "Corresponding objects service port"
        },
        "ObjectsSecure": {
          "type": "boolean",
          "title": "Corresponding objects service connection type"
        },
        "ObjectsServiceName": {
          "type": "string",
          "title": "Corresponding objects service name (underlying s3 service)"
        },
        "PeerAddress": {
          "type": "string",
          "title": "Peer address of the data source"
        },
        "SkipSyncOnRestart": {
          "type": "boolean",
          "title": "Do not trigger resync at start"
        },
        "StorageConfiguration": {
          "type": "object",
          "title": "List of key values describing storage configuration",
          "additionalProperties": {
            "type": "string"
          }
        },
        "StorageType": {
          "title": "Type of underlying storage (LOCAL, S3, AZURE, GCS)",
          "$ref": "#/definitions/objectStorageType"
        },
        "VersioningPolicyName": {
          "type": "string",
          "title": "Versioning policy describes how files are kept in the versioning queue"
        },
        "Watch": {
          "type": "boolean",
          "title": "Not implemented, whether to watch for underlying changes on the FS"
        }
      }
    },
    "objectEncryptionMode": {
      "type": "string",
      "title": "Type of Encryption",
      "default": "CLEAR",
      "enum": [
        "CLEAR",
        "MASTER",
        "USER",
        "USER_PWD"
      ]
    },
    "objectStorageType": {
      "type": "string",
      "title": "Type of Gateway",
      "default": "LOCAL",
      "enum": [
        "LOCAL",
        "S3",
        "SMB",
        "CELLS",
        "AZURE",
        "GCS",
        "B2",
        "MANTA",
        "SIA"
      ]
    },
    "protobufAny": {
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
      "type": "object",
      "properties": {
        "@type": {
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "registryActionType": {
      "type": "string",
      "default": "ANY",
      "enum": [
        "ANY",
        "FULL_DIFF",
        "FULL_LIST",
        "CREATE",
        "UPDATE",
        "DELETE"
      ]
    },
    "registryDao": {
      "type": "object",
      "properties": {
        "driver": {
          "type": "string"
        },
        "dsn": {
          "type": "string"
        }
      }
    },
    "registryEdge": {
      "type": "object",
      "properties": {
        "vertices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "registryGeneric": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/registryItemType"
        }
      }
    },
    "registryItem": {
      "type": "object",
      "properties": {
        "adjacents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/registryItem"
          }
        },
        "dao": {
          "$ref": "#/definitions/registryDao"
        },
        "edge": {
          "$ref": "#/definitions/registryEdge"
        },
        "generic": {
          "$ref": "#/definitions/registryGeneric"
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/registryNode"
        },
        "server": {
          "$ref": "#/definitions/registryServer"
        },
        "service": {
          "$ref": "#/definitions/registryService"
        }
      }
    },
    "registryItemType": {
      "type": "string",
      "default": "ALL",
      "enum": [
        "ALL",
        "EDGE",
        "NODE",
        "SERVICE",
        "SERVER",
        "DAO",
        "GENERIC",
        "ADDRESS",
        "TAG",
        "PROCESS",
        "ENDPOINT",
        "STATS"
      ]
    },
    "registryListRequest": {
      "type": "object",
      "properties": {
        "adjacentsOptions": {
          "$ref": "#/definitions/registryOptions"
        },
        "options": {
          "$ref": "#/definitions/registryOptions"
        }
      }
    },
    "registryListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/registryItem"
          }
        }
      }
    },
    "registryNode": {
      "type": "object",
      "properties": {
        "advertiseIp": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "ips": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machine": {
          "type": "string"
        }
      }
    },
    "registryOptions": {
      "type": "object",
      "title": "Options are registry options",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/registryActionType"
          }
        },
        "metaName": {
          "type": "string"
        },
        "metaValue": {
          "type": "string"
        },
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ttl": {
          "type": "string",
          "format": "int64"
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/registryItemType"
          }
        }
      }
    },
    "registryServer": {
      "type": "object",
      "title": "Server represents the node the service is on",
      "properties": {
        "protocol": {
          "type": "string"
        }
      }
    },
    "registryService": {
      "type": "object",
      "title": "Service represents a go-micro service",
      "properties": {
        "options": {
          "$ref": "#/definitions/registryOptions"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "string"
        }
      }
    },
    "restACLCollection": {
      "type": "object",
      "title": "Response for search request",
      "properties": {
        "ACLs": {
          "type": "array",
          "title": "List of ACLs",
          "items": {
            "$ref": "#/definitions/idmACL"
          }
        },
        "Total": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of results"
        }
      }
    },
    "restActionDescription": {
      "type": "object",
      "properties": {
        "Category": {
          "type": "string",
          "title": "User-defined category to organize actions list"
        },
        "Description": {
          "type": "string",
          "title": "Long description and help text"
        },
        "FormModule": {
          "type": "string",
          "title": "JS module name to be used instead of loading standard form"
        },
        "FormModuleProps": {
          "type": "string",
          "title": "JSON props used to init the FormModule (optional)"
        },
        "HasForm": {
          "type": "boolean",
          "title": "Whether this action has a form or not"
        },
        "Icon": {
          "type": "string",
          "title": "Mdi reference name for displaying icon"
        },
        "InputDescription": {
          "type": "string",
          "title": "Additional description for expected inputs"
        },
        "IsInternal": {
          "description": "If action is declared internal, it is hidden to avoid polluting the list.",
          "type": "boolean"
        },
        "Label": {
          "type": "string",
          "title": "Human-readable label"
        },
        "Name": {
          "type": "string",
          "title": "Unique name of the action"
        },
        "OutputDescription": {
          "type": "string",
          "title": "Additional description describing the action output"
        },
        "SummaryTemplate": {
          "type": "string",
          "title": "Template for building a short summary of the action configuration"
        },
        "Tint": {
          "type": "string",
          "title": "User-defined hexa or rgb color"
        }
      }
    },
    "restBackgroundJobResult": {
      "type": "object",
      "properties": {
        "Label": {
          "type": "string"
        },
        "NodeUuid": {
          "type": "string"
        },
        "Uuid": {
          "type": "string"
        }
      }
    },
    "restBulkMetaResponse": {
      "type": "object",
      "properties": {
        "Nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "Pagination": {
          "$ref": "#/definitions/restPagination"
        }
      }
    },
    "restCell": {
      "type": "object",
      "title": "Model for representing a Cell",
      "properties": {
        "ACLs": {
          "type": "object",
          "title": "Access control for this Cell",
          "additionalProperties": {
            "$ref": "#/definitions/restCellAcl"
          }
        },
        "Description": {
          "type": "string",
          "title": "Long description of the Cell (max 1000 chars)"
        },
        "Label": {
          "type": "string",
          "title": "Label of the Cell (max 500 chars)"
        },
        "Policies": {
          "type": "array",
          "title": "Associated access policies",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PoliciesContextEditable": {
          "type": "boolean",
          "title": "Whether these policies are currently editable"
        },
        "RootNodes": {
          "type": "array",
          "title": "Nodes attached as roots to this Cell",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "Uuid": {
          "type": "string",
          "title": "Unique Id of the Cell"
        }
      }
    },
    "restCellAcl": {
      "type": "object",
      "title": "Group collected acls by subjects",
      "properties": {
        "Actions": {
          "type": "array",
          "title": "List of Acl Actions and their effect",
          "items": {
            "$ref": "#/definitions/idmACLAction"
          }
        },
        "Group": {
          "title": "Associated Group",
          "$ref": "#/definitions/idmUser"
        },
        "IsUserRole": {
          "type": "boolean",
          "title": "Flag for detecting if it's a user role or not"
        },
        "Role": {
          "title": "Associated Role",
          "$ref": "#/definitions/idmRole"
        },
        "RoleId": {
          "type": "string",
          "title": "Associated Role ID"
        },
        "User": {
          "title": "Associated User",
          "$ref": "#/definitions/idmUser"
        }
      }
    },
    "restConfiguration": {
      "type": "object",
      "title": "Configuration message. Data is an Json representation of any value",
      "properties": {
        "Data": {
          "type": "string",
          "title": "JSON-encoded data to store"
        },
        "FullPath": {
          "type": "string",
          "title": "Full slash-separated path to the config key"
        }
      }
    },
    "restControlServiceRequest": {
      "type": "object",
      "properties": {
        "Command": {
          "title": "Command to apply (START or STOP)",
          "$ref": "#/definitions/ctlServiceCommand"
        },
        "NodeName": {
          "type": "string",
          "title": "Name of the node"
        },
        "ServiceName": {
          "type": "string",
          "title": "Name of the service to stop"
        }
      }
    },
    "restCreateNodesRequest": {
      "type": "object",
      "properties": {
        "Nodes": {
          "type": "array",
          "title": "A list of nodes that must be created",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "Recursive": {
          "type": "boolean",
          "title": "If nodes are created inside non-existing folders, whether the parents should be created automatically or not"
        },
        "TemplateUUID": {
          "type": "string",
          "title": "Use a template to create this node"
        }
      }
    },
    "restCreatePeerFolderResponse": {
      "type": "object",
      "properties": {
        "Node": {
          "$ref": "#/definitions/treeNode"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "restCreateSelectionRequest": {
      "type": "object",
      "properties": {
        "Nodes": {
          "type": "array",
          "title": "Create a temporary selection out of this list of nodes",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "Persist": {
          "type": "boolean",
          "title": "Whether to save the selection or just get a temporary Uuid in return"
        },
        "TargetAction": {
          "type": "string",
          "title": "Associated target action for this selection"
        }
      }
    },
    "restCreateSelectionResponse": {
      "type": "object",
      "properties": {
        "Nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "SelectionUUID": {
          "type": "string"
        }
      }
    },
    "restDataSourceCollection": {
      "type": "object",
      "title": "Collection of datasources",
      "properties": {
        "DataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/objectDataSource"
          }
        },
        "Total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "restDeleteCellResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean",
          "title": "Delete result"
        }
      }
    },
    "restDeleteDataSourceResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "restDeleteNodesRequest": {
      "type": "object",
      "properties": {
        "Nodes": {
          "type": "array",
          "title": "List of nodes to delete",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "Recursive": {
          "type": "boolean",
          "title": "Whether to delete all the children if node is a folder"
        },
        "RemovePermanently": {
          "type": "boolean",
          "title": "Force permanent deletion even if a recycle bin is defined"
        }
      }
    },
    "restDeleteNodesResponse": {
      "type": "object",
      "properties": {
        "DeleteJobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/restBackgroundJobResult"
          }
        }
      }
    },
    "restDeleteResponse": {
      "type": "object",
      "title": "Generic Message",
      "properties": {
        "NumRows": {
          "type": "string",
          "format": "int64",
          "title": "Number of records deleted during operation"
        },
        "Success": {
          "type": "boolean",
          "title": "If delete was successfull"
        }
      }
    },
    "restDeleteShareLinkResponse": {
      "type": "object",
      "title": "Response for deleting a share link",
      "properties": {
        "Success": {
          "type": "boolean",
          "title": "If delete sucess or failed"
        }
      }
    },
    "restDeleteUserMetaTagsResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "restDiscoveryResponse": {
      "type": "object",
      "properties": {
        "BuildRevision": {
          "type": "string",
          "title": "Revision of the current binary build, empty if user is not authenticated"
        },
        "BuildStamp": {
          "type": "integer",
          "format": "int32",
          "title": "Build stamp of the binary build, empty if user is not authenticated"
        },
        "Endpoints": {
          "type": "object",
          "title": "List of endpoints and their corresponding URL access. Special case for grpc that just send back its port",
          "additionalProperties": {
            "type": "string"
          }
        },
        "PackageLabel": {
          "type": "string",
          "title": "Current Package Label, empty if user is not authenticated"
        },
        "PackageType": {
          "type": "string",
          "title": "Current Package Type, empty if user is not authenticated"
        },
        "Version": {
          "type": "string",
          "title": "Current Package Version, empty if user is not authenticated"
        }
      }
    },
    "restDocumentAccessTokenRequest": {
      "type": "object",
      "properties": {
        "ClientID": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        }
      }
    },
    "restDocumentAccessTokenResponse": {
      "type": "object",
      "properties": {
        "AccessToken": {
          "type": "string"
        }
      }
    },
    "restError": {
      "type": "object",
      "title": "Generic error message",
      "properties": {
        "Code": {
          "type": "string",
          "title": "Unique ID of the error"
        },
        "Detail": {
          "type": "string",
          "title": "Human-readable, longer description"
        },
        "Meta": {
          "type": "object",
          "title": "Additional Metadata",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Source": {
          "type": "string",
          "title": "Cells service name or other quickly useful info"
        },
        "Title": {
          "type": "string",
          "title": "Human-readable, short label"
        }
      }
    },
    "restFrontBinaryResponse": {
      "type": "object",
      "title": "Not used, endpoint returns octet-stream",
      "properties": {
        "Data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "restFrontBootConfResponse": {
      "type": "object",
      "properties": {
        "JsonData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "restFrontEnrollAuthRequest": {
      "type": "object",
      "properties": {
        "EnrollInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "EnrollType": {
          "type": "string"
        }
      }
    },
    "restFrontEnrollAuthResponse": {
      "type": "object",
      "properties": {
        "Info": {
          "type": "object",
          "title": "Any parameters can be returned",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "restFrontMessagesResponse": {
      "type": "object",
      "properties": {
        "Messages": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "restFrontPluginsResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "restFrontSessionRequest": {
      "type": "object",
      "properties": {
        "AuthInfo": {
          "type": "object",
          "title": "Data sent back by specific auth steps",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ClientTime": {
          "type": "integer",
          "format": "int32",
          "title": "Time reference for computing jwt expiry"
        },
        "Logout": {
          "type": "boolean",
          "title": "Kill session now"
        }
      }
    },
    "restFrontSessionResponse": {
      "type": "object",
      "properties": {
        "Error": {
          "type": "string"
        },
        "ExpireTime": {
          "type": "integer",
          "format": "int32"
        },
        "JWT": {
          "type": "string",
          "title": "Legacy information (now in token)"
        },
        "RedirectTo": {
          "type": "string"
        },
        "Token": {
          "$ref": "#/definitions/authToken"
        },
        "Trigger": {
          "type": "string",
          "title": "Trigger a specific Auth step"
        },
        "TriggerInfo": {
          "type": "object",
          "title": "Additional data for the trigger",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "restFrontStateResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "restGetBulkMetaRequest": {
      "type": "object",
      "properties": {
        "AllMetaProviders": {
          "type": "boolean",
          "title": "Whether to query all services for the metadata they can contribute to enrich the node"
        },
        "Limit": {
          "type": "integer",
          "format": "int32",
          "title": "Limit number of results"
        },
        "NodePaths": {
          "type": "array",
          "title": "List of node paths to query (use paths ending with /* to load the children)",
          "items": {
            "type": "string"
          }
        },
        "Offset": {
          "type": "integer",
          "format": "int32",
          "title": "Start listing at a given position"
        },
        "Versions": {
          "type": "boolean",
          "title": "Load Versions of the given node"
        }
      }
    },
    "restHeadNodeResponse": {
      "type": "object",
      "properties": {
        "Node": {
          "$ref": "#/definitions/treeNode"
        }
      }
    },
    "restListPeersAddressesResponse": {
      "type": "object",
      "properties": {
        "PeerAddresses": {
          "type": "array",
          "title": "List of peer addresses",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "restListProcessesRequest": {
      "type": "object",
      "properties": {
        "PeerId": {
          "type": "string",
          "title": "Id of the peer node"
        },
        "ServiceName": {
          "type": "string",
          "title": "Look for a service name"
        }
      }
    },
    "restListProcessesResponse": {
      "type": "object",
      "properties": {
        "Processes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/restProcess"
          }
        }
      }
    },
    "restListSharedResourcesRequest": {
      "type": "object",
      "properties": {
        "Limit": {
          "type": "integer",
          "format": "int32",
          "title": "Limit number of results"
        },
        "Offset": {
          "type": "integer",
          "format": "int32",
          "title": "Start listing at a given offset"
        },
        "OwnedBySubject": {
          "type": "boolean",
          "title": "If true, will also check filter the output to shares actually owned by subject"
        },
        "ShareType": {
          "title": "Filter output to a given type",
          "$ref": "#/definitions/ListSharedResourcesRequestListShareType"
        },
        "Subject": {
          "type": "string",
          "title": "Will restrict the list to the shares readable by a specific subject.\nIn user-context, current user is used by default. In admin-context, this can\nbe any resource policy subject"
        }
      }
    },
    "restListSharedResourcesResponse": {
      "type": "object",
      "properties": {
        "Limit": {
          "type": "integer",
          "format": "int32"
        },
        "Offset": {
          "type": "integer",
          "format": "int32",
          "title": "Cursor informations"
        },
        "Resources": {
          "type": "array",
          "title": "Actual results",
          "items": {
            "$ref": "#/definitions/ListSharedResourcesResponseSharedResource"
          }
        },
        "Total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "restListSitesResponse": {
      "type": "object",
      "title": "Response with declared sites",
      "properties": {
        "Sites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/installProxyConfig"
          }
        }
      }
    },
    "restListStorageBucketsRequest": {
      "type": "object",
      "properties": {
        "BucketsRegexp": {
          "type": "string"
        },
        "DataSource": {
          "$ref": "#/definitions/objectDataSource"
        }
      }
    },
    "restListTemplatesResponse": {
      "type": "object",
      "properties": {
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/restTemplate"
          }
        }
      }
    },
    "restListUserMetaTagsResponse": {
      "type": "object",
      "properties": {
        "Tags": {
          "type": "array",
          "title": "List of existing tags values",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "restLogMessageCollection": {
      "type": "object",
      "title": "Collection of serialized log messages",
      "properties": {
        "Logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/logLogMessage"
          }
        }
      }
    },
    "restMetadata": {
      "type": "object",
      "properties": {
        "JsonMeta": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        }
      }
    },
    "restNodesCollection": {
      "type": "object",
      "properties": {
        "Children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "Parent": {
          "$ref": "#/definitions/treeNode"
        }
      }
    },
    "restOpenApiResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "restPagination": {
      "type": "object",
      "title": "Generic container for responses sending pagination information",
      "properties": {
        "CurrentOffset": {
          "type": "integer",
          "format": "int32",
          "title": "Current Offset value"
        },
        "CurrentPage": {
          "type": "integer",
          "format": "int32",
          "title": "Current number of Page"
        },
        "Limit": {
          "type": "integer",
          "format": "int32",
          "title": "Current Limit parameter, either passed by request or default value"
        },
        "NextOffset": {
          "type": "integer",
          "format": "int32",
          "title": "Offset value for next page if there is one"
        },
        "PrevOffset": {
          "type": "integer",
          "format": "int32",
          "title": "Offset value for previous page, if there is one"
        },
        "Total": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of records"
        },
        "TotalPages": {
          "type": "integer",
          "format": "int32",
          "title": "Number of detected pages"
        }
      }
    },
    "restProcess": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "title": "Process ID"
        },
        "MetricsPort": {
          "type": "integer",
          "format": "int32",
          "title": "Port to access the metrics api"
        },
        "ParentID": {
          "type": "string",
          "title": "Parent Process ID"
        },
        "PeerAddress": {
          "type": "string",
          "title": "Address of peer node"
        },
        "PeerId": {
          "type": "string",
          "title": "Id of peer node"
        },
        "Services": {
          "type": "array",
          "title": "List of services running inside this process",
          "items": {
            "type": "string"
          }
        },
        "StartTag": {
          "type": "string",
          "title": "Parameters used to start this process"
        }
      }
    },
    "restPutCellRequest": {
      "type": "object",
      "title": "Request for creating a Cell",
      "properties": {
        "CreateEmptyRoot": {
          "type": "boolean",
          "title": "Whether to create a dedicated folder for this cell at creation"
        },
        "Room": {
          "title": "Content of the Cell (Room is legacy name)",
          "$ref": "#/definitions/restCell"
        }
      }
    },
    "restPutShareLinkRequest": {
      "type": "object",
      "title": "Request for create/update a link",
      "properties": {
        "CreatePassword": {
          "type": "string",
          "title": "Set if switching from no password to password"
        },
        "PasswordEnabled": {
          "type": "boolean",
          "title": "Whether it has Password enabled"
        },
        "ShareLink": {
          "title": "Content of the link to create",
          "$ref": "#/definitions/restShareLink"
        },
        "UpdateCustomHash": {
          "type": "string",
          "title": "Change the ShareLink Hash with a custom value"
        },
        "UpdatePassword": {
          "type": "string",
          "title": "Set if updating an existing password"
        }
      }
    },
    "restPutUserMetaTagResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean",
          "title": "Operation success"
        }
      }
    },
    "restRecommendRequest": {
      "type": "object",
      "properties": {
        "Category": {
          "type": "string"
        },
        "Limit": {
          "type": "integer",
          "format": "int32"
        },
        "Neighbor": {
          "type": "string"
        },
        "Segment": {
          "type": "string"
        }
      }
    },
    "restRecommendResponse": {
      "type": "object",
      "properties": {
        "Nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        }
      }
    },
    "restRelationResponse": {
      "type": "object",
      "properties": {
        "BelongsToTeams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmRole"
          }
        },
        "SharedCells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmWorkspace"
          }
        }
      }
    },
    "restResetPasswordRequest": {
      "type": "object",
      "properties": {
        "NewPassword": {
          "type": "string",
          "title": "New password to be stored for this user"
        },
        "ResetPasswordToken": {
          "type": "string",
          "title": "Token generated by the previous step of the reset password workflow"
        },
        "UserLogin": {
          "type": "string",
          "title": "User Login"
        }
      }
    },
    "restResetPasswordResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "restResetPasswordTokenResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "restResourcePolicyQuery": {
      "type": "object",
      "title": "Generic Query for limiting results based on resource permissions",
      "properties": {
        "Type": {
          "title": "The type can be CONTEXT, ANY, NODE or USER. This restricts the may filter out the result set based on their policies",
          "$ref": "#/definitions/ResourcePolicyQueryQueryType"
        },
        "UserId": {
          "type": "string",
          "title": "Limit to one given user ID"
        }
      }
    },
    "restRestoreNodesRequest": {
      "type": "object",
      "properties": {
        "Nodes": {
          "type": "array",
          "title": "Restore this node from the recycle bin to its original location",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        }
      }
    },
    "restRestoreNodesResponse": {
      "type": "object",
      "properties": {
        "RestoreJobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/restBackgroundJobResult"
          }
        }
      }
    },
    "restRevokeRequest": {
      "type": "object",
      "title": "Rest request for revocation. Token is not mandatory, if not set\nrequest will use current JWT token",
      "properties": {
        "TokenId": {
          "type": "string",
          "title": "Pass a specific Token ID to be revoked. If empty, request will use current JWT"
        }
      }
    },
    "restRevokeResponse": {
      "type": "object",
      "title": "Rest response",
      "properties": {
        "Message": {
          "type": "string"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "restRolesCollection": {
      "type": "object",
      "title": "Roles Collection",
      "properties": {
        "Roles": {
          "type": "array",
          "title": "List of Roles",
          "items": {
            "$ref": "#/definitions/idmRole"
          }
        },
        "Total": {
          "type": "integer",
          "format": "int32",
          "title": "Total in DB"
        }
      }
    },
    "restSchedulerActionFormResponse": {
      "type": "object",
      "properties": {
        "ActionName": {
          "type": "string"
        }
      }
    },
    "restSchedulerActionsResponse": {
      "type": "object",
      "properties": {
        "Actions": {
          "type": "object",
          "title": "List of all registered actions",
          "additionalProperties": {
            "$ref": "#/definitions/restActionDescription"
          }
        }
      }
    },
    "restSearchACLRequest": {
      "type": "object",
      "title": "Rest request for ACL's",
      "properties": {
        "CountOnly": {
          "type": "boolean",
          "title": "Return counts only, no actual results"
        },
        "GroupBy": {
          "type": "integer",
          "format": "int32",
          "title": "Group results"
        },
        "Limit": {
          "type": "string",
          "format": "int64",
          "title": "Limit the number of results"
        },
        "Offset": {
          "type": "string",
          "format": "int64",
          "title": "Start listing at a given position"
        },
        "Operation": {
          "title": "Single queries will be combined using this operation AND or OR logic",
          "$ref": "#/definitions/serviceOperationType"
        },
        "Queries": {
          "type": "array",
          "title": "Atomic queries that will be combined using the OperationType (AND or OR)",
          "items": {
            "$ref": "#/definitions/idmACLSingleQuery"
          }
        }
      }
    },
    "restSearchResults": {
      "type": "object",
      "properties": {
        "Facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/treeSearchFacet"
          }
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "Total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "restSearchRoleRequest": {
      "type": "object",
      "title": "Roles Search",
      "properties": {
        "CountOnly": {
          "type": "boolean",
          "title": "Return counts only, no actual results"
        },
        "GroupBy": {
          "type": "integer",
          "format": "int32",
          "title": "Group results by"
        },
        "Limit": {
          "type": "string",
          "format": "int64",
          "title": "Limit number of results"
        },
        "Offset": {
          "type": "string",
          "format": "int64",
          "title": "Start listing at a given position"
        },
        "Operation": {
          "title": "Combine Single Queries with AND or OR",
          "$ref": "#/definitions/serviceOperationType"
        },
        "Queries": {
          "type": "array",
          "title": "List of atomic queries that will be combined using the Operation type (AND / OR)",
          "items": {
            "$ref": "#/definitions/idmRoleSingleQuery"
          }
        },
        "ResourcePolicyQuery": {
          "title": "Policies query for specifying the search context",
          "$ref": "#/definitions/restResourcePolicyQuery"
        }
      }
    },
    "restSearchUserRequest": {
      "type": "object",
      "title": "Users Search",
      "properties": {
        "CountOnly": {
          "type": "boolean",
          "title": "Return counts only, no actual results"
        },
        "GroupBy": {
          "description": "Group by ...",
          "type": "integer",
          "format": "int32"
        },
        "Limit": {
          "type": "string",
          "format": "int64",
          "title": "Limit number of results"
        },
        "Offset": {
          "type": "string",
          "format": "int64",
          "title": "Start listing at a given position"
        },
        "Operation": {
          "title": "Combine single queries with AND or OR logic",
          "$ref": "#/definitions/serviceOperationType"
        },
        "Queries": {
          "type": "array",
          "title": "Atomic queries that will be combined using the Operation Type (AND or OR)",
          "items": {
            "$ref": "#/definitions/idmUserSingleQuery"
          }
        },
        "ResourcePolicyQuery": {
          "title": "Policies queries to filter the search context",
          "$ref": "#/definitions/restResourcePolicyQuery"
        }
      }
    },
    "restSearchWorkspaceRequest": {
      "type": "object",
      "title": "Rest request for searching workspaces",
      "properties": {
        "CountOnly": {
          "type": "boolean",
          "title": "Return counts only, no actual results"
        },
        "GroupBy": {
          "type": "integer",
          "format": "int32",
          "title": "Group results"
        },
        "Limit": {
          "type": "string",
          "format": "int64",
          "title": "Limit the number of results"
        },
        "Offset": {
          "type": "string",
          "format": "int64",
          "title": "Start listing at a given position"
        },
        "Operation": {
          "title": "Single queries will be combined using this operation AND or OR logic",
          "$ref": "#/definitions/serviceOperationType"
        },
        "Queries": {
          "type": "array",
          "title": "Atomic queries that will be combined using the OperationType (AND or OR)",
          "items": {
            "$ref": "#/definitions/idmWorkspaceSingleQuery"
          }
        },
        "ResourcePolicyQuery": {
          "title": "Policies queries to filter the search context",
          "$ref": "#/definitions/restResourcePolicyQuery"
        }
      }
    },
    "restServiceCollection": {
      "type": "object",
      "properties": {
        "Services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ctlService"
          }
        },
        "Total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "restSettingsAccess": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "Policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/restSettingsAccessRestPolicy"
          }
        }
      }
    },
    "restSettingsAccessRestPolicy": {
      "type": "object",
      "properties": {
        "Action": {
          "type": "string"
        },
        "Resource": {
          "type": "string"
        }
      }
    },
    "restSettingsEntry": {
      "type": "object",
      "properties": {
        "ALIAS": {
          "type": "string"
        },
        "Accesses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/restSettingsAccess"
          }
        },
        "DESCRIPTION": {
          "type": "string"
        },
        "Feature": {
          "type": "string"
        },
        "Key": {
          "type": "string"
        },
        "LABEL": {
          "type": "string"
        },
        "MANAGER": {
          "type": "string"
        },
        "METADATA": {
          "$ref": "#/definitions/restSettingsEntryMeta"
        }
      }
    },
    "restSettingsEntryMeta": {
      "type": "object",
      "properties": {
        "advanced": {
          "type": "boolean"
        },
        "component": {
          "type": "string"
        },
        "icon_class": {
          "type": "string"
        },
        "indexed": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "string"
        }
      }
    },
    "restSettingsMenuResponse": {
      "type": "object",
      "properties": {
        "Sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/restSettingsSection"
          }
        },
        "__metadata__": {
          "$ref": "#/definitions/restSettingsEntryMeta"
        }
      }
    },
    "restSettingsSection": {
      "type": "object",
      "properties": {
        "CHILDREN": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/restSettingsEntry"
          }
        },
        "DESCRIPTION": {
          "type": "string"
        },
        "Key": {
          "type": "string"
        },
        "LABEL": {
          "type": "string"
        }
      }
    },
    "restShareLink": {
      "type": "object",
      "title": "Model for representing a public link",
      "properties": {
        "AccessEnd": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp after which the share is disabled"
        },
        "AccessStart": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp of start date for enabling the share (not implemented yet)"
        },
        "CurrentDownloads": {
          "type": "string",
          "format": "int64",
          "title": "Current number of downloads"
        },
        "Description": {
          "type": "string",
          "title": "Description of the Link (max 1000 chars)"
        },
        "Label": {
          "type": "string",
          "title": "Label of the Link (max 500 chars)"
        },
        "LinkHash": {
          "type": "string",
          "title": "Unique Hash for accessing the link"
        },
        "LinkUrl": {
          "type": "string",
          "title": "Full URL for accessing the link"
        },
        "MaxDownloads": {
          "type": "string",
          "format": "int64",
          "title": "Maximum number of downloads until expiration"
        },
        "PasswordRequired": {
          "type": "boolean",
          "title": "Whether a password is required or not to access the link"
        },
        "Permissions": {
          "type": "array",
          "title": "Specific permissions for public links",
          "items": {
            "$ref": "#/definitions/restShareLinkAccessType"
          }
        },
        "Policies": {
          "type": "array",
          "title": "Security policies",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PoliciesContextEditable": {
          "type": "boolean",
          "title": "Whether policies are currently editable or not"
        },
        "RestrictToTargetUsers": {
          "type": "boolean",
          "title": "RestrictToTargetUsers enable users restriction"
        },
        "RootNodes": {
          "type": "array",
          "title": "Nodes in the tree that serve as root to this link",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "TargetUsers": {
          "type": "object",
          "title": "TargetUsers can be used to restrict access",
          "additionalProperties": {
            "$ref": "#/definitions/restShareLinkTargetUser"
          }
        },
        "UserLogin": {
          "type": "string",
          "title": "Temporary user Login used to login automatically when accessing this link"
        },
        "UserUuid": {
          "type": "string",
          "title": "Temporary user Uuid used to login automatically when accessing this link"
        },
        "Uuid": {
          "type": "string",
          "title": "Internal identifier of the link"
        },
        "ViewTemplateName": {
          "type": "string",
          "title": "Display Template for loading the public link"
        }
      }
    },
    "restShareLinkAccessType": {
      "type": "string",
      "title": "Known values for link permissions",
      "default": "NoAccess",
      "enum": [
        "NoAccess",
        "Preview",
        "Download",
        "Upload"
      ]
    },
    "restShareLinkTargetUser": {
      "type": "object",
      "properties": {
        "Display": {
          "type": "string"
        },
        "DownloadCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "restSubscriptionsCollection": {
      "type": "object",
      "properties": {
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/activitySubscription"
          }
        }
      }
    },
    "restTemplate": {
      "type": "object",
      "title": "A template can be used to create files or tree from scratch",
      "properties": {
        "Editable": {
          "type": "boolean",
          "title": "Whether this template can be edited or not"
        },
        "Label": {
          "type": "string",
          "title": "Human friendly label"
        },
        "Node": {
          "title": "Template node, can be a file or a tree of folders",
          "$ref": "#/definitions/restTemplateNode"
        },
        "Policies": {
          "type": "array",
          "title": "Associated policies",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "UUID": {
          "type": "string",
          "title": "Unique identifier for this template"
        }
      }
    },
    "restTemplateNode": {
      "type": "object",
      "title": "A template node is representing a file or a folder",
      "properties": {
        "Children": {
          "type": "object",
          "title": "One or more children",
          "additionalProperties": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "Node": {
          "title": "Whether it's a file or a folder",
          "$ref": "#/definitions/treeNode"
        }
      }
    },
    "restUpdateSharePoliciesRequest": {
      "type": "object",
      "properties": {
        "Policies": {
          "type": "array",
          "title": "List of policies to update",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "Uuid": {
          "type": "string",
          "title": "Cell or Link UUID"
        }
      }
    },
    "restUpdateSharePoliciesResponse": {
      "type": "object",
      "properties": {
        "Policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PoliciesContextEditable": {
          "type": "boolean"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "restUserBookmarksRequest": {
      "type": "object",
      "properties": {
        "All": {
          "type": "boolean"
        }
      }
    },
    "restUserJobResponse": {
      "type": "object",
      "properties": {
        "JobUuid": {
          "type": "string"
        }
      }
    },
    "restUserJobsCollection": {
      "type": "object",
      "properties": {
        "Jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/jobsJob"
          }
        }
      }
    },
    "restUserMetaCollection": {
      "type": "object",
      "title": "Collection of UserMeta",
      "properties": {
        "Metadatas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmUserMeta"
          }
        }
      }
    },
    "restUserMetaNamespaceCollection": {
      "type": "object",
      "title": "Collection of Meta Namespaces",
      "properties": {
        "Namespaces": {
          "type": "array",
          "title": "List of user meta Namespaces",
          "items": {
            "$ref": "#/definitions/idmUserMetaNamespace"
          }
        }
      }
    },
    "restUserStateResponse": {
      "type": "object",
      "properties": {
        "Workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmWorkspace"
          }
        },
        "WorkspacesAccesses": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "restUsersCollection": {
      "type": "object",
      "title": "Users Collection",
      "properties": {
        "Groups": {
          "type": "array",
          "title": "List of Groups",
          "items": {
            "$ref": "#/definitions/idmUser"
          }
        },
        "Total": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of results"
        },
        "Users": {
          "type": "array",
          "title": "List of Users",
          "items": {
            "$ref": "#/definitions/idmUser"
          }
        }
      }
    },
    "restVersioningPolicyCollection": {
      "type": "object",
      "properties": {
        "Policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/treeVersioningPolicy"
          }
        }
      }
    },
    "restWorkspaceCollection": {
      "type": "object",
      "title": "Rest response for workspace search",
      "properties": {
        "Total": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of results"
        },
        "Workspaces": {
          "type": "array",
          "title": "List of workspaces",
          "items": {
            "$ref": "#/definitions/idmWorkspace"
          }
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "serviceOperationType": {
      "type": "string",
      "default": "OR",
      "enum": [
        "OR",
        "AND"
      ]
    },
    "serviceQuery": {
      "type": "object",
      "properties": {
        "Limit": {
          "type": "string",
          "format": "int64"
        },
        "Offset": {
          "type": "string",
          "format": "int64"
        },
        "Operation": {
          "$ref": "#/definitions/serviceOperationType"
        },
        "ResourcePolicyQuery": {
          "$ref": "#/definitions/serviceResourcePolicyQuery"
        },
        "SubQueries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        },
        "groupBy": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "serviceResourcePolicy": {
      "type": "object",
      "properties": {
        "Action": {
          "$ref": "#/definitions/serviceResourcePolicyAction"
        },
        "Effect": {
          "$ref": "#/definitions/serviceResourcePolicyPolicyEffect"
        },
        "JsonConditions": {
          "type": "string"
        },
        "Resource": {
          "type": "string"
        },
        "Subject": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "serviceResourcePolicyAction": {
      "type": "string",
      "default": "ANY",
      "enum": [
        "ANY",
        "OWNER",
        "READ",
        "WRITE",
        "EDIT_RULES"
      ]
    },
    "serviceResourcePolicyPolicyEffect": {
      "type": "string",
      "default": "deny",
      "enum": [
        "deny",
        "allow"
      ]
    },
    "serviceResourcePolicyQuery": {
      "type": "object",
      "properties": {
        "Any": {
          "type": "boolean"
        },
        "Empty": {
          "type": "boolean"
        },
        "Subjects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "treeChangeLog": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "string",
          "format": "byte",
          "title": "Arbitrary additional data"
        },
        "Description": {
          "type": "string",
          "title": "Human-readable description of what happened"
        },
        "Event": {
          "title": "Event that triggered this change",
          "$ref": "#/definitions/treeNodeChangeEvent"
        },
        "Location": {
          "title": "Actual location of the stored version",
          "$ref": "#/definitions/treeNode"
        },
        "MTime": {
          "type": "string",
          "format": "int64",
          "title": "Unix Timestamp"
        },
        "OwnerUuid": {
          "type": "string",
          "title": "Who performed this action"
        },
        "Size": {
          "type": "string",
          "format": "int64",
          "title": "Content Size at that moment"
        },
        "Uuid": {
          "type": "string",
          "title": "Unique commit ID"
        }
      }
    },
    "treeGeoPoint": {
      "type": "object",
      "properties": {
        "Lat": {
          "type": "number",
          "format": "double"
        },
        "Lon": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "treeGeoQuery": {
      "type": "object",
      "properties": {
        "BottomRight": {
          "$ref": "#/definitions/treeGeoPoint"
        },
        "Center": {
          "title": "Either use a center point and a distance",
          "$ref": "#/definitions/treeGeoPoint"
        },
        "Distance": {
          "description": "Example formats supported:\n\"5in\" \"5inch\" \"7yd\" \"7yards\" \"9ft\" \"9feet\" \"11km\" \"11kilometers\"\n\"3nm\" \"3nauticalmiles\" \"13mm\" \"13millimeters\" \"15cm\" \"15centimeters\"\n\"17mi\" \"17miles\" \"19m\" \"19meters\"\nIf the unit cannot be determined, the entire string is parsed and the\nunit of meters is assumed.",
          "type": "string"
        },
        "TopLeft": {
          "title": "Or use a bounding box with TopLeft and BottomRight points",
          "$ref": "#/definitions/treeGeoPoint"
        }
      }
    },
    "treeListNodesRequest": {
      "type": "object",
      "properties": {
        "Ancestors": {
          "type": "boolean",
          "title": "Send back a list of parent nodes, until the root, including the original node"
        },
        "FilterType": {
          "title": "Filter by node type (LEAF / COLLECTION)",
          "$ref": "#/definitions/treeNodeType"
        },
        "Limit": {
          "type": "string",
          "format": "int64",
          "title": "Limit the number of results"
        },
        "Node": {
          "title": "Main node used as a parent",
          "$ref": "#/definitions/treeNode"
        },
        "Offset": {
          "type": "string",
          "format": "int64",
          "title": "Start listing at a given position"
        },
        "Recursive": {
          "type": "boolean",
          "title": "Send back all children of the node"
        },
        "StatFlags": {
          "type": "array",
          "title": "Generic Details Flags",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "WithCommits": {
          "type": "boolean",
          "title": "Sends the list of commits for a given node (Deprecated)"
        },
        "WithVersions": {
          "type": "boolean",
          "title": "Sends the list of versions for a given node"
        }
      }
    },
    "treeNode": {
      "type": "object",
      "properties": {
        "AppearsIn": {
          "type": "array",
          "title": "Can be used for output when node is appearing in multiple workspaces",
          "items": {
            "$ref": "#/definitions/treeWorkspaceRelativePath"
          }
        },
        "Commits": {
          "type": "array",
          "title": "List of successive commits",
          "items": {
            "$ref": "#/definitions/treeChangeLog"
          }
        },
        "Etag": {
          "type": "string",
          "title": "Hash of the content if node is a LEAF, Uuid or"
        },
        "MTime": {
          "type": "string",
          "format": "int64",
          "title": "Last modification Timestamp"
        },
        "MetaStore": {
          "type": "object",
          "title": "------------------------------------\nThen a free K =\u003e V representation of any kind of metadata\n------------------------------------",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Mode": {
          "type": "integer",
          "format": "int32",
          "title": "Permission mode, like 0777"
        },
        "Path": {
          "type": "string"
        },
        "Size": {
          "type": "string",
          "format": "int64",
          "title": "Size of the file, or cumulated size of folder"
        },
        "Type": {
          "$ref": "#/definitions/treeNodeType"
        },
        "Uuid": {
          "type": "string",
          "title": "------------------------------------\nCore identification of the node\n------------------------------------"
        }
      }
    },
    "treeNodeChangeEvent": {
      "type": "object",
      "properties": {
        "Metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Optimistic": {
          "type": "boolean"
        },
        "Silent": {
          "type": "boolean"
        },
        "Source": {
          "$ref": "#/definitions/treeNode"
        },
        "Target": {
          "$ref": "#/definitions/treeNode"
        },
        "Type": {
          "$ref": "#/definitions/treeNodeChangeEventEventType"
        }
      }
    },
    "treeNodeChangeEventEventType": {
      "type": "string",
      "default": "CREATE",
      "enum": [
        "CREATE",
        "READ",
        "UPDATE_PATH",
        "UPDATE_CONTENT",
        "UPDATE_META",
        "UPDATE_USER_META",
        "DELETE"
      ]
    },
    "treeNodeType": {
      "type": "string",
      "title": "==========================================================\n* Standard Messages\n==========================================================",
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "LEAF",
        "COLLECTION"
      ]
    },
    "treeQuery": {
      "type": "object",
      "title": "Search Queries",
      "properties": {
        "Content": {
          "type": "string",
          "title": "Search in content"
        },
        "DurationDate": {
          "type": "string",
          "title": "Pass a duration with \u003e or \u003c to compute MinDate / MaxDate"
        },
        "ETag": {
          "type": "string",
          "title": "Look for a specific eTag value"
        },
        "Extension": {
          "type": "string",
          "title": "Search files by extension"
        },
        "FileName": {
          "type": "string",
          "title": "Search in filename"
        },
        "FileNameOrContent": {
          "type": "string",
          "title": "Search in either filename or content (but at least one of them)"
        },
        "FreeString": {
          "type": "string",
          "title": "Free Query String (for metadata)"
        },
        "GeoQuery": {
          "title": "Search geographically",
          "$ref": "#/definitions/treeGeoQuery"
        },
        "MaxDate": {
          "type": "string",
          "format": "int64"
        },
        "MaxSize": {
          "type": "string",
          "format": "int64"
        },
        "MinDate": {
          "type": "string",
          "format": "int64",
          "title": "Range for date"
        },
        "MinSize": {
          "type": "string",
          "format": "int64",
          "title": "Range for size"
        },
        "Not": {
          "type": "boolean",
          "title": "Negate this query"
        },
        "PathDepth": {
          "type": "integer",
          "format": "int32",
          "title": "Limit to a given level of the tree - can be used in filters"
        },
        "PathPrefix": {
          "type": "array",
          "title": "Limit to a given subtree",
          "items": {
            "type": "string"
          }
        },
        "Paths": {
          "type": "array",
          "title": "Preset list of nodes by Path",
          "items": {
            "type": "string"
          }
        },
        "Type": {
          "title": "Limit to a given node type",
          "$ref": "#/definitions/treeNodeType"
        },
        "UUIDs": {
          "type": "array",
          "title": "Preset list of Node by UUIDs",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "treeReadNodeRequest": {
      "type": "object",
      "title": "Request / Responses Messages",
      "properties": {
        "Node": {
          "title": "Input node",
          "$ref": "#/definitions/treeNode"
        },
        "ObjectStats": {
          "type": "boolean",
          "title": "Used internally for the router ReadNode request, stat the datasource instead of index"
        },
        "StatFlags": {
          "type": "array",
          "title": "Generic Details Flags",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "WithCommits": {
          "type": "boolean",
          "title": "Gather commit information - This is Deprecated"
        },
        "WithExtendedStats": {
          "type": "boolean",
          "title": "Get extended stats - For folders, computes ChildrenCount - Depreacted, use StatFlags instead"
        }
      }
    },
    "treeReadNodeResponse": {
      "type": "object",
      "properties": {
        "Node": {
          "$ref": "#/definitions/treeNode"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "treeSearchFacet": {
      "type": "object",
      "properties": {
        "Count": {
          "type": "integer",
          "format": "int32",
          "title": "Segment results count"
        },
        "End": {
          "type": "integer",
          "format": "int32"
        },
        "FieldName": {
          "type": "string",
          "title": "Facet field name"
        },
        "Label": {
          "type": "string",
          "title": "Segment Label"
        },
        "Max": {
          "type": "string",
          "format": "int64"
        },
        "Min": {
          "type": "string",
          "format": "int64",
          "title": "For NumericRange facets, min/max values"
        },
        "Start": {
          "type": "integer",
          "format": "int32",
          "title": "For DateRange facets, start/end values"
        },
        "Term": {
          "type": "string",
          "title": "For string facets, term value"
        }
      }
    },
    "treeSearchRequest": {
      "type": "object",
      "properties": {
        "Details": {
          "type": "boolean",
          "title": "Load node details"
        },
        "From": {
          "type": "integer",
          "format": "int32",
          "title": "Start at given position"
        },
        "Query": {
          "title": "The query object",
          "$ref": "#/definitions/treeQuery"
        },
        "Size": {
          "type": "integer",
          "format": "int32",
          "title": "Limit the number of results"
        },
        "StatFlags": {
          "type": "array",
          "title": "Generic Details Flags",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "treeVersioningKeepPeriod": {
      "type": "object",
      "properties": {
        "IntervalStart": {
          "type": "string"
        },
        "MaxNumber": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "treeVersioningNodeDeletedStrategy": {
      "type": "string",
      "default": "KeepAll",
      "enum": [
        "KeepAll",
        "KeepLast",
        "KeepNone"
      ]
    },
    "treeVersioningPolicy": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "IgnoreFilesGreaterThan": {
          "type": "string",
          "format": "int64"
        },
        "KeepPeriods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/treeVersioningKeepPeriod"
          }
        },
        "MaxSizePerFile": {
          "type": "string",
          "format": "int64"
        },
        "MaxTotalSize": {
          "type": "string",
          "format": "int64"
        },
        "Name": {
          "type": "string"
        },
        "NodeDeletedStrategy": {
          "$ref": "#/definitions/treeVersioningNodeDeletedStrategy"
        },
        "Uuid": {
          "type": "string"
        },
        "VersionsDataSourceBucket": {
          "type": "string"
        },
        "VersionsDataSourceName": {
          "type": "string"
        }
      }
    },
    "treeWorkspaceRelativePath": {
      "type": "object",
      "title": "Used in AppearsIn to signal a node is\nappearing in multiple workspaces in the current context",
      "properties": {
        "Path": {
          "type": "string",
          "title": "Relative Path inside workspace"
        },
        "WsLabel": {
          "type": "string",
          "title": "Workspace Label"
        },
        "WsScope": {
          "type": "string",
          "title": "Workspace Scope"
        },
        "WsSlug": {
          "type": "string",
          "title": "Workspace slug"
        },
        "WsUuid": {
          "type": "string",
          "title": "Workspace Id"
        }
      }
    },
    "updateApplyUpdateResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "updatePackage": {
      "type": "object",
      "properties": {
        "BinaryArch": {
          "type": "string",
          "title": "GOARCH value used at build time"
        },
        "BinaryChecksum": {
          "type": "string",
          "title": "Checksum of the binary to verify its integrity"
        },
        "BinaryHashType": {
          "type": "string",
          "title": "Hash type used for the signature"
        },
        "BinaryOS": {
          "type": "string",
          "title": "GOOS value used at build time"
        },
        "BinarySignature": {
          "type": "string",
          "title": "Signature of the binary"
        },
        "BinarySize": {
          "type": "string",
          "format": "int64",
          "title": "Size of the binary to download"
        },
        "BinaryURL": {
          "type": "string",
          "title": "Https URL where to download the binary"
        },
        "ChangeLog": {
          "type": "string",
          "title": "List or public URL of change logs"
        },
        "Description": {
          "type": "string",
          "title": "Long human-readable description (markdown)"
        },
        "IsPatch": {
          "type": "boolean",
          "title": "Not used : if binary is a patch"
        },
        "Label": {
          "type": "string",
          "title": "Short human-readable description"
        },
        "License": {
          "type": "string",
          "title": "License of this package"
        },
        "PackageName": {
          "type": "string",
          "title": "Name of the application"
        },
        "PatchAlgorithm": {
          "type": "string",
          "title": "Not used : if a patch, how to patch (bsdiff support)"
        },
        "ReleaseDate": {
          "type": "integer",
          "format": "int32",
          "title": "Release date of the binary"
        },
        "ServiceName": {
          "type": "string",
          "title": "Not used : at a point we may deliver services only updates"
        },
        "Status": {
          "$ref": "#/definitions/PackagePackageStatus"
        },
        "Version": {
          "type": "string",
          "title": "Version of this new binary"
        }
      }
    },
    "updateUpdateRequest": {
      "type": "object",
      "properties": {
        "Channel": {
          "type": "string",
          "title": "Channel name"
        },
        "CurrentVersion": {
          "type": "string",
          "title": "Current version of the application"
        },
        "GOARCH": {
          "type": "string",
          "title": "Current GOARCH"
        },
        "GOOS": {
          "type": "string",
          "title": "Current GOOS"
        },
        "LicenseInfo": {
          "type": "object",
          "title": "For enterprise version, info about the current license",
          "additionalProperties": {
            "type": "string"
          }
        },
        "PackageName": {
          "type": "string",
          "title": "Name of the currently running application"
        },
        "ServiceName": {
          "type": "string",
          "title": "Not Used : specific service to get updates for"
        }
      }
    },
    "updateUpdateResponse": {
      "type": "object",
      "properties": {
        "AvailableBinaries": {
          "type": "array",
          "title": "List of available binaries",
          "items": {
            "$ref": "#/definitions/updatePackage"
          }
        },
        "Channel": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "name": "ConfigService"
    },
    {
      "name": "RoleService"
    },
    {
      "name": "UserService"
    },
    {
      "name": "ACLService"
    },
    {
      "name": "PolicyService"
    },
    {
      "name": "WorkspaceService"
    },
    {
      "name": "ActivityService"
    },
    {
      "name": "LogService"
    },
    {
      "name": "TokenService"
    },
    {
      "name": "MailerService"
    },
    {
      "name": "SearchService"
    },
    {
      "name": "TreeService"
    },
    {
      "name": "TemplatesService"
    },
    {
      "name": "MetaService"
    },
    {
      "name": "UserMetaService"
    },
    {
      "name": "JobsService"
    },
    {
      "name": "AdminTreeService"
    },
    {
      "name": "GraphService"
    },
    {
      "name": "ShareService"
    },
    {
      "name": "InstallService"
    },
    {
      "name": "UpdateService"
    },
    {
      "name": "FrontendService"
    }
  ],
  "externalDocs": {
    "description": "More about Pydio Cells Apis",
    "url": "https://pydio.com"
  }
}