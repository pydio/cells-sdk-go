// Code generated by go-swagger; DO NOT EDIT.

package user_meta_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// PutUserMetaTagReader is a Reader for the PutUserMetaTag structure.
type PutUserMetaTagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUserMetaTagReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutUserMetaTagOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutUserMetaTagUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutUserMetaTagForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutUserMetaTagNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutUserMetaTagInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /user-meta/tags/{Namespace}] PutUserMetaTag", response, response.Code())
	}
}

// NewPutUserMetaTagOK creates a PutUserMetaTagOK with default headers values
func NewPutUserMetaTagOK() *PutUserMetaTagOK {
	return &PutUserMetaTagOK{}
}

/*
PutUserMetaTagOK describes a response with status code 200, with default header values.

A successful response.
*/
type PutUserMetaTagOK struct {
	Payload *models.RestPutUserMetaTagResponse
}

// IsSuccess returns true when this put user meta tag o k response has a 2xx status code
func (o *PutUserMetaTagOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put user meta tag o k response has a 3xx status code
func (o *PutUserMetaTagOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user meta tag o k response has a 4xx status code
func (o *PutUserMetaTagOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put user meta tag o k response has a 5xx status code
func (o *PutUserMetaTagOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put user meta tag o k response a status code equal to that given
func (o *PutUserMetaTagOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put user meta tag o k response
func (o *PutUserMetaTagOK) Code() int {
	return 200
}

func (o *PutUserMetaTagOK) Error() string {
	return fmt.Sprintf("[POST /user-meta/tags/{Namespace}][%d] putUserMetaTagOK  %+v", 200, o.Payload)
}

func (o *PutUserMetaTagOK) String() string {
	return fmt.Sprintf("[POST /user-meta/tags/{Namespace}][%d] putUserMetaTagOK  %+v", 200, o.Payload)
}

func (o *PutUserMetaTagOK) GetPayload() *models.RestPutUserMetaTagResponse {
	return o.Payload
}

func (o *PutUserMetaTagOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestPutUserMetaTagResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserMetaTagUnauthorized creates a PutUserMetaTagUnauthorized with default headers values
func NewPutUserMetaTagUnauthorized() *PutUserMetaTagUnauthorized {
	return &PutUserMetaTagUnauthorized{}
}

/*
PutUserMetaTagUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type PutUserMetaTagUnauthorized struct {
}

// IsSuccess returns true when this put user meta tag unauthorized response has a 2xx status code
func (o *PutUserMetaTagUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user meta tag unauthorized response has a 3xx status code
func (o *PutUserMetaTagUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user meta tag unauthorized response has a 4xx status code
func (o *PutUserMetaTagUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user meta tag unauthorized response has a 5xx status code
func (o *PutUserMetaTagUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put user meta tag unauthorized response a status code equal to that given
func (o *PutUserMetaTagUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put user meta tag unauthorized response
func (o *PutUserMetaTagUnauthorized) Code() int {
	return 401
}

func (o *PutUserMetaTagUnauthorized) Error() string {
	return fmt.Sprintf("[POST /user-meta/tags/{Namespace}][%d] putUserMetaTagUnauthorized ", 401)
}

func (o *PutUserMetaTagUnauthorized) String() string {
	return fmt.Sprintf("[POST /user-meta/tags/{Namespace}][%d] putUserMetaTagUnauthorized ", 401)
}

func (o *PutUserMetaTagUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUserMetaTagForbidden creates a PutUserMetaTagForbidden with default headers values
func NewPutUserMetaTagForbidden() *PutUserMetaTagForbidden {
	return &PutUserMetaTagForbidden{}
}

/*
PutUserMetaTagForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type PutUserMetaTagForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put user meta tag forbidden response has a 2xx status code
func (o *PutUserMetaTagForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user meta tag forbidden response has a 3xx status code
func (o *PutUserMetaTagForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user meta tag forbidden response has a 4xx status code
func (o *PutUserMetaTagForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user meta tag forbidden response has a 5xx status code
func (o *PutUserMetaTagForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put user meta tag forbidden response a status code equal to that given
func (o *PutUserMetaTagForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put user meta tag forbidden response
func (o *PutUserMetaTagForbidden) Code() int {
	return 403
}

func (o *PutUserMetaTagForbidden) Error() string {
	return fmt.Sprintf("[POST /user-meta/tags/{Namespace}][%d] putUserMetaTagForbidden  %+v", 403, o.Payload)
}

func (o *PutUserMetaTagForbidden) String() string {
	return fmt.Sprintf("[POST /user-meta/tags/{Namespace}][%d] putUserMetaTagForbidden  %+v", 403, o.Payload)
}

func (o *PutUserMetaTagForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutUserMetaTagForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserMetaTagNotFound creates a PutUserMetaTagNotFound with default headers values
func NewPutUserMetaTagNotFound() *PutUserMetaTagNotFound {
	return &PutUserMetaTagNotFound{}
}

/*
PutUserMetaTagNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type PutUserMetaTagNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put user meta tag not found response has a 2xx status code
func (o *PutUserMetaTagNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user meta tag not found response has a 3xx status code
func (o *PutUserMetaTagNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user meta tag not found response has a 4xx status code
func (o *PutUserMetaTagNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user meta tag not found response has a 5xx status code
func (o *PutUserMetaTagNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put user meta tag not found response a status code equal to that given
func (o *PutUserMetaTagNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put user meta tag not found response
func (o *PutUserMetaTagNotFound) Code() int {
	return 404
}

func (o *PutUserMetaTagNotFound) Error() string {
	return fmt.Sprintf("[POST /user-meta/tags/{Namespace}][%d] putUserMetaTagNotFound  %+v", 404, o.Payload)
}

func (o *PutUserMetaTagNotFound) String() string {
	return fmt.Sprintf("[POST /user-meta/tags/{Namespace}][%d] putUserMetaTagNotFound  %+v", 404, o.Payload)
}

func (o *PutUserMetaTagNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutUserMetaTagNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserMetaTagInternalServerError creates a PutUserMetaTagInternalServerError with default headers values
func NewPutUserMetaTagInternalServerError() *PutUserMetaTagInternalServerError {
	return &PutUserMetaTagInternalServerError{}
}

/*
PutUserMetaTagInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type PutUserMetaTagInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put user meta tag internal server error response has a 2xx status code
func (o *PutUserMetaTagInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user meta tag internal server error response has a 3xx status code
func (o *PutUserMetaTagInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user meta tag internal server error response has a 4xx status code
func (o *PutUserMetaTagInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put user meta tag internal server error response has a 5xx status code
func (o *PutUserMetaTagInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put user meta tag internal server error response a status code equal to that given
func (o *PutUserMetaTagInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the put user meta tag internal server error response
func (o *PutUserMetaTagInternalServerError) Code() int {
	return 500
}

func (o *PutUserMetaTagInternalServerError) Error() string {
	return fmt.Sprintf("[POST /user-meta/tags/{Namespace}][%d] putUserMetaTagInternalServerError  %+v", 500, o.Payload)
}

func (o *PutUserMetaTagInternalServerError) String() string {
	return fmt.Sprintf("[POST /user-meta/tags/{Namespace}][%d] putUserMetaTagInternalServerError  %+v", 500, o.Payload)
}

func (o *PutUserMetaTagInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutUserMetaTagInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutUserMetaTagBody RestPutUserMetaTagRequest
swagger:model PutUserMetaTagBody
*/
type PutUserMetaTagBody struct {

	// New tag value
	Tag string `json:"Tag,omitempty"`
}

// Validate validates this put user meta tag body
func (o *PutUserMetaTagBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put user meta tag body based on context it is used
func (o *PutUserMetaTagBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUserMetaTagBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserMetaTagBody) UnmarshalBinary(b []byte) error {
	var res PutUserMetaTagBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
