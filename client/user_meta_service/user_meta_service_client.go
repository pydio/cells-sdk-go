// Code generated by go-swagger; DO NOT EDIT.

package user_meta_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user meta service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user meta service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteUserMetaTags(params *DeleteUserMetaTagsParams, opts ...ClientOption) (*DeleteUserMetaTagsOK, error)

	ListUserMetaNamespace(params *ListUserMetaNamespaceParams, opts ...ClientOption) (*ListUserMetaNamespaceOK, error)

	ListUserMetaTags(params *ListUserMetaTagsParams, opts ...ClientOption) (*ListUserMetaTagsOK, error)

	PutUserMetaTag(params *PutUserMetaTagParams, opts ...ClientOption) (*PutUserMetaTagOK, error)

	SearchUserMeta(params *SearchUserMetaParams, opts ...ClientOption) (*SearchUserMetaOK, error)

	UpdateUserMeta(params *UpdateUserMetaParams, opts ...ClientOption) (*UpdateUserMetaOK, error)

	UpdateUserMetaNamespace(params *UpdateUserMetaNamespaceParams, opts ...ClientOption) (*UpdateUserMetaNamespaceOK, error)

	UserBookmarks(params *UserBookmarksParams, opts ...ClientOption) (*UserBookmarksOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteUserMetaTags deletes one or all tags for a given namespace use for all tags
*/
func (a *Client) DeleteUserMetaTags(params *DeleteUserMetaTagsParams, opts ...ClientOption) (*DeleteUserMetaTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserMetaTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUserMetaTags",
		Method:             "DELETE",
		PathPattern:        "/user-meta/tags/{Namespace}/{Tags}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteUserMetaTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserMetaTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUserMetaTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListUserMetaNamespace lists defined meta namespaces
*/
func (a *Client) ListUserMetaNamespace(params *ListUserMetaNamespaceParams, opts ...ClientOption) (*ListUserMetaNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserMetaNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListUserMetaNamespace",
		Method:             "GET",
		PathPattern:        "/user-meta/namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListUserMetaNamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserMetaNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListUserMetaNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListUserMetaTags lists tags for a given namespace
*/
func (a *Client) ListUserMetaTags(params *ListUserMetaTagsParams, opts ...ClientOption) (*ListUserMetaTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserMetaTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListUserMetaTags",
		Method:             "GET",
		PathPattern:        "/user-meta/tags/{Namespace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListUserMetaTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserMetaTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListUserMetaTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutUserMetaTag adds a new value to tags for a given namespace
*/
func (a *Client) PutUserMetaTag(params *PutUserMetaTagParams, opts ...ClientOption) (*PutUserMetaTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserMetaTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutUserMetaTag",
		Method:             "POST",
		PathPattern:        "/user-meta/tags/{Namespace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutUserMetaTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserMetaTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutUserMetaTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchUserMeta searches a list of meta by node Id or by user id and by namespace
*/
func (a *Client) SearchUserMeta(params *SearchUserMetaParams, opts ...ClientOption) (*SearchUserMetaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUserMetaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchUserMeta",
		Method:             "POST",
		PathPattern:        "/user-meta/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &SearchUserMetaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchUserMetaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchUserMeta: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserMeta updates delete user meta
*/
func (a *Client) UpdateUserMeta(params *UpdateUserMetaParams, opts ...ClientOption) (*UpdateUserMetaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserMetaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateUserMeta",
		Method:             "PUT",
		PathPattern:        "/user-meta/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &UpdateUserMetaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserMetaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateUserMeta: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserMetaNamespace admins update namespaces
*/
func (a *Client) UpdateUserMetaNamespace(params *UpdateUserMetaNamespaceParams, opts ...ClientOption) (*UpdateUserMetaNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserMetaNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateUserMetaNamespace",
		Method:             "PUT",
		PathPattern:        "/user-meta/namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &UpdateUserMetaNamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserMetaNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateUserMetaNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserBookmarks specials API for bookmarks will load user meta and the associated nodes and return as a node list
*/
func (a *Client) UserBookmarks(params *UserBookmarksParams, opts ...ClientOption) (*UserBookmarksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserBookmarksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserBookmarks",
		Method:             "POST",
		PathPattern:        "/user-meta/bookmarks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &UserBookmarksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserBookmarksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserBookmarks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
