// Code generated by go-swagger; DO NOT EDIT.

package user_meta_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// UserBookmarksReader is a Reader for the UserBookmarks structure.
type UserBookmarksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserBookmarksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserBookmarksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUserBookmarksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserBookmarksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserBookmarksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserBookmarksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /user-meta/bookmarks] UserBookmarks", response, response.Code())
	}
}

// NewUserBookmarksOK creates a UserBookmarksOK with default headers values
func NewUserBookmarksOK() *UserBookmarksOK {
	return &UserBookmarksOK{}
}

/*
UserBookmarksOK describes a response with status code 200, with default header values.

A successful response.
*/
type UserBookmarksOK struct {
	Payload *models.RestBulkMetaResponse
}

// IsSuccess returns true when this user bookmarks o k response has a 2xx status code
func (o *UserBookmarksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user bookmarks o k response has a 3xx status code
func (o *UserBookmarksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user bookmarks o k response has a 4xx status code
func (o *UserBookmarksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user bookmarks o k response has a 5xx status code
func (o *UserBookmarksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user bookmarks o k response a status code equal to that given
func (o *UserBookmarksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the user bookmarks o k response
func (o *UserBookmarksOK) Code() int {
	return 200
}

func (o *UserBookmarksOK) Error() string {
	return fmt.Sprintf("[POST /user-meta/bookmarks][%d] userBookmarksOK  %+v", 200, o.Payload)
}

func (o *UserBookmarksOK) String() string {
	return fmt.Sprintf("[POST /user-meta/bookmarks][%d] userBookmarksOK  %+v", 200, o.Payload)
}

func (o *UserBookmarksOK) GetPayload() *models.RestBulkMetaResponse {
	return o.Payload
}

func (o *UserBookmarksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestBulkMetaResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserBookmarksUnauthorized creates a UserBookmarksUnauthorized with default headers values
func NewUserBookmarksUnauthorized() *UserBookmarksUnauthorized {
	return &UserBookmarksUnauthorized{}
}

/*
UserBookmarksUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type UserBookmarksUnauthorized struct {
	Payload *models.RestError
}

// IsSuccess returns true when this user bookmarks unauthorized response has a 2xx status code
func (o *UserBookmarksUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user bookmarks unauthorized response has a 3xx status code
func (o *UserBookmarksUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user bookmarks unauthorized response has a 4xx status code
func (o *UserBookmarksUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user bookmarks unauthorized response has a 5xx status code
func (o *UserBookmarksUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user bookmarks unauthorized response a status code equal to that given
func (o *UserBookmarksUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the user bookmarks unauthorized response
func (o *UserBookmarksUnauthorized) Code() int {
	return 401
}

func (o *UserBookmarksUnauthorized) Error() string {
	return fmt.Sprintf("[POST /user-meta/bookmarks][%d] userBookmarksUnauthorized  %+v", 401, o.Payload)
}

func (o *UserBookmarksUnauthorized) String() string {
	return fmt.Sprintf("[POST /user-meta/bookmarks][%d] userBookmarksUnauthorized  %+v", 401, o.Payload)
}

func (o *UserBookmarksUnauthorized) GetPayload() *models.RestError {
	return o.Payload
}

func (o *UserBookmarksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserBookmarksForbidden creates a UserBookmarksForbidden with default headers values
func NewUserBookmarksForbidden() *UserBookmarksForbidden {
	return &UserBookmarksForbidden{}
}

/*
UserBookmarksForbidden describes a response with status code 403, with default header values.

User has no permission to access this particular resource
*/
type UserBookmarksForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this user bookmarks forbidden response has a 2xx status code
func (o *UserBookmarksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user bookmarks forbidden response has a 3xx status code
func (o *UserBookmarksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user bookmarks forbidden response has a 4xx status code
func (o *UserBookmarksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user bookmarks forbidden response has a 5xx status code
func (o *UserBookmarksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user bookmarks forbidden response a status code equal to that given
func (o *UserBookmarksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the user bookmarks forbidden response
func (o *UserBookmarksForbidden) Code() int {
	return 403
}

func (o *UserBookmarksForbidden) Error() string {
	return fmt.Sprintf("[POST /user-meta/bookmarks][%d] userBookmarksForbidden  %+v", 403, o.Payload)
}

func (o *UserBookmarksForbidden) String() string {
	return fmt.Sprintf("[POST /user-meta/bookmarks][%d] userBookmarksForbidden  %+v", 403, o.Payload)
}

func (o *UserBookmarksForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *UserBookmarksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserBookmarksNotFound creates a UserBookmarksNotFound with default headers values
func NewUserBookmarksNotFound() *UserBookmarksNotFound {
	return &UserBookmarksNotFound{}
}

/*
UserBookmarksNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type UserBookmarksNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this user bookmarks not found response has a 2xx status code
func (o *UserBookmarksNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user bookmarks not found response has a 3xx status code
func (o *UserBookmarksNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user bookmarks not found response has a 4xx status code
func (o *UserBookmarksNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user bookmarks not found response has a 5xx status code
func (o *UserBookmarksNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user bookmarks not found response a status code equal to that given
func (o *UserBookmarksNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the user bookmarks not found response
func (o *UserBookmarksNotFound) Code() int {
	return 404
}

func (o *UserBookmarksNotFound) Error() string {
	return fmt.Sprintf("[POST /user-meta/bookmarks][%d] userBookmarksNotFound  %+v", 404, o.Payload)
}

func (o *UserBookmarksNotFound) String() string {
	return fmt.Sprintf("[POST /user-meta/bookmarks][%d] userBookmarksNotFound  %+v", 404, o.Payload)
}

func (o *UserBookmarksNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *UserBookmarksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserBookmarksInternalServerError creates a UserBookmarksInternalServerError with default headers values
func NewUserBookmarksInternalServerError() *UserBookmarksInternalServerError {
	return &UserBookmarksInternalServerError{}
}

/*
UserBookmarksInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type UserBookmarksInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this user bookmarks internal server error response has a 2xx status code
func (o *UserBookmarksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user bookmarks internal server error response has a 3xx status code
func (o *UserBookmarksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user bookmarks internal server error response has a 4xx status code
func (o *UserBookmarksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user bookmarks internal server error response has a 5xx status code
func (o *UserBookmarksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user bookmarks internal server error response a status code equal to that given
func (o *UserBookmarksInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the user bookmarks internal server error response
func (o *UserBookmarksInternalServerError) Code() int {
	return 500
}

func (o *UserBookmarksInternalServerError) Error() string {
	return fmt.Sprintf("[POST /user-meta/bookmarks][%d] userBookmarksInternalServerError  %+v", 500, o.Payload)
}

func (o *UserBookmarksInternalServerError) String() string {
	return fmt.Sprintf("[POST /user-meta/bookmarks][%d] userBookmarksInternalServerError  %+v", 500, o.Payload)
}

func (o *UserBookmarksInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *UserBookmarksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
