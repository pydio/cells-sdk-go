// Code generated by go-swagger; DO NOT EDIT.

package graph_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v4/models"
)

// RelationReader is a Reader for the Relation structure.
type RelationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RelationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRelationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRelationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRelationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRelationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRelationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRelationOK creates a RelationOK with default headers values
func NewRelationOK() *RelationOK {
	return &RelationOK{}
}

/*
RelationOK describes a response with status code 200, with default header values.

A successful response.
*/
type RelationOK struct {
	Payload *models.RestRelationResponse
}

// IsSuccess returns true when this relation o k response has a 2xx status code
func (o *RelationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this relation o k response has a 3xx status code
func (o *RelationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this relation o k response has a 4xx status code
func (o *RelationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this relation o k response has a 5xx status code
func (o *RelationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this relation o k response a status code equal to that given
func (o *RelationOK) IsCode(code int) bool {
	return code == 200
}

func (o *RelationOK) Error() string {
	return fmt.Sprintf("[GET /graph/relation/{UserId}][%d] relationOK  %+v", 200, o.Payload)
}

func (o *RelationOK) String() string {
	return fmt.Sprintf("[GET /graph/relation/{UserId}][%d] relationOK  %+v", 200, o.Payload)
}

func (o *RelationOK) GetPayload() *models.RestRelationResponse {
	return o.Payload
}

func (o *RelationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestRelationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRelationUnauthorized creates a RelationUnauthorized with default headers values
func NewRelationUnauthorized() *RelationUnauthorized {
	return &RelationUnauthorized{}
}

/*
RelationUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type RelationUnauthorized struct {
}

// IsSuccess returns true when this relation unauthorized response has a 2xx status code
func (o *RelationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this relation unauthorized response has a 3xx status code
func (o *RelationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this relation unauthorized response has a 4xx status code
func (o *RelationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this relation unauthorized response has a 5xx status code
func (o *RelationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this relation unauthorized response a status code equal to that given
func (o *RelationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RelationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /graph/relation/{UserId}][%d] relationUnauthorized ", 401)
}

func (o *RelationUnauthorized) String() string {
	return fmt.Sprintf("[GET /graph/relation/{UserId}][%d] relationUnauthorized ", 401)
}

func (o *RelationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRelationForbidden creates a RelationForbidden with default headers values
func NewRelationForbidden() *RelationForbidden {
	return &RelationForbidden{}
}

/*
RelationForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type RelationForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this relation forbidden response has a 2xx status code
func (o *RelationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this relation forbidden response has a 3xx status code
func (o *RelationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this relation forbidden response has a 4xx status code
func (o *RelationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this relation forbidden response has a 5xx status code
func (o *RelationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this relation forbidden response a status code equal to that given
func (o *RelationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RelationForbidden) Error() string {
	return fmt.Sprintf("[GET /graph/relation/{UserId}][%d] relationForbidden  %+v", 403, o.Payload)
}

func (o *RelationForbidden) String() string {
	return fmt.Sprintf("[GET /graph/relation/{UserId}][%d] relationForbidden  %+v", 403, o.Payload)
}

func (o *RelationForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *RelationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRelationNotFound creates a RelationNotFound with default headers values
func NewRelationNotFound() *RelationNotFound {
	return &RelationNotFound{}
}

/*
RelationNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type RelationNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this relation not found response has a 2xx status code
func (o *RelationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this relation not found response has a 3xx status code
func (o *RelationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this relation not found response has a 4xx status code
func (o *RelationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this relation not found response has a 5xx status code
func (o *RelationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this relation not found response a status code equal to that given
func (o *RelationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RelationNotFound) Error() string {
	return fmt.Sprintf("[GET /graph/relation/{UserId}][%d] relationNotFound  %+v", 404, o.Payload)
}

func (o *RelationNotFound) String() string {
	return fmt.Sprintf("[GET /graph/relation/{UserId}][%d] relationNotFound  %+v", 404, o.Payload)
}

func (o *RelationNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *RelationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRelationInternalServerError creates a RelationInternalServerError with default headers values
func NewRelationInternalServerError() *RelationInternalServerError {
	return &RelationInternalServerError{}
}

/*
RelationInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type RelationInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this relation internal server error response has a 2xx status code
func (o *RelationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this relation internal server error response has a 3xx status code
func (o *RelationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this relation internal server error response has a 4xx status code
func (o *RelationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this relation internal server error response has a 5xx status code
func (o *RelationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this relation internal server error response a status code equal to that given
func (o *RelationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RelationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /graph/relation/{UserId}][%d] relationInternalServerError  %+v", 500, o.Payload)
}

func (o *RelationInternalServerError) String() string {
	return fmt.Sprintf("[GET /graph/relation/{UserId}][%d] relationInternalServerError  %+v", 500, o.Payload)
}

func (o *RelationInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *RelationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
