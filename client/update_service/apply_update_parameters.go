// Code generated by go-swagger; DO NOT EDIT.

package update_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/pydio/cells-sdk-go/models"
)

// NewApplyUpdateParams creates a new ApplyUpdateParams object
// with the default values initialized.
func NewApplyUpdateParams() *ApplyUpdateParams {
	var ()
	return &ApplyUpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewApplyUpdateParamsWithTimeout creates a new ApplyUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewApplyUpdateParamsWithTimeout(timeout time.Duration) *ApplyUpdateParams {
	var ()
	return &ApplyUpdateParams{

		timeout: timeout,
	}
}

// NewApplyUpdateParamsWithContext creates a new ApplyUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewApplyUpdateParamsWithContext(ctx context.Context) *ApplyUpdateParams {
	var ()
	return &ApplyUpdateParams{

		Context: ctx,
	}
}

// NewApplyUpdateParamsWithHTTPClient creates a new ApplyUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewApplyUpdateParamsWithHTTPClient(client *http.Client) *ApplyUpdateParams {
	var ()
	return &ApplyUpdateParams{
		HTTPClient: client,
	}
}

/*ApplyUpdateParams contains all the parameters to send to the API endpoint
for the apply update operation typically these are written to a http.Request
*/
type ApplyUpdateParams struct {

	/*TargetVersion*/
	TargetVersion string
	/*Body*/
	Body *models.UpdateApplyUpdateRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the apply update params
func (o *ApplyUpdateParams) WithTimeout(timeout time.Duration) *ApplyUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the apply update params
func (o *ApplyUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the apply update params
func (o *ApplyUpdateParams) WithContext(ctx context.Context) *ApplyUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the apply update params
func (o *ApplyUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the apply update params
func (o *ApplyUpdateParams) WithHTTPClient(client *http.Client) *ApplyUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the apply update params
func (o *ApplyUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTargetVersion adds the targetVersion to the apply update params
func (o *ApplyUpdateParams) WithTargetVersion(targetVersion string) *ApplyUpdateParams {
	o.SetTargetVersion(targetVersion)
	return o
}

// SetTargetVersion adds the targetVersion to the apply update params
func (o *ApplyUpdateParams) SetTargetVersion(targetVersion string) {
	o.TargetVersion = targetVersion
}

// WithBody adds the body to the apply update params
func (o *ApplyUpdateParams) WithBody(body *models.UpdateApplyUpdateRequest) *ApplyUpdateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the apply update params
func (o *ApplyUpdateParams) SetBody(body *models.UpdateApplyUpdateRequest) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *ApplyUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param TargetVersion
	if err := r.SetPathParam("TargetVersion", o.TargetVersion); err != nil {
		return err
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
