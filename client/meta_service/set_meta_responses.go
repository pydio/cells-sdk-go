// Code generated by go-swagger; DO NOT EDIT.

package meta_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// SetMetaReader is a Reader for the SetMeta structure.
type SetMetaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetMetaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetMetaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSetMetaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetMetaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetMetaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetMetaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /meta/set/{NodePath}] SetMeta", response, response.Code())
	}
}

// NewSetMetaOK creates a SetMetaOK with default headers values
func NewSetMetaOK() *SetMetaOK {
	return &SetMetaOK{}
}

/*
SetMetaOK describes a response with status code 200, with default header values.

A successful response.
*/
type SetMetaOK struct {
	Payload *models.TreeNode
}

// IsSuccess returns true when this set meta o k response has a 2xx status code
func (o *SetMetaOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set meta o k response has a 3xx status code
func (o *SetMetaOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set meta o k response has a 4xx status code
func (o *SetMetaOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set meta o k response has a 5xx status code
func (o *SetMetaOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set meta o k response a status code equal to that given
func (o *SetMetaOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the set meta o k response
func (o *SetMetaOK) Code() int {
	return 200
}

func (o *SetMetaOK) Error() string {
	return fmt.Sprintf("[POST /meta/set/{NodePath}][%d] setMetaOK  %+v", 200, o.Payload)
}

func (o *SetMetaOK) String() string {
	return fmt.Sprintf("[POST /meta/set/{NodePath}][%d] setMetaOK  %+v", 200, o.Payload)
}

func (o *SetMetaOK) GetPayload() *models.TreeNode {
	return o.Payload
}

func (o *SetMetaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TreeNode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetMetaUnauthorized creates a SetMetaUnauthorized with default headers values
func NewSetMetaUnauthorized() *SetMetaUnauthorized {
	return &SetMetaUnauthorized{}
}

/*
SetMetaUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type SetMetaUnauthorized struct {
}

// IsSuccess returns true when this set meta unauthorized response has a 2xx status code
func (o *SetMetaUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set meta unauthorized response has a 3xx status code
func (o *SetMetaUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set meta unauthorized response has a 4xx status code
func (o *SetMetaUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this set meta unauthorized response has a 5xx status code
func (o *SetMetaUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this set meta unauthorized response a status code equal to that given
func (o *SetMetaUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the set meta unauthorized response
func (o *SetMetaUnauthorized) Code() int {
	return 401
}

func (o *SetMetaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /meta/set/{NodePath}][%d] setMetaUnauthorized ", 401)
}

func (o *SetMetaUnauthorized) String() string {
	return fmt.Sprintf("[POST /meta/set/{NodePath}][%d] setMetaUnauthorized ", 401)
}

func (o *SetMetaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetMetaForbidden creates a SetMetaForbidden with default headers values
func NewSetMetaForbidden() *SetMetaForbidden {
	return &SetMetaForbidden{}
}

/*
SetMetaForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type SetMetaForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this set meta forbidden response has a 2xx status code
func (o *SetMetaForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set meta forbidden response has a 3xx status code
func (o *SetMetaForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set meta forbidden response has a 4xx status code
func (o *SetMetaForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set meta forbidden response has a 5xx status code
func (o *SetMetaForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set meta forbidden response a status code equal to that given
func (o *SetMetaForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the set meta forbidden response
func (o *SetMetaForbidden) Code() int {
	return 403
}

func (o *SetMetaForbidden) Error() string {
	return fmt.Sprintf("[POST /meta/set/{NodePath}][%d] setMetaForbidden  %+v", 403, o.Payload)
}

func (o *SetMetaForbidden) String() string {
	return fmt.Sprintf("[POST /meta/set/{NodePath}][%d] setMetaForbidden  %+v", 403, o.Payload)
}

func (o *SetMetaForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SetMetaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetMetaNotFound creates a SetMetaNotFound with default headers values
func NewSetMetaNotFound() *SetMetaNotFound {
	return &SetMetaNotFound{}
}

/*
SetMetaNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type SetMetaNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this set meta not found response has a 2xx status code
func (o *SetMetaNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set meta not found response has a 3xx status code
func (o *SetMetaNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set meta not found response has a 4xx status code
func (o *SetMetaNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set meta not found response has a 5xx status code
func (o *SetMetaNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set meta not found response a status code equal to that given
func (o *SetMetaNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the set meta not found response
func (o *SetMetaNotFound) Code() int {
	return 404
}

func (o *SetMetaNotFound) Error() string {
	return fmt.Sprintf("[POST /meta/set/{NodePath}][%d] setMetaNotFound  %+v", 404, o.Payload)
}

func (o *SetMetaNotFound) String() string {
	return fmt.Sprintf("[POST /meta/set/{NodePath}][%d] setMetaNotFound  %+v", 404, o.Payload)
}

func (o *SetMetaNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SetMetaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetMetaInternalServerError creates a SetMetaInternalServerError with default headers values
func NewSetMetaInternalServerError() *SetMetaInternalServerError {
	return &SetMetaInternalServerError{}
}

/*
SetMetaInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type SetMetaInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this set meta internal server error response has a 2xx status code
func (o *SetMetaInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set meta internal server error response has a 3xx status code
func (o *SetMetaInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set meta internal server error response has a 4xx status code
func (o *SetMetaInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this set meta internal server error response has a 5xx status code
func (o *SetMetaInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this set meta internal server error response a status code equal to that given
func (o *SetMetaInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the set meta internal server error response
func (o *SetMetaInternalServerError) Code() int {
	return 500
}

func (o *SetMetaInternalServerError) Error() string {
	return fmt.Sprintf("[POST /meta/set/{NodePath}][%d] setMetaInternalServerError  %+v", 500, o.Payload)
}

func (o *SetMetaInternalServerError) String() string {
	return fmt.Sprintf("[POST /meta/set/{NodePath}][%d] setMetaInternalServerError  %+v", 500, o.Payload)
}

func (o *SetMetaInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SetMetaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SetMetaBody RestMetaCollection
swagger:model SetMetaBody
*/
type SetMetaBody struct {

	// metadatas
	Metadatas []*models.RestMetadata `json:"Metadatas"`
}

// Validate validates this set meta body
func (o *SetMetaBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadatas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetMetaBody) validateMetadatas(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadatas) { // not required
		return nil
	}

	for i := 0; i < len(o.Metadatas); i++ {
		if swag.IsZero(o.Metadatas[i]) { // not required
			continue
		}

		if o.Metadatas[i] != nil {
			if err := o.Metadatas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Metadatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Metadatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this set meta body based on the context it is used
func (o *SetMetaBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetadatas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetMetaBody) contextValidateMetadatas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Metadatas); i++ {

		if o.Metadatas[i] != nil {

			if swag.IsZero(o.Metadatas[i]) { // not required
				return nil
			}

			if err := o.Metadatas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Metadatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Metadatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetMetaBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetMetaBody) UnmarshalBinary(b []byte) error {
	var res SetMetaBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
