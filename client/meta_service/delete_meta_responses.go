// Code generated by go-swagger; DO NOT EDIT.

package meta_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// DeleteMetaReader is a Reader for the DeleteMeta structure.
type DeleteMetaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMetaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteMetaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteMetaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteMetaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteMetaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteMetaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /meta/delete/{NodePath}] DeleteMeta", response, response.Code())
	}
}

// NewDeleteMetaOK creates a DeleteMetaOK with default headers values
func NewDeleteMetaOK() *DeleteMetaOK {
	return &DeleteMetaOK{}
}

/*
DeleteMetaOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteMetaOK struct {
	Payload *models.TreeNode
}

// IsSuccess returns true when this delete meta o k response has a 2xx status code
func (o *DeleteMetaOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete meta o k response has a 3xx status code
func (o *DeleteMetaOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete meta o k response has a 4xx status code
func (o *DeleteMetaOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete meta o k response has a 5xx status code
func (o *DeleteMetaOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete meta o k response a status code equal to that given
func (o *DeleteMetaOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete meta o k response
func (o *DeleteMetaOK) Code() int {
	return 200
}

func (o *DeleteMetaOK) Error() string {
	return fmt.Sprintf("[POST /meta/delete/{NodePath}][%d] deleteMetaOK  %+v", 200, o.Payload)
}

func (o *DeleteMetaOK) String() string {
	return fmt.Sprintf("[POST /meta/delete/{NodePath}][%d] deleteMetaOK  %+v", 200, o.Payload)
}

func (o *DeleteMetaOK) GetPayload() *models.TreeNode {
	return o.Payload
}

func (o *DeleteMetaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TreeNode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMetaUnauthorized creates a DeleteMetaUnauthorized with default headers values
func NewDeleteMetaUnauthorized() *DeleteMetaUnauthorized {
	return &DeleteMetaUnauthorized{}
}

/*
DeleteMetaUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type DeleteMetaUnauthorized struct {
}

// IsSuccess returns true when this delete meta unauthorized response has a 2xx status code
func (o *DeleteMetaUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete meta unauthorized response has a 3xx status code
func (o *DeleteMetaUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete meta unauthorized response has a 4xx status code
func (o *DeleteMetaUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete meta unauthorized response has a 5xx status code
func (o *DeleteMetaUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete meta unauthorized response a status code equal to that given
func (o *DeleteMetaUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete meta unauthorized response
func (o *DeleteMetaUnauthorized) Code() int {
	return 401
}

func (o *DeleteMetaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /meta/delete/{NodePath}][%d] deleteMetaUnauthorized ", 401)
}

func (o *DeleteMetaUnauthorized) String() string {
	return fmt.Sprintf("[POST /meta/delete/{NodePath}][%d] deleteMetaUnauthorized ", 401)
}

func (o *DeleteMetaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMetaForbidden creates a DeleteMetaForbidden with default headers values
func NewDeleteMetaForbidden() *DeleteMetaForbidden {
	return &DeleteMetaForbidden{}
}

/*
DeleteMetaForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type DeleteMetaForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this delete meta forbidden response has a 2xx status code
func (o *DeleteMetaForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete meta forbidden response has a 3xx status code
func (o *DeleteMetaForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete meta forbidden response has a 4xx status code
func (o *DeleteMetaForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete meta forbidden response has a 5xx status code
func (o *DeleteMetaForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete meta forbidden response a status code equal to that given
func (o *DeleteMetaForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete meta forbidden response
func (o *DeleteMetaForbidden) Code() int {
	return 403
}

func (o *DeleteMetaForbidden) Error() string {
	return fmt.Sprintf("[POST /meta/delete/{NodePath}][%d] deleteMetaForbidden  %+v", 403, o.Payload)
}

func (o *DeleteMetaForbidden) String() string {
	return fmt.Sprintf("[POST /meta/delete/{NodePath}][%d] deleteMetaForbidden  %+v", 403, o.Payload)
}

func (o *DeleteMetaForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *DeleteMetaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMetaNotFound creates a DeleteMetaNotFound with default headers values
func NewDeleteMetaNotFound() *DeleteMetaNotFound {
	return &DeleteMetaNotFound{}
}

/*
DeleteMetaNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type DeleteMetaNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this delete meta not found response has a 2xx status code
func (o *DeleteMetaNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete meta not found response has a 3xx status code
func (o *DeleteMetaNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete meta not found response has a 4xx status code
func (o *DeleteMetaNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete meta not found response has a 5xx status code
func (o *DeleteMetaNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete meta not found response a status code equal to that given
func (o *DeleteMetaNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete meta not found response
func (o *DeleteMetaNotFound) Code() int {
	return 404
}

func (o *DeleteMetaNotFound) Error() string {
	return fmt.Sprintf("[POST /meta/delete/{NodePath}][%d] deleteMetaNotFound  %+v", 404, o.Payload)
}

func (o *DeleteMetaNotFound) String() string {
	return fmt.Sprintf("[POST /meta/delete/{NodePath}][%d] deleteMetaNotFound  %+v", 404, o.Payload)
}

func (o *DeleteMetaNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *DeleteMetaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMetaInternalServerError creates a DeleteMetaInternalServerError with default headers values
func NewDeleteMetaInternalServerError() *DeleteMetaInternalServerError {
	return &DeleteMetaInternalServerError{}
}

/*
DeleteMetaInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type DeleteMetaInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this delete meta internal server error response has a 2xx status code
func (o *DeleteMetaInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete meta internal server error response has a 3xx status code
func (o *DeleteMetaInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete meta internal server error response has a 4xx status code
func (o *DeleteMetaInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete meta internal server error response has a 5xx status code
func (o *DeleteMetaInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete meta internal server error response a status code equal to that given
func (o *DeleteMetaInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete meta internal server error response
func (o *DeleteMetaInternalServerError) Code() int {
	return 500
}

func (o *DeleteMetaInternalServerError) Error() string {
	return fmt.Sprintf("[POST /meta/delete/{NodePath}][%d] deleteMetaInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteMetaInternalServerError) String() string {
	return fmt.Sprintf("[POST /meta/delete/{NodePath}][%d] deleteMetaInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteMetaInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *DeleteMetaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteMetaBody RestMetaNamespaceRequest
swagger:model DeleteMetaBody
*/
type DeleteMetaBody struct {

	// List of namespaces to load
	Namespace []string `json:"Namespace"`
}

// Validate validates this delete meta body
func (o *DeleteMetaBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete meta body based on context it is used
func (o *DeleteMetaBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteMetaBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteMetaBody) UnmarshalBinary(b []byte) error {
	var res DeleteMetaBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
