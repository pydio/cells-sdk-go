// Code generated by go-swagger; DO NOT EDIT.

package activity_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// SearchSubscriptionsReader is a Reader for the SearchSubscriptions structure.
type SearchSubscriptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchSubscriptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchSubscriptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSearchSubscriptionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchSubscriptionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchSubscriptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchSubscriptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /activity/subscriptions] SearchSubscriptions", response, response.Code())
	}
}

// NewSearchSubscriptionsOK creates a SearchSubscriptionsOK with default headers values
func NewSearchSubscriptionsOK() *SearchSubscriptionsOK {
	return &SearchSubscriptionsOK{}
}

/*
SearchSubscriptionsOK describes a response with status code 200, with default header values.

A successful response.
*/
type SearchSubscriptionsOK struct {
	Payload *models.RestSubscriptionsCollection
}

// IsSuccess returns true when this search subscriptions o k response has a 2xx status code
func (o *SearchSubscriptionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search subscriptions o k response has a 3xx status code
func (o *SearchSubscriptionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search subscriptions o k response has a 4xx status code
func (o *SearchSubscriptionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search subscriptions o k response has a 5xx status code
func (o *SearchSubscriptionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search subscriptions o k response a status code equal to that given
func (o *SearchSubscriptionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search subscriptions o k response
func (o *SearchSubscriptionsOK) Code() int {
	return 200
}

func (o *SearchSubscriptionsOK) Error() string {
	return fmt.Sprintf("[POST /activity/subscriptions][%d] searchSubscriptionsOK  %+v", 200, o.Payload)
}

func (o *SearchSubscriptionsOK) String() string {
	return fmt.Sprintf("[POST /activity/subscriptions][%d] searchSubscriptionsOK  %+v", 200, o.Payload)
}

func (o *SearchSubscriptionsOK) GetPayload() *models.RestSubscriptionsCollection {
	return o.Payload
}

func (o *SearchSubscriptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestSubscriptionsCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchSubscriptionsUnauthorized creates a SearchSubscriptionsUnauthorized with default headers values
func NewSearchSubscriptionsUnauthorized() *SearchSubscriptionsUnauthorized {
	return &SearchSubscriptionsUnauthorized{}
}

/*
SearchSubscriptionsUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type SearchSubscriptionsUnauthorized struct {
	Payload *models.RestError
}

// IsSuccess returns true when this search subscriptions unauthorized response has a 2xx status code
func (o *SearchSubscriptionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search subscriptions unauthorized response has a 3xx status code
func (o *SearchSubscriptionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search subscriptions unauthorized response has a 4xx status code
func (o *SearchSubscriptionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search subscriptions unauthorized response has a 5xx status code
func (o *SearchSubscriptionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search subscriptions unauthorized response a status code equal to that given
func (o *SearchSubscriptionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the search subscriptions unauthorized response
func (o *SearchSubscriptionsUnauthorized) Code() int {
	return 401
}

func (o *SearchSubscriptionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /activity/subscriptions][%d] searchSubscriptionsUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchSubscriptionsUnauthorized) String() string {
	return fmt.Sprintf("[POST /activity/subscriptions][%d] searchSubscriptionsUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchSubscriptionsUnauthorized) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SearchSubscriptionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchSubscriptionsForbidden creates a SearchSubscriptionsForbidden with default headers values
func NewSearchSubscriptionsForbidden() *SearchSubscriptionsForbidden {
	return &SearchSubscriptionsForbidden{}
}

/*
SearchSubscriptionsForbidden describes a response with status code 403, with default header values.

User has no permission to access this particular resource
*/
type SearchSubscriptionsForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this search subscriptions forbidden response has a 2xx status code
func (o *SearchSubscriptionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search subscriptions forbidden response has a 3xx status code
func (o *SearchSubscriptionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search subscriptions forbidden response has a 4xx status code
func (o *SearchSubscriptionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search subscriptions forbidden response has a 5xx status code
func (o *SearchSubscriptionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search subscriptions forbidden response a status code equal to that given
func (o *SearchSubscriptionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the search subscriptions forbidden response
func (o *SearchSubscriptionsForbidden) Code() int {
	return 403
}

func (o *SearchSubscriptionsForbidden) Error() string {
	return fmt.Sprintf("[POST /activity/subscriptions][%d] searchSubscriptionsForbidden  %+v", 403, o.Payload)
}

func (o *SearchSubscriptionsForbidden) String() string {
	return fmt.Sprintf("[POST /activity/subscriptions][%d] searchSubscriptionsForbidden  %+v", 403, o.Payload)
}

func (o *SearchSubscriptionsForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SearchSubscriptionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchSubscriptionsNotFound creates a SearchSubscriptionsNotFound with default headers values
func NewSearchSubscriptionsNotFound() *SearchSubscriptionsNotFound {
	return &SearchSubscriptionsNotFound{}
}

/*
SearchSubscriptionsNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type SearchSubscriptionsNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this search subscriptions not found response has a 2xx status code
func (o *SearchSubscriptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search subscriptions not found response has a 3xx status code
func (o *SearchSubscriptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search subscriptions not found response has a 4xx status code
func (o *SearchSubscriptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search subscriptions not found response has a 5xx status code
func (o *SearchSubscriptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search subscriptions not found response a status code equal to that given
func (o *SearchSubscriptionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the search subscriptions not found response
func (o *SearchSubscriptionsNotFound) Code() int {
	return 404
}

func (o *SearchSubscriptionsNotFound) Error() string {
	return fmt.Sprintf("[POST /activity/subscriptions][%d] searchSubscriptionsNotFound  %+v", 404, o.Payload)
}

func (o *SearchSubscriptionsNotFound) String() string {
	return fmt.Sprintf("[POST /activity/subscriptions][%d] searchSubscriptionsNotFound  %+v", 404, o.Payload)
}

func (o *SearchSubscriptionsNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SearchSubscriptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchSubscriptionsInternalServerError creates a SearchSubscriptionsInternalServerError with default headers values
func NewSearchSubscriptionsInternalServerError() *SearchSubscriptionsInternalServerError {
	return &SearchSubscriptionsInternalServerError{}
}

/*
SearchSubscriptionsInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type SearchSubscriptionsInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this search subscriptions internal server error response has a 2xx status code
func (o *SearchSubscriptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search subscriptions internal server error response has a 3xx status code
func (o *SearchSubscriptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search subscriptions internal server error response has a 4xx status code
func (o *SearchSubscriptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search subscriptions internal server error response has a 5xx status code
func (o *SearchSubscriptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search subscriptions internal server error response a status code equal to that given
func (o *SearchSubscriptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search subscriptions internal server error response
func (o *SearchSubscriptionsInternalServerError) Code() int {
	return 500
}

func (o *SearchSubscriptionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /activity/subscriptions][%d] searchSubscriptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchSubscriptionsInternalServerError) String() string {
	return fmt.Sprintf("[POST /activity/subscriptions][%d] searchSubscriptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchSubscriptionsInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SearchSubscriptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
