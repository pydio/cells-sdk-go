// Code generated by go-swagger; DO NOT EDIT.

package admin_tree_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// ListAdminTreeReader is a Reader for the ListAdminTree structure.
type ListAdminTreeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAdminTreeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAdminTreeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListAdminTreeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListAdminTreeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListAdminTreeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListAdminTreeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /tree/admin/list] ListAdminTree", response, response.Code())
	}
}

// NewListAdminTreeOK creates a ListAdminTreeOK with default headers values
func NewListAdminTreeOK() *ListAdminTreeOK {
	return &ListAdminTreeOK{}
}

/*
ListAdminTreeOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListAdminTreeOK struct {
	Payload *models.RestNodesCollection
}

// IsSuccess returns true when this list admin tree o k response has a 2xx status code
func (o *ListAdminTreeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list admin tree o k response has a 3xx status code
func (o *ListAdminTreeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list admin tree o k response has a 4xx status code
func (o *ListAdminTreeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list admin tree o k response has a 5xx status code
func (o *ListAdminTreeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list admin tree o k response a status code equal to that given
func (o *ListAdminTreeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list admin tree o k response
func (o *ListAdminTreeOK) Code() int {
	return 200
}

func (o *ListAdminTreeOK) Error() string {
	return fmt.Sprintf("[POST /tree/admin/list][%d] listAdminTreeOK  %+v", 200, o.Payload)
}

func (o *ListAdminTreeOK) String() string {
	return fmt.Sprintf("[POST /tree/admin/list][%d] listAdminTreeOK  %+v", 200, o.Payload)
}

func (o *ListAdminTreeOK) GetPayload() *models.RestNodesCollection {
	return o.Payload
}

func (o *ListAdminTreeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestNodesCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAdminTreeUnauthorized creates a ListAdminTreeUnauthorized with default headers values
func NewListAdminTreeUnauthorized() *ListAdminTreeUnauthorized {
	return &ListAdminTreeUnauthorized{}
}

/*
ListAdminTreeUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type ListAdminTreeUnauthorized struct {
	Payload *models.RestError
}

// IsSuccess returns true when this list admin tree unauthorized response has a 2xx status code
func (o *ListAdminTreeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list admin tree unauthorized response has a 3xx status code
func (o *ListAdminTreeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list admin tree unauthorized response has a 4xx status code
func (o *ListAdminTreeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list admin tree unauthorized response has a 5xx status code
func (o *ListAdminTreeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list admin tree unauthorized response a status code equal to that given
func (o *ListAdminTreeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list admin tree unauthorized response
func (o *ListAdminTreeUnauthorized) Code() int {
	return 401
}

func (o *ListAdminTreeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /tree/admin/list][%d] listAdminTreeUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAdminTreeUnauthorized) String() string {
	return fmt.Sprintf("[POST /tree/admin/list][%d] listAdminTreeUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAdminTreeUnauthorized) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ListAdminTreeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAdminTreeForbidden creates a ListAdminTreeForbidden with default headers values
func NewListAdminTreeForbidden() *ListAdminTreeForbidden {
	return &ListAdminTreeForbidden{}
}

/*
ListAdminTreeForbidden describes a response with status code 403, with default header values.

User has no permission to access this particular resource
*/
type ListAdminTreeForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this list admin tree forbidden response has a 2xx status code
func (o *ListAdminTreeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list admin tree forbidden response has a 3xx status code
func (o *ListAdminTreeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list admin tree forbidden response has a 4xx status code
func (o *ListAdminTreeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list admin tree forbidden response has a 5xx status code
func (o *ListAdminTreeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list admin tree forbidden response a status code equal to that given
func (o *ListAdminTreeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list admin tree forbidden response
func (o *ListAdminTreeForbidden) Code() int {
	return 403
}

func (o *ListAdminTreeForbidden) Error() string {
	return fmt.Sprintf("[POST /tree/admin/list][%d] listAdminTreeForbidden  %+v", 403, o.Payload)
}

func (o *ListAdminTreeForbidden) String() string {
	return fmt.Sprintf("[POST /tree/admin/list][%d] listAdminTreeForbidden  %+v", 403, o.Payload)
}

func (o *ListAdminTreeForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ListAdminTreeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAdminTreeNotFound creates a ListAdminTreeNotFound with default headers values
func NewListAdminTreeNotFound() *ListAdminTreeNotFound {
	return &ListAdminTreeNotFound{}
}

/*
ListAdminTreeNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type ListAdminTreeNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this list admin tree not found response has a 2xx status code
func (o *ListAdminTreeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list admin tree not found response has a 3xx status code
func (o *ListAdminTreeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list admin tree not found response has a 4xx status code
func (o *ListAdminTreeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list admin tree not found response has a 5xx status code
func (o *ListAdminTreeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list admin tree not found response a status code equal to that given
func (o *ListAdminTreeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list admin tree not found response
func (o *ListAdminTreeNotFound) Code() int {
	return 404
}

func (o *ListAdminTreeNotFound) Error() string {
	return fmt.Sprintf("[POST /tree/admin/list][%d] listAdminTreeNotFound  %+v", 404, o.Payload)
}

func (o *ListAdminTreeNotFound) String() string {
	return fmt.Sprintf("[POST /tree/admin/list][%d] listAdminTreeNotFound  %+v", 404, o.Payload)
}

func (o *ListAdminTreeNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ListAdminTreeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAdminTreeInternalServerError creates a ListAdminTreeInternalServerError with default headers values
func NewListAdminTreeInternalServerError() *ListAdminTreeInternalServerError {
	return &ListAdminTreeInternalServerError{}
}

/*
ListAdminTreeInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type ListAdminTreeInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this list admin tree internal server error response has a 2xx status code
func (o *ListAdminTreeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list admin tree internal server error response has a 3xx status code
func (o *ListAdminTreeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list admin tree internal server error response has a 4xx status code
func (o *ListAdminTreeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list admin tree internal server error response has a 5xx status code
func (o *ListAdminTreeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list admin tree internal server error response a status code equal to that given
func (o *ListAdminTreeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list admin tree internal server error response
func (o *ListAdminTreeInternalServerError) Code() int {
	return 500
}

func (o *ListAdminTreeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /tree/admin/list][%d] listAdminTreeInternalServerError  %+v", 500, o.Payload)
}

func (o *ListAdminTreeInternalServerError) String() string {
	return fmt.Sprintf("[POST /tree/admin/list][%d] listAdminTreeInternalServerError  %+v", 500, o.Payload)
}

func (o *ListAdminTreeInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ListAdminTreeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
