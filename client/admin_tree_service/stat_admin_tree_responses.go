// Code generated by go-swagger; DO NOT EDIT.

package admin_tree_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// StatAdminTreeReader is a Reader for the StatAdminTree structure.
type StatAdminTreeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StatAdminTreeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStatAdminTreeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewStatAdminTreeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStatAdminTreeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStatAdminTreeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStatAdminTreeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /tree/admin/stat] StatAdminTree", response, response.Code())
	}
}

// NewStatAdminTreeOK creates a StatAdminTreeOK with default headers values
func NewStatAdminTreeOK() *StatAdminTreeOK {
	return &StatAdminTreeOK{}
}

/*
StatAdminTreeOK describes a response with status code 200, with default header values.

A successful response.
*/
type StatAdminTreeOK struct {
	Payload *models.TreeReadNodeResponse
}

// IsSuccess returns true when this stat admin tree o k response has a 2xx status code
func (o *StatAdminTreeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stat admin tree o k response has a 3xx status code
func (o *StatAdminTreeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stat admin tree o k response has a 4xx status code
func (o *StatAdminTreeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stat admin tree o k response has a 5xx status code
func (o *StatAdminTreeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stat admin tree o k response a status code equal to that given
func (o *StatAdminTreeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stat admin tree o k response
func (o *StatAdminTreeOK) Code() int {
	return 200
}

func (o *StatAdminTreeOK) Error() string {
	return fmt.Sprintf("[POST /tree/admin/stat][%d] statAdminTreeOK  %+v", 200, o.Payload)
}

func (o *StatAdminTreeOK) String() string {
	return fmt.Sprintf("[POST /tree/admin/stat][%d] statAdminTreeOK  %+v", 200, o.Payload)
}

func (o *StatAdminTreeOK) GetPayload() *models.TreeReadNodeResponse {
	return o.Payload
}

func (o *StatAdminTreeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TreeReadNodeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatAdminTreeUnauthorized creates a StatAdminTreeUnauthorized with default headers values
func NewStatAdminTreeUnauthorized() *StatAdminTreeUnauthorized {
	return &StatAdminTreeUnauthorized{}
}

/*
StatAdminTreeUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type StatAdminTreeUnauthorized struct {
}

// IsSuccess returns true when this stat admin tree unauthorized response has a 2xx status code
func (o *StatAdminTreeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stat admin tree unauthorized response has a 3xx status code
func (o *StatAdminTreeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stat admin tree unauthorized response has a 4xx status code
func (o *StatAdminTreeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stat admin tree unauthorized response has a 5xx status code
func (o *StatAdminTreeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stat admin tree unauthorized response a status code equal to that given
func (o *StatAdminTreeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the stat admin tree unauthorized response
func (o *StatAdminTreeUnauthorized) Code() int {
	return 401
}

func (o *StatAdminTreeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /tree/admin/stat][%d] statAdminTreeUnauthorized ", 401)
}

func (o *StatAdminTreeUnauthorized) String() string {
	return fmt.Sprintf("[POST /tree/admin/stat][%d] statAdminTreeUnauthorized ", 401)
}

func (o *StatAdminTreeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStatAdminTreeForbidden creates a StatAdminTreeForbidden with default headers values
func NewStatAdminTreeForbidden() *StatAdminTreeForbidden {
	return &StatAdminTreeForbidden{}
}

/*
StatAdminTreeForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type StatAdminTreeForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this stat admin tree forbidden response has a 2xx status code
func (o *StatAdminTreeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stat admin tree forbidden response has a 3xx status code
func (o *StatAdminTreeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stat admin tree forbidden response has a 4xx status code
func (o *StatAdminTreeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stat admin tree forbidden response has a 5xx status code
func (o *StatAdminTreeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stat admin tree forbidden response a status code equal to that given
func (o *StatAdminTreeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stat admin tree forbidden response
func (o *StatAdminTreeForbidden) Code() int {
	return 403
}

func (o *StatAdminTreeForbidden) Error() string {
	return fmt.Sprintf("[POST /tree/admin/stat][%d] statAdminTreeForbidden  %+v", 403, o.Payload)
}

func (o *StatAdminTreeForbidden) String() string {
	return fmt.Sprintf("[POST /tree/admin/stat][%d] statAdminTreeForbidden  %+v", 403, o.Payload)
}

func (o *StatAdminTreeForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *StatAdminTreeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatAdminTreeNotFound creates a StatAdminTreeNotFound with default headers values
func NewStatAdminTreeNotFound() *StatAdminTreeNotFound {
	return &StatAdminTreeNotFound{}
}

/*
StatAdminTreeNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type StatAdminTreeNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this stat admin tree not found response has a 2xx status code
func (o *StatAdminTreeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stat admin tree not found response has a 3xx status code
func (o *StatAdminTreeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stat admin tree not found response has a 4xx status code
func (o *StatAdminTreeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stat admin tree not found response has a 5xx status code
func (o *StatAdminTreeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stat admin tree not found response a status code equal to that given
func (o *StatAdminTreeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stat admin tree not found response
func (o *StatAdminTreeNotFound) Code() int {
	return 404
}

func (o *StatAdminTreeNotFound) Error() string {
	return fmt.Sprintf("[POST /tree/admin/stat][%d] statAdminTreeNotFound  %+v", 404, o.Payload)
}

func (o *StatAdminTreeNotFound) String() string {
	return fmt.Sprintf("[POST /tree/admin/stat][%d] statAdminTreeNotFound  %+v", 404, o.Payload)
}

func (o *StatAdminTreeNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *StatAdminTreeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatAdminTreeInternalServerError creates a StatAdminTreeInternalServerError with default headers values
func NewStatAdminTreeInternalServerError() *StatAdminTreeInternalServerError {
	return &StatAdminTreeInternalServerError{}
}

/*
StatAdminTreeInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type StatAdminTreeInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this stat admin tree internal server error response has a 2xx status code
func (o *StatAdminTreeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stat admin tree internal server error response has a 3xx status code
func (o *StatAdminTreeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stat admin tree internal server error response has a 4xx status code
func (o *StatAdminTreeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stat admin tree internal server error response has a 5xx status code
func (o *StatAdminTreeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stat admin tree internal server error response a status code equal to that given
func (o *StatAdminTreeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stat admin tree internal server error response
func (o *StatAdminTreeInternalServerError) Code() int {
	return 500
}

func (o *StatAdminTreeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /tree/admin/stat][%d] statAdminTreeInternalServerError  %+v", 500, o.Payload)
}

func (o *StatAdminTreeInternalServerError) String() string {
	return fmt.Sprintf("[POST /tree/admin/stat][%d] statAdminTreeInternalServerError  %+v", 500, o.Payload)
}

func (o *StatAdminTreeInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *StatAdminTreeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
