// Code generated by go-swagger; DO NOT EDIT.

package jobs_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new jobs service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for jobs service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ListTasksLogs(params *ListTasksLogsParams, opts ...ClientOption) (*ListTasksLogsOK, error)

	UserControlJob(params *UserControlJobParams, opts ...ClientOption) (*UserControlJobOK, error)

	UserCreateJob(params *UserCreateJobParams, opts ...ClientOption) (*UserCreateJobOK, error)

	UserDeleteTasks(params *UserDeleteTasksParams, opts ...ClientOption) (*UserDeleteTasksOK, error)

	UserListJobs(params *UserListJobsParams, opts ...ClientOption) (*UserListJobsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ListTasksLogs technicals logs in Json or c s v format
*/
func (a *Client) ListTasksLogs(params *ListTasksLogsParams, opts ...ClientOption) (*ListTasksLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTasksLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTasksLogs",
		Method:             "POST",
		PathPattern:        "/jobs/tasks/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListTasksLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTasksLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListTasksLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserControlJob sends control commands to one or many jobs tasks
*/
func (a *Client) UserControlJob(params *UserControlJobParams, opts ...ClientOption) (*UserControlJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserControlJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserControlJob",
		Method:             "PUT",
		PathPattern:        "/jobs/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &UserControlJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserControlJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserControlJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserCreateJob creates a predefined job to be run directly
*/
func (a *Client) UserCreateJob(params *UserCreateJobParams, opts ...ClientOption) (*UserCreateJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCreateJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserCreateJob",
		Method:             "PUT",
		PathPattern:        "/jobs/user/{JobName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &UserCreateJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCreateJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserCreateJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserDeleteTasks sends a control command to clean tasks on a given job
*/
func (a *Client) UserDeleteTasks(params *UserDeleteTasksParams, opts ...ClientOption) (*UserDeleteTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserDeleteTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserDeleteTasks",
		Method:             "POST",
		PathPattern:        "/jobs/tasks/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &UserDeleteTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserDeleteTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserDeleteTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserListJobs lists jobs associated with current user
*/
func (a *Client) UserListJobs(params *UserListJobsParams, opts ...ClientOption) (*UserListJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserListJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserListJobs",
		Method:             "POST",
		PathPattern:        "/jobs/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &UserListJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserListJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserListJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
