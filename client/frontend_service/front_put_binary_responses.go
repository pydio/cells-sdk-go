// Code generated by go-swagger; DO NOT EDIT.

package frontend_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v3/models"
)

// FrontPutBinaryReader is a Reader for the FrontPutBinary structure.
type FrontPutBinaryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FrontPutBinaryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFrontPutBinaryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFrontPutBinaryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFrontPutBinaryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFrontPutBinaryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFrontPutBinaryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFrontPutBinaryOK creates a FrontPutBinaryOK with default headers values
func NewFrontPutBinaryOK() *FrontPutBinaryOK {
	return &FrontPutBinaryOK{}
}

/* FrontPutBinaryOK describes a response with status code 200, with default header values.

FrontPutBinaryOK front put binary o k
*/
type FrontPutBinaryOK struct {
	Payload models.RestFrontBinaryResponse
}

func (o *FrontPutBinaryOK) Error() string {
	return fmt.Sprintf("[POST /frontend/binaries/{BinaryType}/{Uuid}][%d] frontPutBinaryOK  %+v", 200, o.Payload)
}
func (o *FrontPutBinaryOK) GetPayload() models.RestFrontBinaryResponse {
	return o.Payload
}

func (o *FrontPutBinaryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFrontPutBinaryUnauthorized creates a FrontPutBinaryUnauthorized with default headers values
func NewFrontPutBinaryUnauthorized() *FrontPutBinaryUnauthorized {
	return &FrontPutBinaryUnauthorized{}
}

/* FrontPutBinaryUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type FrontPutBinaryUnauthorized struct {
}

func (o *FrontPutBinaryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /frontend/binaries/{BinaryType}/{Uuid}][%d] frontPutBinaryUnauthorized ", 401)
}

func (o *FrontPutBinaryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFrontPutBinaryForbidden creates a FrontPutBinaryForbidden with default headers values
func NewFrontPutBinaryForbidden() *FrontPutBinaryForbidden {
	return &FrontPutBinaryForbidden{}
}

/* FrontPutBinaryForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type FrontPutBinaryForbidden struct {
	Payload *models.RestError
}

func (o *FrontPutBinaryForbidden) Error() string {
	return fmt.Sprintf("[POST /frontend/binaries/{BinaryType}/{Uuid}][%d] frontPutBinaryForbidden  %+v", 403, o.Payload)
}
func (o *FrontPutBinaryForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *FrontPutBinaryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFrontPutBinaryNotFound creates a FrontPutBinaryNotFound with default headers values
func NewFrontPutBinaryNotFound() *FrontPutBinaryNotFound {
	return &FrontPutBinaryNotFound{}
}

/* FrontPutBinaryNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type FrontPutBinaryNotFound struct {
	Payload *models.RestError
}

func (o *FrontPutBinaryNotFound) Error() string {
	return fmt.Sprintf("[POST /frontend/binaries/{BinaryType}/{Uuid}][%d] frontPutBinaryNotFound  %+v", 404, o.Payload)
}
func (o *FrontPutBinaryNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *FrontPutBinaryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFrontPutBinaryInternalServerError creates a FrontPutBinaryInternalServerError with default headers values
func NewFrontPutBinaryInternalServerError() *FrontPutBinaryInternalServerError {
	return &FrontPutBinaryInternalServerError{}
}

/* FrontPutBinaryInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type FrontPutBinaryInternalServerError struct {
	Payload *models.RestError
}

func (o *FrontPutBinaryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /frontend/binaries/{BinaryType}/{Uuid}][%d] frontPutBinaryInternalServerError  %+v", 500, o.Payload)
}
func (o *FrontPutBinaryInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *FrontPutBinaryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
