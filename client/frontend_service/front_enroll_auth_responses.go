// Code generated by go-swagger; DO NOT EDIT.

package frontend_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// FrontEnrollAuthReader is a Reader for the FrontEnrollAuth structure.
type FrontEnrollAuthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FrontEnrollAuthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFrontEnrollAuthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFrontEnrollAuthUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFrontEnrollAuthForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFrontEnrollAuthNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFrontEnrollAuthInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /frontend/enroll] FrontEnrollAuth", response, response.Code())
	}
}

// NewFrontEnrollAuthOK creates a FrontEnrollAuthOK with default headers values
func NewFrontEnrollAuthOK() *FrontEnrollAuthOK {
	return &FrontEnrollAuthOK{}
}

/*
FrontEnrollAuthOK describes a response with status code 200, with default header values.

A successful response.
*/
type FrontEnrollAuthOK struct {
	Payload *models.RestFrontEnrollAuthResponse
}

// IsSuccess returns true when this front enroll auth o k response has a 2xx status code
func (o *FrontEnrollAuthOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this front enroll auth o k response has a 3xx status code
func (o *FrontEnrollAuthOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this front enroll auth o k response has a 4xx status code
func (o *FrontEnrollAuthOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this front enroll auth o k response has a 5xx status code
func (o *FrontEnrollAuthOK) IsServerError() bool {
	return false
}

// IsCode returns true when this front enroll auth o k response a status code equal to that given
func (o *FrontEnrollAuthOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the front enroll auth o k response
func (o *FrontEnrollAuthOK) Code() int {
	return 200
}

func (o *FrontEnrollAuthOK) Error() string {
	return fmt.Sprintf("[POST /frontend/enroll][%d] frontEnrollAuthOK  %+v", 200, o.Payload)
}

func (o *FrontEnrollAuthOK) String() string {
	return fmt.Sprintf("[POST /frontend/enroll][%d] frontEnrollAuthOK  %+v", 200, o.Payload)
}

func (o *FrontEnrollAuthOK) GetPayload() *models.RestFrontEnrollAuthResponse {
	return o.Payload
}

func (o *FrontEnrollAuthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestFrontEnrollAuthResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFrontEnrollAuthUnauthorized creates a FrontEnrollAuthUnauthorized with default headers values
func NewFrontEnrollAuthUnauthorized() *FrontEnrollAuthUnauthorized {
	return &FrontEnrollAuthUnauthorized{}
}

/*
FrontEnrollAuthUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type FrontEnrollAuthUnauthorized struct {
}

// IsSuccess returns true when this front enroll auth unauthorized response has a 2xx status code
func (o *FrontEnrollAuthUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this front enroll auth unauthorized response has a 3xx status code
func (o *FrontEnrollAuthUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this front enroll auth unauthorized response has a 4xx status code
func (o *FrontEnrollAuthUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this front enroll auth unauthorized response has a 5xx status code
func (o *FrontEnrollAuthUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this front enroll auth unauthorized response a status code equal to that given
func (o *FrontEnrollAuthUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the front enroll auth unauthorized response
func (o *FrontEnrollAuthUnauthorized) Code() int {
	return 401
}

func (o *FrontEnrollAuthUnauthorized) Error() string {
	return fmt.Sprintf("[POST /frontend/enroll][%d] frontEnrollAuthUnauthorized ", 401)
}

func (o *FrontEnrollAuthUnauthorized) String() string {
	return fmt.Sprintf("[POST /frontend/enroll][%d] frontEnrollAuthUnauthorized ", 401)
}

func (o *FrontEnrollAuthUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFrontEnrollAuthForbidden creates a FrontEnrollAuthForbidden with default headers values
func NewFrontEnrollAuthForbidden() *FrontEnrollAuthForbidden {
	return &FrontEnrollAuthForbidden{}
}

/*
FrontEnrollAuthForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type FrontEnrollAuthForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this front enroll auth forbidden response has a 2xx status code
func (o *FrontEnrollAuthForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this front enroll auth forbidden response has a 3xx status code
func (o *FrontEnrollAuthForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this front enroll auth forbidden response has a 4xx status code
func (o *FrontEnrollAuthForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this front enroll auth forbidden response has a 5xx status code
func (o *FrontEnrollAuthForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this front enroll auth forbidden response a status code equal to that given
func (o *FrontEnrollAuthForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the front enroll auth forbidden response
func (o *FrontEnrollAuthForbidden) Code() int {
	return 403
}

func (o *FrontEnrollAuthForbidden) Error() string {
	return fmt.Sprintf("[POST /frontend/enroll][%d] frontEnrollAuthForbidden  %+v", 403, o.Payload)
}

func (o *FrontEnrollAuthForbidden) String() string {
	return fmt.Sprintf("[POST /frontend/enroll][%d] frontEnrollAuthForbidden  %+v", 403, o.Payload)
}

func (o *FrontEnrollAuthForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *FrontEnrollAuthForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFrontEnrollAuthNotFound creates a FrontEnrollAuthNotFound with default headers values
func NewFrontEnrollAuthNotFound() *FrontEnrollAuthNotFound {
	return &FrontEnrollAuthNotFound{}
}

/*
FrontEnrollAuthNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type FrontEnrollAuthNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this front enroll auth not found response has a 2xx status code
func (o *FrontEnrollAuthNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this front enroll auth not found response has a 3xx status code
func (o *FrontEnrollAuthNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this front enroll auth not found response has a 4xx status code
func (o *FrontEnrollAuthNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this front enroll auth not found response has a 5xx status code
func (o *FrontEnrollAuthNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this front enroll auth not found response a status code equal to that given
func (o *FrontEnrollAuthNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the front enroll auth not found response
func (o *FrontEnrollAuthNotFound) Code() int {
	return 404
}

func (o *FrontEnrollAuthNotFound) Error() string {
	return fmt.Sprintf("[POST /frontend/enroll][%d] frontEnrollAuthNotFound  %+v", 404, o.Payload)
}

func (o *FrontEnrollAuthNotFound) String() string {
	return fmt.Sprintf("[POST /frontend/enroll][%d] frontEnrollAuthNotFound  %+v", 404, o.Payload)
}

func (o *FrontEnrollAuthNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *FrontEnrollAuthNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFrontEnrollAuthInternalServerError creates a FrontEnrollAuthInternalServerError with default headers values
func NewFrontEnrollAuthInternalServerError() *FrontEnrollAuthInternalServerError {
	return &FrontEnrollAuthInternalServerError{}
}

/*
FrontEnrollAuthInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type FrontEnrollAuthInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this front enroll auth internal server error response has a 2xx status code
func (o *FrontEnrollAuthInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this front enroll auth internal server error response has a 3xx status code
func (o *FrontEnrollAuthInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this front enroll auth internal server error response has a 4xx status code
func (o *FrontEnrollAuthInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this front enroll auth internal server error response has a 5xx status code
func (o *FrontEnrollAuthInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this front enroll auth internal server error response a status code equal to that given
func (o *FrontEnrollAuthInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the front enroll auth internal server error response
func (o *FrontEnrollAuthInternalServerError) Code() int {
	return 500
}

func (o *FrontEnrollAuthInternalServerError) Error() string {
	return fmt.Sprintf("[POST /frontend/enroll][%d] frontEnrollAuthInternalServerError  %+v", 500, o.Payload)
}

func (o *FrontEnrollAuthInternalServerError) String() string {
	return fmt.Sprintf("[POST /frontend/enroll][%d] frontEnrollAuthInternalServerError  %+v", 500, o.Payload)
}

func (o *FrontEnrollAuthInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *FrontEnrollAuthInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
