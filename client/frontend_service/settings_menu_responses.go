// Code generated by go-swagger; DO NOT EDIT.

package frontend_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v4/models"
)

// SettingsMenuReader is a Reader for the SettingsMenu structure.
type SettingsMenuReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SettingsMenuReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSettingsMenuOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSettingsMenuUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSettingsMenuForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSettingsMenuNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSettingsMenuInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSettingsMenuOK creates a SettingsMenuOK with default headers values
func NewSettingsMenuOK() *SettingsMenuOK {
	return &SettingsMenuOK{}
}

/*
SettingsMenuOK describes a response with status code 200, with default header values.

A successful response.
*/
type SettingsMenuOK struct {
	Payload *models.RestSettingsMenuResponse
}

// IsSuccess returns true when this settings menu o k response has a 2xx status code
func (o *SettingsMenuOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this settings menu o k response has a 3xx status code
func (o *SettingsMenuOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this settings menu o k response has a 4xx status code
func (o *SettingsMenuOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this settings menu o k response has a 5xx status code
func (o *SettingsMenuOK) IsServerError() bool {
	return false
}

// IsCode returns true when this settings menu o k response a status code equal to that given
func (o *SettingsMenuOK) IsCode(code int) bool {
	return code == 200
}

func (o *SettingsMenuOK) Error() string {
	return fmt.Sprintf("[GET /frontend/settings-menu][%d] settingsMenuOK  %+v", 200, o.Payload)
}

func (o *SettingsMenuOK) String() string {
	return fmt.Sprintf("[GET /frontend/settings-menu][%d] settingsMenuOK  %+v", 200, o.Payload)
}

func (o *SettingsMenuOK) GetPayload() *models.RestSettingsMenuResponse {
	return o.Payload
}

func (o *SettingsMenuOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestSettingsMenuResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSettingsMenuUnauthorized creates a SettingsMenuUnauthorized with default headers values
func NewSettingsMenuUnauthorized() *SettingsMenuUnauthorized {
	return &SettingsMenuUnauthorized{}
}

/*
SettingsMenuUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type SettingsMenuUnauthorized struct {
}

// IsSuccess returns true when this settings menu unauthorized response has a 2xx status code
func (o *SettingsMenuUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this settings menu unauthorized response has a 3xx status code
func (o *SettingsMenuUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this settings menu unauthorized response has a 4xx status code
func (o *SettingsMenuUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this settings menu unauthorized response has a 5xx status code
func (o *SettingsMenuUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this settings menu unauthorized response a status code equal to that given
func (o *SettingsMenuUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SettingsMenuUnauthorized) Error() string {
	return fmt.Sprintf("[GET /frontend/settings-menu][%d] settingsMenuUnauthorized ", 401)
}

func (o *SettingsMenuUnauthorized) String() string {
	return fmt.Sprintf("[GET /frontend/settings-menu][%d] settingsMenuUnauthorized ", 401)
}

func (o *SettingsMenuUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSettingsMenuForbidden creates a SettingsMenuForbidden with default headers values
func NewSettingsMenuForbidden() *SettingsMenuForbidden {
	return &SettingsMenuForbidden{}
}

/*
SettingsMenuForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type SettingsMenuForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this settings menu forbidden response has a 2xx status code
func (o *SettingsMenuForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this settings menu forbidden response has a 3xx status code
func (o *SettingsMenuForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this settings menu forbidden response has a 4xx status code
func (o *SettingsMenuForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this settings menu forbidden response has a 5xx status code
func (o *SettingsMenuForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this settings menu forbidden response a status code equal to that given
func (o *SettingsMenuForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SettingsMenuForbidden) Error() string {
	return fmt.Sprintf("[GET /frontend/settings-menu][%d] settingsMenuForbidden  %+v", 403, o.Payload)
}

func (o *SettingsMenuForbidden) String() string {
	return fmt.Sprintf("[GET /frontend/settings-menu][%d] settingsMenuForbidden  %+v", 403, o.Payload)
}

func (o *SettingsMenuForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SettingsMenuForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSettingsMenuNotFound creates a SettingsMenuNotFound with default headers values
func NewSettingsMenuNotFound() *SettingsMenuNotFound {
	return &SettingsMenuNotFound{}
}

/*
SettingsMenuNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type SettingsMenuNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this settings menu not found response has a 2xx status code
func (o *SettingsMenuNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this settings menu not found response has a 3xx status code
func (o *SettingsMenuNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this settings menu not found response has a 4xx status code
func (o *SettingsMenuNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this settings menu not found response has a 5xx status code
func (o *SettingsMenuNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this settings menu not found response a status code equal to that given
func (o *SettingsMenuNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SettingsMenuNotFound) Error() string {
	return fmt.Sprintf("[GET /frontend/settings-menu][%d] settingsMenuNotFound  %+v", 404, o.Payload)
}

func (o *SettingsMenuNotFound) String() string {
	return fmt.Sprintf("[GET /frontend/settings-menu][%d] settingsMenuNotFound  %+v", 404, o.Payload)
}

func (o *SettingsMenuNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SettingsMenuNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSettingsMenuInternalServerError creates a SettingsMenuInternalServerError with default headers values
func NewSettingsMenuInternalServerError() *SettingsMenuInternalServerError {
	return &SettingsMenuInternalServerError{}
}

/*
SettingsMenuInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type SettingsMenuInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this settings menu internal server error response has a 2xx status code
func (o *SettingsMenuInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this settings menu internal server error response has a 3xx status code
func (o *SettingsMenuInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this settings menu internal server error response has a 4xx status code
func (o *SettingsMenuInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this settings menu internal server error response has a 5xx status code
func (o *SettingsMenuInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this settings menu internal server error response a status code equal to that given
func (o *SettingsMenuInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SettingsMenuInternalServerError) Error() string {
	return fmt.Sprintf("[GET /frontend/settings-menu][%d] settingsMenuInternalServerError  %+v", 500, o.Payload)
}

func (o *SettingsMenuInternalServerError) String() string {
	return fmt.Sprintf("[GET /frontend/settings-menu][%d] settingsMenuInternalServerError  %+v", 500, o.Payload)
}

func (o *SettingsMenuInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SettingsMenuInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
