// Code generated by go-swagger; DO NOT EDIT.

package token_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// ResetPasswordTokenReader is a Reader for the ResetPasswordToken structure.
type ResetPasswordTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResetPasswordTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewResetPasswordTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewResetPasswordTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewResetPasswordTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewResetPasswordTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewResetPasswordTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /auth/reset-password-token/{UserLogin}] ResetPasswordToken", response, response.Code())
	}
}

// NewResetPasswordTokenOK creates a ResetPasswordTokenOK with default headers values
func NewResetPasswordTokenOK() *ResetPasswordTokenOK {
	return &ResetPasswordTokenOK{}
}

/*
ResetPasswordTokenOK describes a response with status code 200, with default header values.

A successful response.
*/
type ResetPasswordTokenOK struct {
	Payload *models.RestResetPasswordTokenResponse
}

// IsSuccess returns true when this reset password token o k response has a 2xx status code
func (o *ResetPasswordTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reset password token o k response has a 3xx status code
func (o *ResetPasswordTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset password token o k response has a 4xx status code
func (o *ResetPasswordTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reset password token o k response has a 5xx status code
func (o *ResetPasswordTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reset password token o k response a status code equal to that given
func (o *ResetPasswordTokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reset password token o k response
func (o *ResetPasswordTokenOK) Code() int {
	return 200
}

func (o *ResetPasswordTokenOK) Error() string {
	return fmt.Sprintf("[PUT /auth/reset-password-token/{UserLogin}][%d] resetPasswordTokenOK  %+v", 200, o.Payload)
}

func (o *ResetPasswordTokenOK) String() string {
	return fmt.Sprintf("[PUT /auth/reset-password-token/{UserLogin}][%d] resetPasswordTokenOK  %+v", 200, o.Payload)
}

func (o *ResetPasswordTokenOK) GetPayload() *models.RestResetPasswordTokenResponse {
	return o.Payload
}

func (o *ResetPasswordTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestResetPasswordTokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetPasswordTokenUnauthorized creates a ResetPasswordTokenUnauthorized with default headers values
func NewResetPasswordTokenUnauthorized() *ResetPasswordTokenUnauthorized {
	return &ResetPasswordTokenUnauthorized{}
}

/*
ResetPasswordTokenUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type ResetPasswordTokenUnauthorized struct {
	Payload *models.RestError
}

// IsSuccess returns true when this reset password token unauthorized response has a 2xx status code
func (o *ResetPasswordTokenUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reset password token unauthorized response has a 3xx status code
func (o *ResetPasswordTokenUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset password token unauthorized response has a 4xx status code
func (o *ResetPasswordTokenUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this reset password token unauthorized response has a 5xx status code
func (o *ResetPasswordTokenUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this reset password token unauthorized response a status code equal to that given
func (o *ResetPasswordTokenUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the reset password token unauthorized response
func (o *ResetPasswordTokenUnauthorized) Code() int {
	return 401
}

func (o *ResetPasswordTokenUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /auth/reset-password-token/{UserLogin}][%d] resetPasswordTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *ResetPasswordTokenUnauthorized) String() string {
	return fmt.Sprintf("[PUT /auth/reset-password-token/{UserLogin}][%d] resetPasswordTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *ResetPasswordTokenUnauthorized) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ResetPasswordTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetPasswordTokenForbidden creates a ResetPasswordTokenForbidden with default headers values
func NewResetPasswordTokenForbidden() *ResetPasswordTokenForbidden {
	return &ResetPasswordTokenForbidden{}
}

/*
ResetPasswordTokenForbidden describes a response with status code 403, with default header values.

User has no permission to access this particular resource
*/
type ResetPasswordTokenForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this reset password token forbidden response has a 2xx status code
func (o *ResetPasswordTokenForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reset password token forbidden response has a 3xx status code
func (o *ResetPasswordTokenForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset password token forbidden response has a 4xx status code
func (o *ResetPasswordTokenForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this reset password token forbidden response has a 5xx status code
func (o *ResetPasswordTokenForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this reset password token forbidden response a status code equal to that given
func (o *ResetPasswordTokenForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the reset password token forbidden response
func (o *ResetPasswordTokenForbidden) Code() int {
	return 403
}

func (o *ResetPasswordTokenForbidden) Error() string {
	return fmt.Sprintf("[PUT /auth/reset-password-token/{UserLogin}][%d] resetPasswordTokenForbidden  %+v", 403, o.Payload)
}

func (o *ResetPasswordTokenForbidden) String() string {
	return fmt.Sprintf("[PUT /auth/reset-password-token/{UserLogin}][%d] resetPasswordTokenForbidden  %+v", 403, o.Payload)
}

func (o *ResetPasswordTokenForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ResetPasswordTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetPasswordTokenNotFound creates a ResetPasswordTokenNotFound with default headers values
func NewResetPasswordTokenNotFound() *ResetPasswordTokenNotFound {
	return &ResetPasswordTokenNotFound{}
}

/*
ResetPasswordTokenNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type ResetPasswordTokenNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this reset password token not found response has a 2xx status code
func (o *ResetPasswordTokenNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reset password token not found response has a 3xx status code
func (o *ResetPasswordTokenNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset password token not found response has a 4xx status code
func (o *ResetPasswordTokenNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this reset password token not found response has a 5xx status code
func (o *ResetPasswordTokenNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this reset password token not found response a status code equal to that given
func (o *ResetPasswordTokenNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the reset password token not found response
func (o *ResetPasswordTokenNotFound) Code() int {
	return 404
}

func (o *ResetPasswordTokenNotFound) Error() string {
	return fmt.Sprintf("[PUT /auth/reset-password-token/{UserLogin}][%d] resetPasswordTokenNotFound  %+v", 404, o.Payload)
}

func (o *ResetPasswordTokenNotFound) String() string {
	return fmt.Sprintf("[PUT /auth/reset-password-token/{UserLogin}][%d] resetPasswordTokenNotFound  %+v", 404, o.Payload)
}

func (o *ResetPasswordTokenNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ResetPasswordTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetPasswordTokenInternalServerError creates a ResetPasswordTokenInternalServerError with default headers values
func NewResetPasswordTokenInternalServerError() *ResetPasswordTokenInternalServerError {
	return &ResetPasswordTokenInternalServerError{}
}

/*
ResetPasswordTokenInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type ResetPasswordTokenInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this reset password token internal server error response has a 2xx status code
func (o *ResetPasswordTokenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reset password token internal server error response has a 3xx status code
func (o *ResetPasswordTokenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset password token internal server error response has a 4xx status code
func (o *ResetPasswordTokenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this reset password token internal server error response has a 5xx status code
func (o *ResetPasswordTokenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this reset password token internal server error response a status code equal to that given
func (o *ResetPasswordTokenInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the reset password token internal server error response
func (o *ResetPasswordTokenInternalServerError) Code() int {
	return 500
}

func (o *ResetPasswordTokenInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /auth/reset-password-token/{UserLogin}][%d] resetPasswordTokenInternalServerError  %+v", 500, o.Payload)
}

func (o *ResetPasswordTokenInternalServerError) String() string {
	return fmt.Sprintf("[PUT /auth/reset-password-token/{UserLogin}][%d] resetPasswordTokenInternalServerError  %+v", 500, o.Payload)
}

func (o *ResetPasswordTokenInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ResetPasswordTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ResetPasswordTokenBody reset password token body
swagger:model ResetPasswordTokenBody
*/
type ResetPasswordTokenBody struct {

	// create
	Create bool `json:"Create,omitempty"`
}

// Validate validates this reset password token body
func (o *ResetPasswordTokenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this reset password token body based on context it is used
func (o *ResetPasswordTokenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ResetPasswordTokenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ResetPasswordTokenBody) UnmarshalBinary(b []byte) error {
	var res ResetPasswordTokenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
