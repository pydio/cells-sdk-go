// Code generated by go-swagger; DO NOT EDIT.

package config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// ImportEncryptionKeyReader is a Reader for the ImportEncryptionKey structure.
type ImportEncryptionKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportEncryptionKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImportEncryptionKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewImportEncryptionKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewImportEncryptionKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewImportEncryptionKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewImportEncryptionKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /config/encryption/import] ImportEncryptionKey", response, response.Code())
	}
}

// NewImportEncryptionKeyOK creates a ImportEncryptionKeyOK with default headers values
func NewImportEncryptionKeyOK() *ImportEncryptionKeyOK {
	return &ImportEncryptionKeyOK{}
}

/*
ImportEncryptionKeyOK describes a response with status code 200, with default header values.

A successful response.
*/
type ImportEncryptionKeyOK struct {
	Payload *models.EncryptionAdminImportKeyResponse
}

// IsSuccess returns true when this import encryption key o k response has a 2xx status code
func (o *ImportEncryptionKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this import encryption key o k response has a 3xx status code
func (o *ImportEncryptionKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import encryption key o k response has a 4xx status code
func (o *ImportEncryptionKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this import encryption key o k response has a 5xx status code
func (o *ImportEncryptionKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this import encryption key o k response a status code equal to that given
func (o *ImportEncryptionKeyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the import encryption key o k response
func (o *ImportEncryptionKeyOK) Code() int {
	return 200
}

func (o *ImportEncryptionKeyOK) Error() string {
	return fmt.Sprintf("[PUT /config/encryption/import][%d] importEncryptionKeyOK  %+v", 200, o.Payload)
}

func (o *ImportEncryptionKeyOK) String() string {
	return fmt.Sprintf("[PUT /config/encryption/import][%d] importEncryptionKeyOK  %+v", 200, o.Payload)
}

func (o *ImportEncryptionKeyOK) GetPayload() *models.EncryptionAdminImportKeyResponse {
	return o.Payload
}

func (o *ImportEncryptionKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EncryptionAdminImportKeyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportEncryptionKeyUnauthorized creates a ImportEncryptionKeyUnauthorized with default headers values
func NewImportEncryptionKeyUnauthorized() *ImportEncryptionKeyUnauthorized {
	return &ImportEncryptionKeyUnauthorized{}
}

/*
ImportEncryptionKeyUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type ImportEncryptionKeyUnauthorized struct {
	Payload *models.RestError
}

// IsSuccess returns true when this import encryption key unauthorized response has a 2xx status code
func (o *ImportEncryptionKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import encryption key unauthorized response has a 3xx status code
func (o *ImportEncryptionKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import encryption key unauthorized response has a 4xx status code
func (o *ImportEncryptionKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this import encryption key unauthorized response has a 5xx status code
func (o *ImportEncryptionKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this import encryption key unauthorized response a status code equal to that given
func (o *ImportEncryptionKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the import encryption key unauthorized response
func (o *ImportEncryptionKeyUnauthorized) Code() int {
	return 401
}

func (o *ImportEncryptionKeyUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /config/encryption/import][%d] importEncryptionKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportEncryptionKeyUnauthorized) String() string {
	return fmt.Sprintf("[PUT /config/encryption/import][%d] importEncryptionKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportEncryptionKeyUnauthorized) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ImportEncryptionKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportEncryptionKeyForbidden creates a ImportEncryptionKeyForbidden with default headers values
func NewImportEncryptionKeyForbidden() *ImportEncryptionKeyForbidden {
	return &ImportEncryptionKeyForbidden{}
}

/*
ImportEncryptionKeyForbidden describes a response with status code 403, with default header values.

User has no permission to access this particular resource
*/
type ImportEncryptionKeyForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this import encryption key forbidden response has a 2xx status code
func (o *ImportEncryptionKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import encryption key forbidden response has a 3xx status code
func (o *ImportEncryptionKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import encryption key forbidden response has a 4xx status code
func (o *ImportEncryptionKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this import encryption key forbidden response has a 5xx status code
func (o *ImportEncryptionKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this import encryption key forbidden response a status code equal to that given
func (o *ImportEncryptionKeyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the import encryption key forbidden response
func (o *ImportEncryptionKeyForbidden) Code() int {
	return 403
}

func (o *ImportEncryptionKeyForbidden) Error() string {
	return fmt.Sprintf("[PUT /config/encryption/import][%d] importEncryptionKeyForbidden  %+v", 403, o.Payload)
}

func (o *ImportEncryptionKeyForbidden) String() string {
	return fmt.Sprintf("[PUT /config/encryption/import][%d] importEncryptionKeyForbidden  %+v", 403, o.Payload)
}

func (o *ImportEncryptionKeyForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ImportEncryptionKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportEncryptionKeyNotFound creates a ImportEncryptionKeyNotFound with default headers values
func NewImportEncryptionKeyNotFound() *ImportEncryptionKeyNotFound {
	return &ImportEncryptionKeyNotFound{}
}

/*
ImportEncryptionKeyNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type ImportEncryptionKeyNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this import encryption key not found response has a 2xx status code
func (o *ImportEncryptionKeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import encryption key not found response has a 3xx status code
func (o *ImportEncryptionKeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import encryption key not found response has a 4xx status code
func (o *ImportEncryptionKeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this import encryption key not found response has a 5xx status code
func (o *ImportEncryptionKeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this import encryption key not found response a status code equal to that given
func (o *ImportEncryptionKeyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the import encryption key not found response
func (o *ImportEncryptionKeyNotFound) Code() int {
	return 404
}

func (o *ImportEncryptionKeyNotFound) Error() string {
	return fmt.Sprintf("[PUT /config/encryption/import][%d] importEncryptionKeyNotFound  %+v", 404, o.Payload)
}

func (o *ImportEncryptionKeyNotFound) String() string {
	return fmt.Sprintf("[PUT /config/encryption/import][%d] importEncryptionKeyNotFound  %+v", 404, o.Payload)
}

func (o *ImportEncryptionKeyNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ImportEncryptionKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportEncryptionKeyInternalServerError creates a ImportEncryptionKeyInternalServerError with default headers values
func NewImportEncryptionKeyInternalServerError() *ImportEncryptionKeyInternalServerError {
	return &ImportEncryptionKeyInternalServerError{}
}

/*
ImportEncryptionKeyInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type ImportEncryptionKeyInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this import encryption key internal server error response has a 2xx status code
func (o *ImportEncryptionKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import encryption key internal server error response has a 3xx status code
func (o *ImportEncryptionKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import encryption key internal server error response has a 4xx status code
func (o *ImportEncryptionKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this import encryption key internal server error response has a 5xx status code
func (o *ImportEncryptionKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this import encryption key internal server error response a status code equal to that given
func (o *ImportEncryptionKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the import encryption key internal server error response
func (o *ImportEncryptionKeyInternalServerError) Code() int {
	return 500
}

func (o *ImportEncryptionKeyInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /config/encryption/import][%d] importEncryptionKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *ImportEncryptionKeyInternalServerError) String() string {
	return fmt.Sprintf("[PUT /config/encryption/import][%d] importEncryptionKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *ImportEncryptionKeyInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ImportEncryptionKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
