// Code generated by go-swagger; DO NOT EDIT.

package config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// PutDataSourceReader is a Reader for the PutDataSource structure.
type PutDataSourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDataSourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDataSourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutDataSourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutDataSourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDataSourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutDataSourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /config/datasource/{Name}] PutDataSource", response, response.Code())
	}
}

// NewPutDataSourceOK creates a PutDataSourceOK with default headers values
func NewPutDataSourceOK() *PutDataSourceOK {
	return &PutDataSourceOK{}
}

/*
PutDataSourceOK describes a response with status code 200, with default header values.

A successful response.
*/
type PutDataSourceOK struct {
	Payload *models.ObjectDataSource
}

// IsSuccess returns true when this put data source o k response has a 2xx status code
func (o *PutDataSourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put data source o k response has a 3xx status code
func (o *PutDataSourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put data source o k response has a 4xx status code
func (o *PutDataSourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put data source o k response has a 5xx status code
func (o *PutDataSourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put data source o k response a status code equal to that given
func (o *PutDataSourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put data source o k response
func (o *PutDataSourceOK) Code() int {
	return 200
}

func (o *PutDataSourceOK) Error() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceOK  %+v", 200, o.Payload)
}

func (o *PutDataSourceOK) String() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceOK  %+v", 200, o.Payload)
}

func (o *PutDataSourceOK) GetPayload() *models.ObjectDataSource {
	return o.Payload
}

func (o *PutDataSourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ObjectDataSource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDataSourceUnauthorized creates a PutDataSourceUnauthorized with default headers values
func NewPutDataSourceUnauthorized() *PutDataSourceUnauthorized {
	return &PutDataSourceUnauthorized{}
}

/*
PutDataSourceUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type PutDataSourceUnauthorized struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put data source unauthorized response has a 2xx status code
func (o *PutDataSourceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put data source unauthorized response has a 3xx status code
func (o *PutDataSourceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put data source unauthorized response has a 4xx status code
func (o *PutDataSourceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put data source unauthorized response has a 5xx status code
func (o *PutDataSourceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put data source unauthorized response a status code equal to that given
func (o *PutDataSourceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put data source unauthorized response
func (o *PutDataSourceUnauthorized) Code() int {
	return 401
}

func (o *PutDataSourceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceUnauthorized  %+v", 401, o.Payload)
}

func (o *PutDataSourceUnauthorized) String() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceUnauthorized  %+v", 401, o.Payload)
}

func (o *PutDataSourceUnauthorized) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutDataSourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDataSourceForbidden creates a PutDataSourceForbidden with default headers values
func NewPutDataSourceForbidden() *PutDataSourceForbidden {
	return &PutDataSourceForbidden{}
}

/*
PutDataSourceForbidden describes a response with status code 403, with default header values.

User has no permission to access this particular resource
*/
type PutDataSourceForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put data source forbidden response has a 2xx status code
func (o *PutDataSourceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put data source forbidden response has a 3xx status code
func (o *PutDataSourceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put data source forbidden response has a 4xx status code
func (o *PutDataSourceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put data source forbidden response has a 5xx status code
func (o *PutDataSourceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put data source forbidden response a status code equal to that given
func (o *PutDataSourceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put data source forbidden response
func (o *PutDataSourceForbidden) Code() int {
	return 403
}

func (o *PutDataSourceForbidden) Error() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceForbidden  %+v", 403, o.Payload)
}

func (o *PutDataSourceForbidden) String() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceForbidden  %+v", 403, o.Payload)
}

func (o *PutDataSourceForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutDataSourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDataSourceNotFound creates a PutDataSourceNotFound with default headers values
func NewPutDataSourceNotFound() *PutDataSourceNotFound {
	return &PutDataSourceNotFound{}
}

/*
PutDataSourceNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type PutDataSourceNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put data source not found response has a 2xx status code
func (o *PutDataSourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put data source not found response has a 3xx status code
func (o *PutDataSourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put data source not found response has a 4xx status code
func (o *PutDataSourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put data source not found response has a 5xx status code
func (o *PutDataSourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put data source not found response a status code equal to that given
func (o *PutDataSourceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put data source not found response
func (o *PutDataSourceNotFound) Code() int {
	return 404
}

func (o *PutDataSourceNotFound) Error() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceNotFound  %+v", 404, o.Payload)
}

func (o *PutDataSourceNotFound) String() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceNotFound  %+v", 404, o.Payload)
}

func (o *PutDataSourceNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutDataSourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDataSourceInternalServerError creates a PutDataSourceInternalServerError with default headers values
func NewPutDataSourceInternalServerError() *PutDataSourceInternalServerError {
	return &PutDataSourceInternalServerError{}
}

/*
PutDataSourceInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type PutDataSourceInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put data source internal server error response has a 2xx status code
func (o *PutDataSourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put data source internal server error response has a 3xx status code
func (o *PutDataSourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put data source internal server error response has a 4xx status code
func (o *PutDataSourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put data source internal server error response has a 5xx status code
func (o *PutDataSourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put data source internal server error response a status code equal to that given
func (o *PutDataSourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the put data source internal server error response
func (o *PutDataSourceInternalServerError) Code() int {
	return 500
}

func (o *PutDataSourceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceInternalServerError  %+v", 500, o.Payload)
}

func (o *PutDataSourceInternalServerError) String() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceInternalServerError  %+v", 500, o.Payload)
}

func (o *PutDataSourceInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutDataSourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutDataSourceBody DataSource Object description
swagger:model PutDataSourceBody
*/
type PutDataSourceBody struct {

	// Corresponding objects service api key
	APIKey string `json:"ApiKey,omitempty"`

	// Corresponding objects service api secret
	APISecret string `json:"ApiSecret,omitempty"`

	// Data Source creation date
	CreationDate int32 `json:"CreationDate,omitempty"`

	// Whether this data source is disabled or running
	Disabled bool `json:"Disabled,omitempty"`

	// Encryption key used for encrypting data
	EncryptionKey string `json:"EncryptionKey,omitempty"`

	// Type of encryption applied before sending data to storage
	EncryptionMode *models.ObjectEncryptionMode `json:"EncryptionMode,omitempty"`

	// Store data in flat format (object-storage like)
	FlatStorage bool `json:"FlatStorage,omitempty"`

	// Data Source last synchronization date
	LastSynchronizationDate int32 `json:"LastSynchronizationDate,omitempty"`

	// Corresponding objects service base folder inside the bucket
	ObjectsBaseFolder string `json:"ObjectsBaseFolder,omitempty"`

	// Corresponding objects service bucket
	ObjectsBucket string `json:"ObjectsBucket,omitempty"`

	// Corresponding objects service host
	ObjectsHost string `json:"ObjectsHost,omitempty"`

	// Corresponding objects service port
	ObjectsPort int32 `json:"ObjectsPort,omitempty"`

	// Corresponding objects service connection type
	ObjectsSecure bool `json:"ObjectsSecure,omitempty"`

	// Corresponding objects service name (underlying s3 service)
	ObjectsServiceName string `json:"ObjectsServiceName,omitempty"`

	// Peer address of the data source
	PeerAddress string `json:"PeerAddress,omitempty"`

	// Do not trigger resync at start
	SkipSyncOnRestart bool `json:"SkipSyncOnRestart,omitempty"`

	// List of key values describing storage configuration
	StorageConfiguration map[string]string `json:"StorageConfiguration,omitempty"`

	// Type of underlying storage (LOCAL, S3, AZURE, GCS)
	StorageType *models.ObjectStorageType `json:"StorageType,omitempty"`

	// Versioning policy describes how files are kept in the versioning queue
	VersioningPolicyName string `json:"VersioningPolicyName,omitempty"`

	// Not implemented, whether to watch for underlying changes on the FS
	Watch bool `json:"Watch,omitempty"`
}

// Validate validates this put data source body
func (o *PutDataSourceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEncryptionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutDataSourceBody) validateEncryptionMode(formats strfmt.Registry) error {
	if swag.IsZero(o.EncryptionMode) { // not required
		return nil
	}

	if o.EncryptionMode != nil {
		if err := o.EncryptionMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "EncryptionMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "EncryptionMode")
			}
			return err
		}
	}

	return nil
}

func (o *PutDataSourceBody) validateStorageType(formats strfmt.Registry) error {
	if swag.IsZero(o.StorageType) { // not required
		return nil
	}

	if o.StorageType != nil {
		if err := o.StorageType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "StorageType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "StorageType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put data source body based on the context it is used
func (o *PutDataSourceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEncryptionMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStorageType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutDataSourceBody) contextValidateEncryptionMode(ctx context.Context, formats strfmt.Registry) error {

	if o.EncryptionMode != nil {

		if swag.IsZero(o.EncryptionMode) { // not required
			return nil
		}

		if err := o.EncryptionMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "EncryptionMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "EncryptionMode")
			}
			return err
		}
	}

	return nil
}

func (o *PutDataSourceBody) contextValidateStorageType(ctx context.Context, formats strfmt.Registry) error {

	if o.StorageType != nil {

		if swag.IsZero(o.StorageType) { // not required
			return nil
		}

		if err := o.StorageType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "StorageType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "StorageType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutDataSourceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDataSourceBody) UnmarshalBinary(b []byte) error {
	var res PutDataSourceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
