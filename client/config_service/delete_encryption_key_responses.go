// Code generated by go-swagger; DO NOT EDIT.

package config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v4/models"
)

// DeleteEncryptionKeyReader is a Reader for the DeleteEncryptionKey structure.
type DeleteEncryptionKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteEncryptionKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteEncryptionKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteEncryptionKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteEncryptionKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteEncryptionKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteEncryptionKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /config/encryption/delete] DeleteEncryptionKey", response, response.Code())
	}
}

// NewDeleteEncryptionKeyOK creates a DeleteEncryptionKeyOK with default headers values
func NewDeleteEncryptionKeyOK() *DeleteEncryptionKeyOK {
	return &DeleteEncryptionKeyOK{}
}

/*
DeleteEncryptionKeyOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteEncryptionKeyOK struct {
	Payload *models.EncryptionAdminDeleteKeyResponse
}

// IsSuccess returns true when this delete encryption key o k response has a 2xx status code
func (o *DeleteEncryptionKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete encryption key o k response has a 3xx status code
func (o *DeleteEncryptionKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete encryption key o k response has a 4xx status code
func (o *DeleteEncryptionKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete encryption key o k response has a 5xx status code
func (o *DeleteEncryptionKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete encryption key o k response a status code equal to that given
func (o *DeleteEncryptionKeyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete encryption key o k response
func (o *DeleteEncryptionKeyOK) Code() int {
	return 200
}

func (o *DeleteEncryptionKeyOK) Error() string {
	return fmt.Sprintf("[POST /config/encryption/delete][%d] deleteEncryptionKeyOK  %+v", 200, o.Payload)
}

func (o *DeleteEncryptionKeyOK) String() string {
	return fmt.Sprintf("[POST /config/encryption/delete][%d] deleteEncryptionKeyOK  %+v", 200, o.Payload)
}

func (o *DeleteEncryptionKeyOK) GetPayload() *models.EncryptionAdminDeleteKeyResponse {
	return o.Payload
}

func (o *DeleteEncryptionKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EncryptionAdminDeleteKeyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEncryptionKeyUnauthorized creates a DeleteEncryptionKeyUnauthorized with default headers values
func NewDeleteEncryptionKeyUnauthorized() *DeleteEncryptionKeyUnauthorized {
	return &DeleteEncryptionKeyUnauthorized{}
}

/*
DeleteEncryptionKeyUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type DeleteEncryptionKeyUnauthorized struct {
}

// IsSuccess returns true when this delete encryption key unauthorized response has a 2xx status code
func (o *DeleteEncryptionKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete encryption key unauthorized response has a 3xx status code
func (o *DeleteEncryptionKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete encryption key unauthorized response has a 4xx status code
func (o *DeleteEncryptionKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete encryption key unauthorized response has a 5xx status code
func (o *DeleteEncryptionKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete encryption key unauthorized response a status code equal to that given
func (o *DeleteEncryptionKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete encryption key unauthorized response
func (o *DeleteEncryptionKeyUnauthorized) Code() int {
	return 401
}

func (o *DeleteEncryptionKeyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /config/encryption/delete][%d] deleteEncryptionKeyUnauthorized ", 401)
}

func (o *DeleteEncryptionKeyUnauthorized) String() string {
	return fmt.Sprintf("[POST /config/encryption/delete][%d] deleteEncryptionKeyUnauthorized ", 401)
}

func (o *DeleteEncryptionKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteEncryptionKeyForbidden creates a DeleteEncryptionKeyForbidden with default headers values
func NewDeleteEncryptionKeyForbidden() *DeleteEncryptionKeyForbidden {
	return &DeleteEncryptionKeyForbidden{}
}

/*
DeleteEncryptionKeyForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type DeleteEncryptionKeyForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this delete encryption key forbidden response has a 2xx status code
func (o *DeleteEncryptionKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete encryption key forbidden response has a 3xx status code
func (o *DeleteEncryptionKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete encryption key forbidden response has a 4xx status code
func (o *DeleteEncryptionKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete encryption key forbidden response has a 5xx status code
func (o *DeleteEncryptionKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete encryption key forbidden response a status code equal to that given
func (o *DeleteEncryptionKeyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete encryption key forbidden response
func (o *DeleteEncryptionKeyForbidden) Code() int {
	return 403
}

func (o *DeleteEncryptionKeyForbidden) Error() string {
	return fmt.Sprintf("[POST /config/encryption/delete][%d] deleteEncryptionKeyForbidden  %+v", 403, o.Payload)
}

func (o *DeleteEncryptionKeyForbidden) String() string {
	return fmt.Sprintf("[POST /config/encryption/delete][%d] deleteEncryptionKeyForbidden  %+v", 403, o.Payload)
}

func (o *DeleteEncryptionKeyForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *DeleteEncryptionKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEncryptionKeyNotFound creates a DeleteEncryptionKeyNotFound with default headers values
func NewDeleteEncryptionKeyNotFound() *DeleteEncryptionKeyNotFound {
	return &DeleteEncryptionKeyNotFound{}
}

/*
DeleteEncryptionKeyNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type DeleteEncryptionKeyNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this delete encryption key not found response has a 2xx status code
func (o *DeleteEncryptionKeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete encryption key not found response has a 3xx status code
func (o *DeleteEncryptionKeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete encryption key not found response has a 4xx status code
func (o *DeleteEncryptionKeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete encryption key not found response has a 5xx status code
func (o *DeleteEncryptionKeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete encryption key not found response a status code equal to that given
func (o *DeleteEncryptionKeyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete encryption key not found response
func (o *DeleteEncryptionKeyNotFound) Code() int {
	return 404
}

func (o *DeleteEncryptionKeyNotFound) Error() string {
	return fmt.Sprintf("[POST /config/encryption/delete][%d] deleteEncryptionKeyNotFound  %+v", 404, o.Payload)
}

func (o *DeleteEncryptionKeyNotFound) String() string {
	return fmt.Sprintf("[POST /config/encryption/delete][%d] deleteEncryptionKeyNotFound  %+v", 404, o.Payload)
}

func (o *DeleteEncryptionKeyNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *DeleteEncryptionKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEncryptionKeyInternalServerError creates a DeleteEncryptionKeyInternalServerError with default headers values
func NewDeleteEncryptionKeyInternalServerError() *DeleteEncryptionKeyInternalServerError {
	return &DeleteEncryptionKeyInternalServerError{}
}

/*
DeleteEncryptionKeyInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type DeleteEncryptionKeyInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this delete encryption key internal server error response has a 2xx status code
func (o *DeleteEncryptionKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete encryption key internal server error response has a 3xx status code
func (o *DeleteEncryptionKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete encryption key internal server error response has a 4xx status code
func (o *DeleteEncryptionKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete encryption key internal server error response has a 5xx status code
func (o *DeleteEncryptionKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete encryption key internal server error response a status code equal to that given
func (o *DeleteEncryptionKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete encryption key internal server error response
func (o *DeleteEncryptionKeyInternalServerError) Code() int {
	return 500
}

func (o *DeleteEncryptionKeyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /config/encryption/delete][%d] deleteEncryptionKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteEncryptionKeyInternalServerError) String() string {
	return fmt.Sprintf("[POST /config/encryption/delete][%d] deleteEncryptionKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteEncryptionKeyInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *DeleteEncryptionKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
