// Code generated by go-swagger; DO NOT EDIT.

package config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new config service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for config service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConfigFormsDiscovery(params *ConfigFormsDiscoveryParams, opts ...ClientOption) (*ConfigFormsDiscoveryOK, error)

	ControlService(params *ControlServiceParams, opts ...ClientOption) (*ControlServiceOK, error)

	CreateEncryptionKey(params *CreateEncryptionKeyParams, opts ...ClientOption) (*CreateEncryptionKeyOK, error)

	CreatePeerFolder(params *CreatePeerFolderParams, opts ...ClientOption) (*CreatePeerFolderOK, error)

	CreateStorageBucket(params *CreateStorageBucketParams, opts ...ClientOption) (*CreateStorageBucketOK, error)

	DeleteDataSource(params *DeleteDataSourceParams, opts ...ClientOption) (*DeleteDataSourceOK, error)

	DeleteEncryptionKey(params *DeleteEncryptionKeyParams, opts ...ClientOption) (*DeleteEncryptionKeyOK, error)

	EndpointsDiscovery(params *EndpointsDiscoveryParams, opts ...ClientOption) (*EndpointsDiscoveryOK, error)

	ExportEncryptionKey(params *ExportEncryptionKeyParams, opts ...ClientOption) (*ExportEncryptionKeyOK, error)

	GetConfig(params *GetConfigParams, opts ...ClientOption) (*GetConfigOK, error)

	GetDataSource(params *GetDataSourceParams, opts ...ClientOption) (*GetDataSourceOK, error)

	GetVersioningPolicy(params *GetVersioningPolicyParams, opts ...ClientOption) (*GetVersioningPolicyOK, error)

	ImportEncryptionKey(params *ImportEncryptionKeyParams, opts ...ClientOption) (*ImportEncryptionKeyOK, error)

	ListDataSources(params *ListDataSourcesParams, opts ...ClientOption) (*ListDataSourcesOK, error)

	ListEncryptionKeys(params *ListEncryptionKeysParams, opts ...ClientOption) (*ListEncryptionKeysOK, error)

	ListPeerFolders(params *ListPeerFoldersParams, opts ...ClientOption) (*ListPeerFoldersOK, error)

	ListPeersAddresses(params *ListPeersAddressesParams, opts ...ClientOption) (*ListPeersAddressesOK, error)

	ListProcesses(params *ListProcessesParams, opts ...ClientOption) (*ListProcessesOK, error)

	ListRegistry(params *ListRegistryParams, opts ...ClientOption) (*ListRegistryOK, error)

	ListServices(params *ListServicesParams, opts ...ClientOption) (*ListServicesOK, error)

	ListSites(params *ListSitesParams, opts ...ClientOption) (*ListSitesOK, error)

	ListStorageBuckets(params *ListStorageBucketsParams, opts ...ClientOption) (*ListStorageBucketsOK, error)

	ListVersioningPolicies(params *ListVersioningPoliciesParams, opts ...ClientOption) (*ListVersioningPoliciesOK, error)

	ListVirtualNodes(params *ListVirtualNodesParams, opts ...ClientOption) (*ListVirtualNodesOK, error)

	OpenAPIDiscovery(params *OpenAPIDiscoveryParams, opts ...ClientOption) (*OpenAPIDiscoveryOK, error)

	PutConfig(params *PutConfigParams, opts ...ClientOption) (*PutConfigOK, error)

	PutDataSource(params *PutDataSourceParams, opts ...ClientOption) (*PutDataSourceOK, error)

	SchedulerActionFormDiscovery(params *SchedulerActionFormDiscoveryParams, opts ...ClientOption) (*SchedulerActionFormDiscoveryOK, error)

	SchedulerActionsDiscovery(params *SchedulerActionsDiscoveryParams, opts ...ClientOption) (*SchedulerActionsDiscoveryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConfigFormsDiscovery publishes forms definition for building screens in frontend
*/
func (a *Client) ConfigFormsDiscovery(params *ConfigFormsDiscoveryParams, opts ...ClientOption) (*ConfigFormsDiscoveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigFormsDiscoveryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConfigFormsDiscovery",
		Method:             "GET",
		PathPattern:        "/config/discovery/forms/{ServiceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ConfigFormsDiscoveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigFormsDiscoveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConfigFormsDiscovery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ControlService nots implemented start stop a service
*/
func (a *Client) ControlService(params *ControlServiceParams, opts ...ClientOption) (*ControlServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControlServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ControlService",
		Method:             "POST",
		PathPattern:        "/config/ctl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ControlServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ControlServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ControlService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateEncryptionKey creates a new master key
*/
func (a *Client) CreateEncryptionKey(params *CreateEncryptionKeyParams, opts ...ClientOption) (*CreateEncryptionKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEncryptionKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateEncryptionKey",
		Method:             "POST",
		PathPattern:        "/config/encryption/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &CreateEncryptionKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEncryptionKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateEncryptionKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePeerFolder creates a folder on a given path for a given peer filesystem
*/
func (a *Client) CreatePeerFolder(params *CreatePeerFolderParams, opts ...ClientOption) (*CreatePeerFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePeerFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePeerFolder",
		Method:             "PUT",
		PathPattern:        "/config/peers/{PeerAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &CreatePeerFolderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePeerFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePeerFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStorageBucket lists buckets on a given object storage
*/
func (a *Client) CreateStorageBucket(params *CreateStorageBucketParams, opts ...ClientOption) (*CreateStorageBucketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageBucketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateStorageBucket",
		Method:             "PUT",
		PathPattern:        "/config/buckets/{BucketName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &CreateStorageBucketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStorageBucketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateStorageBucket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDataSource deletes a datasource
*/
func (a *Client) DeleteDataSource(params *DeleteDataSourceParams, opts ...ClientOption) (*DeleteDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataSource",
		Method:             "DELETE",
		PathPattern:        "/config/datasource/{Name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteDataSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDataSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEncryptionKey deletes an existing master key
*/
func (a *Client) DeleteEncryptionKey(params *DeleteEncryptionKeyParams, opts ...ClientOption) (*DeleteEncryptionKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEncryptionKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEncryptionKey",
		Method:             "POST",
		PathPattern:        "/config/encryption/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteEncryptionKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEncryptionKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEncryptionKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EndpointsDiscovery publishes available endpoints
*/
func (a *Client) EndpointsDiscovery(params *EndpointsDiscoveryParams, opts ...ClientOption) (*EndpointsDiscoveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndpointsDiscoveryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EndpointsDiscovery",
		Method:             "GET",
		PathPattern:        "/config/discovery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &EndpointsDiscoveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EndpointsDiscoveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EndpointsDiscovery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExportEncryptionKey exports a master key for backup purpose protected with a password
*/
func (a *Client) ExportEncryptionKey(params *ExportEncryptionKeyParams, opts ...ClientOption) (*ExportEncryptionKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportEncryptionKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportEncryptionKey",
		Method:             "POST",
		PathPattern:        "/config/encryption/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ExportEncryptionKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportEncryptionKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportEncryptionKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfig generics config get using a full path in the config tree
*/
func (a *Client) GetConfig(params *GetConfigParams, opts ...ClientOption) (*GetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetConfig",
		Method:             "GET",
		PathPattern:        "/config/{FullPath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &GetConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDataSource loads datasource information
*/
func (a *Client) GetDataSource(params *GetDataSourceParams, opts ...ClientOption) (*GetDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataSource",
		Method:             "GET",
		PathPattern:        "/config/datasource/{Name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &GetDataSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDataSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersioningPolicy loads a given versioning policy
*/
func (a *Client) GetVersioningPolicy(params *GetVersioningPolicyParams, opts ...ClientOption) (*GetVersioningPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersioningPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVersioningPolicy",
		Method:             "GET",
		PathPattern:        "/config/versioning/{Uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &GetVersioningPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersioningPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVersioningPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ImportEncryptionKey imports a previously exported master key requires the password created at export time
*/
func (a *Client) ImportEncryptionKey(params *ImportEncryptionKeyParams, opts ...ClientOption) (*ImportEncryptionKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportEncryptionKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImportEncryptionKey",
		Method:             "PUT",
		PathPattern:        "/config/encryption/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ImportEncryptionKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportEncryptionKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImportEncryptionKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListDataSources lists all defined datasources
*/
func (a *Client) ListDataSources(params *ListDataSourcesParams, opts ...ClientOption) (*ListDataSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDataSourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDataSources",
		Method:             "GET",
		PathPattern:        "/config/datasource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListDataSourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDataSourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListDataSources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEncryptionKeys lists registered master keys
*/
func (a *Client) ListEncryptionKeys(params *ListEncryptionKeysParams, opts ...ClientOption) (*ListEncryptionKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEncryptionKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListEncryptionKeys",
		Method:             "POST",
		PathPattern:        "/config/encryption/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListEncryptionKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEncryptionKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListEncryptionKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPeerFolders lists folders on a peer starting from root
*/
func (a *Client) ListPeerFolders(params *ListPeerFoldersParams, opts ...ClientOption) (*ListPeerFoldersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPeerFoldersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPeerFolders",
		Method:             "POST",
		PathPattern:        "/config/peers/{PeerAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListPeerFoldersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPeerFoldersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPeerFolders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPeersAddresses lists all detected peers servers on which the app is running
*/
func (a *Client) ListPeersAddresses(params *ListPeersAddressesParams, opts ...ClientOption) (*ListPeersAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPeersAddressesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPeersAddresses",
		Method:             "GET",
		PathPattern:        "/config/peers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListPeersAddressesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPeersAddressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPeersAddresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProcesses lists running processes with option peer Id or service name filter
*/
func (a *Client) ListProcesses(params *ListProcessesParams, opts ...ClientOption) (*ListProcessesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProcessesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListProcesses",
		Method:             "POST",
		PathPattern:        "/config/processes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListProcessesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProcessesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListProcesses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRegistry list registry API
*/
func (a *Client) ListRegistry(params *ListRegistryParams, opts ...ClientOption) (*ListRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRegistry",
		Method:             "POST",
		PathPattern:        "/config/registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServices lists all services and their status
*/
func (a *Client) ListServices(params *ListServicesParams, opts ...ClientOption) (*ListServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListServices",
		Method:             "GET",
		PathPattern:        "/config/ctl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSites lists configured sites
*/
func (a *Client) ListSites(params *ListSitesParams, opts ...ClientOption) (*ListSitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSitesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListSites",
		Method:             "GET",
		PathPattern:        "/config/sites/{Filter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListSitesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListSites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListStorageBuckets lists buckets on a given object storage
*/
func (a *Client) ListStorageBuckets(params *ListStorageBucketsParams, opts ...ClientOption) (*ListStorageBucketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStorageBucketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListStorageBuckets",
		Method:             "POST",
		PathPattern:        "/config/buckets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListStorageBucketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStorageBucketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListStorageBuckets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListVersioningPolicies lists all defined versioning policies
*/
func (a *Client) ListVersioningPolicies(params *ListVersioningPoliciesParams, opts ...ClientOption) (*ListVersioningPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVersioningPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListVersioningPolicies",
		Method:             "GET",
		PathPattern:        "/config/versioning",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListVersioningPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVersioningPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListVersioningPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListVirtualNodes lists all defined virtual nodes
*/
func (a *Client) ListVirtualNodes(params *ListVirtualNodesParams, opts ...ClientOption) (*ListVirtualNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVirtualNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListVirtualNodes",
		Method:             "GET",
		PathPattern:        "/config/virtualnodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListVirtualNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVirtualNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListVirtualNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OpenAPIDiscovery publishes available r e s t a p is
*/
func (a *Client) OpenAPIDiscovery(params *OpenAPIDiscoveryParams, opts ...ClientOption) (*OpenAPIDiscoveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenAPIDiscoveryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OpenApiDiscovery",
		Method:             "GET",
		PathPattern:        "/config/discovery/openapi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &OpenAPIDiscoveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenAPIDiscoveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OpenApiDiscovery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutConfig generics config put using a full path in the config tree
*/
func (a *Client) PutConfig(params *PutConfigParams, opts ...ClientOption) (*PutConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutConfig",
		Method:             "PUT",
		PathPattern:        "/config/{FullPath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutDataSource creates or update a datasource
*/
func (a *Client) PutDataSource(params *PutDataSourceParams, opts ...ClientOption) (*PutDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutDataSource",
		Method:             "POST",
		PathPattern:        "/config/datasource/{Name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutDataSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutDataSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SchedulerActionFormDiscovery publishes scheduler action XML form for building screens in frontend
*/
func (a *Client) SchedulerActionFormDiscovery(params *SchedulerActionFormDiscoveryParams, opts ...ClientOption) (*SchedulerActionFormDiscoveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerActionFormDiscoveryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SchedulerActionFormDiscovery",
		Method:             "GET",
		PathPattern:        "/config/scheduler/actions/{ActionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &SchedulerActionFormDiscoveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerActionFormDiscoveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SchedulerActionFormDiscovery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SchedulerActionsDiscovery publishes scheduler registered actions
*/
func (a *Client) SchedulerActionsDiscovery(params *SchedulerActionsDiscoveryParams, opts ...ClientOption) (*SchedulerActionsDiscoveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerActionsDiscoveryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SchedulerActionsDiscovery",
		Method:             "GET",
		PathPattern:        "/config/scheduler/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &SchedulerActionsDiscoveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerActionsDiscoveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SchedulerActionsDiscovery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
