// Code generated by go-swagger; DO NOT EDIT.

package config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// ListEncryptionKeysReader is a Reader for the ListEncryptionKeys structure.
type ListEncryptionKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListEncryptionKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListEncryptionKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListEncryptionKeysUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListEncryptionKeysForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListEncryptionKeysNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListEncryptionKeysInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /config/encryption/list] ListEncryptionKeys", response, response.Code())
	}
}

// NewListEncryptionKeysOK creates a ListEncryptionKeysOK with default headers values
func NewListEncryptionKeysOK() *ListEncryptionKeysOK {
	return &ListEncryptionKeysOK{}
}

/*
ListEncryptionKeysOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListEncryptionKeysOK struct {
	Payload *models.EncryptionAdminListKeysResponse
}

// IsSuccess returns true when this list encryption keys o k response has a 2xx status code
func (o *ListEncryptionKeysOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list encryption keys o k response has a 3xx status code
func (o *ListEncryptionKeysOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list encryption keys o k response has a 4xx status code
func (o *ListEncryptionKeysOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list encryption keys o k response has a 5xx status code
func (o *ListEncryptionKeysOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list encryption keys o k response a status code equal to that given
func (o *ListEncryptionKeysOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list encryption keys o k response
func (o *ListEncryptionKeysOK) Code() int {
	return 200
}

func (o *ListEncryptionKeysOK) Error() string {
	return fmt.Sprintf("[POST /config/encryption/list][%d] listEncryptionKeysOK  %+v", 200, o.Payload)
}

func (o *ListEncryptionKeysOK) String() string {
	return fmt.Sprintf("[POST /config/encryption/list][%d] listEncryptionKeysOK  %+v", 200, o.Payload)
}

func (o *ListEncryptionKeysOK) GetPayload() *models.EncryptionAdminListKeysResponse {
	return o.Payload
}

func (o *ListEncryptionKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EncryptionAdminListKeysResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEncryptionKeysUnauthorized creates a ListEncryptionKeysUnauthorized with default headers values
func NewListEncryptionKeysUnauthorized() *ListEncryptionKeysUnauthorized {
	return &ListEncryptionKeysUnauthorized{}
}

/*
ListEncryptionKeysUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type ListEncryptionKeysUnauthorized struct {
}

// IsSuccess returns true when this list encryption keys unauthorized response has a 2xx status code
func (o *ListEncryptionKeysUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list encryption keys unauthorized response has a 3xx status code
func (o *ListEncryptionKeysUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list encryption keys unauthorized response has a 4xx status code
func (o *ListEncryptionKeysUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list encryption keys unauthorized response has a 5xx status code
func (o *ListEncryptionKeysUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list encryption keys unauthorized response a status code equal to that given
func (o *ListEncryptionKeysUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list encryption keys unauthorized response
func (o *ListEncryptionKeysUnauthorized) Code() int {
	return 401
}

func (o *ListEncryptionKeysUnauthorized) Error() string {
	return fmt.Sprintf("[POST /config/encryption/list][%d] listEncryptionKeysUnauthorized ", 401)
}

func (o *ListEncryptionKeysUnauthorized) String() string {
	return fmt.Sprintf("[POST /config/encryption/list][%d] listEncryptionKeysUnauthorized ", 401)
}

func (o *ListEncryptionKeysUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListEncryptionKeysForbidden creates a ListEncryptionKeysForbidden with default headers values
func NewListEncryptionKeysForbidden() *ListEncryptionKeysForbidden {
	return &ListEncryptionKeysForbidden{}
}

/*
ListEncryptionKeysForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type ListEncryptionKeysForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this list encryption keys forbidden response has a 2xx status code
func (o *ListEncryptionKeysForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list encryption keys forbidden response has a 3xx status code
func (o *ListEncryptionKeysForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list encryption keys forbidden response has a 4xx status code
func (o *ListEncryptionKeysForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list encryption keys forbidden response has a 5xx status code
func (o *ListEncryptionKeysForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list encryption keys forbidden response a status code equal to that given
func (o *ListEncryptionKeysForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list encryption keys forbidden response
func (o *ListEncryptionKeysForbidden) Code() int {
	return 403
}

func (o *ListEncryptionKeysForbidden) Error() string {
	return fmt.Sprintf("[POST /config/encryption/list][%d] listEncryptionKeysForbidden  %+v", 403, o.Payload)
}

func (o *ListEncryptionKeysForbidden) String() string {
	return fmt.Sprintf("[POST /config/encryption/list][%d] listEncryptionKeysForbidden  %+v", 403, o.Payload)
}

func (o *ListEncryptionKeysForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ListEncryptionKeysForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEncryptionKeysNotFound creates a ListEncryptionKeysNotFound with default headers values
func NewListEncryptionKeysNotFound() *ListEncryptionKeysNotFound {
	return &ListEncryptionKeysNotFound{}
}

/*
ListEncryptionKeysNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type ListEncryptionKeysNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this list encryption keys not found response has a 2xx status code
func (o *ListEncryptionKeysNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list encryption keys not found response has a 3xx status code
func (o *ListEncryptionKeysNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list encryption keys not found response has a 4xx status code
func (o *ListEncryptionKeysNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list encryption keys not found response has a 5xx status code
func (o *ListEncryptionKeysNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list encryption keys not found response a status code equal to that given
func (o *ListEncryptionKeysNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list encryption keys not found response
func (o *ListEncryptionKeysNotFound) Code() int {
	return 404
}

func (o *ListEncryptionKeysNotFound) Error() string {
	return fmt.Sprintf("[POST /config/encryption/list][%d] listEncryptionKeysNotFound  %+v", 404, o.Payload)
}

func (o *ListEncryptionKeysNotFound) String() string {
	return fmt.Sprintf("[POST /config/encryption/list][%d] listEncryptionKeysNotFound  %+v", 404, o.Payload)
}

func (o *ListEncryptionKeysNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ListEncryptionKeysNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEncryptionKeysInternalServerError creates a ListEncryptionKeysInternalServerError with default headers values
func NewListEncryptionKeysInternalServerError() *ListEncryptionKeysInternalServerError {
	return &ListEncryptionKeysInternalServerError{}
}

/*
ListEncryptionKeysInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type ListEncryptionKeysInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this list encryption keys internal server error response has a 2xx status code
func (o *ListEncryptionKeysInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list encryption keys internal server error response has a 3xx status code
func (o *ListEncryptionKeysInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list encryption keys internal server error response has a 4xx status code
func (o *ListEncryptionKeysInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list encryption keys internal server error response has a 5xx status code
func (o *ListEncryptionKeysInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list encryption keys internal server error response a status code equal to that given
func (o *ListEncryptionKeysInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list encryption keys internal server error response
func (o *ListEncryptionKeysInternalServerError) Code() int {
	return 500
}

func (o *ListEncryptionKeysInternalServerError) Error() string {
	return fmt.Sprintf("[POST /config/encryption/list][%d] listEncryptionKeysInternalServerError  %+v", 500, o.Payload)
}

func (o *ListEncryptionKeysInternalServerError) String() string {
	return fmt.Sprintf("[POST /config/encryption/list][%d] listEncryptionKeysInternalServerError  %+v", 500, o.Payload)
}

func (o *ListEncryptionKeysInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ListEncryptionKeysInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
