// Code generated by go-swagger; DO NOT EDIT.

package config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v4/models"
)

// ListPeersAddressesReader is a Reader for the ListPeersAddresses structure.
type ListPeersAddressesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPeersAddressesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListPeersAddressesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListPeersAddressesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListPeersAddressesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListPeersAddressesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListPeersAddressesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /config/peers] ListPeersAddresses", response, response.Code())
	}
}

// NewListPeersAddressesOK creates a ListPeersAddressesOK with default headers values
func NewListPeersAddressesOK() *ListPeersAddressesOK {
	return &ListPeersAddressesOK{}
}

/*
ListPeersAddressesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListPeersAddressesOK struct {
	Payload *models.RestListPeersAddressesResponse
}

// IsSuccess returns true when this list peers addresses o k response has a 2xx status code
func (o *ListPeersAddressesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list peers addresses o k response has a 3xx status code
func (o *ListPeersAddressesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list peers addresses o k response has a 4xx status code
func (o *ListPeersAddressesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list peers addresses o k response has a 5xx status code
func (o *ListPeersAddressesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list peers addresses o k response a status code equal to that given
func (o *ListPeersAddressesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list peers addresses o k response
func (o *ListPeersAddressesOK) Code() int {
	return 200
}

func (o *ListPeersAddressesOK) Error() string {
	return fmt.Sprintf("[GET /config/peers][%d] listPeersAddressesOK  %+v", 200, o.Payload)
}

func (o *ListPeersAddressesOK) String() string {
	return fmt.Sprintf("[GET /config/peers][%d] listPeersAddressesOK  %+v", 200, o.Payload)
}

func (o *ListPeersAddressesOK) GetPayload() *models.RestListPeersAddressesResponse {
	return o.Payload
}

func (o *ListPeersAddressesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestListPeersAddressesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPeersAddressesUnauthorized creates a ListPeersAddressesUnauthorized with default headers values
func NewListPeersAddressesUnauthorized() *ListPeersAddressesUnauthorized {
	return &ListPeersAddressesUnauthorized{}
}

/*
ListPeersAddressesUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type ListPeersAddressesUnauthorized struct {
}

// IsSuccess returns true when this list peers addresses unauthorized response has a 2xx status code
func (o *ListPeersAddressesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list peers addresses unauthorized response has a 3xx status code
func (o *ListPeersAddressesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list peers addresses unauthorized response has a 4xx status code
func (o *ListPeersAddressesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list peers addresses unauthorized response has a 5xx status code
func (o *ListPeersAddressesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list peers addresses unauthorized response a status code equal to that given
func (o *ListPeersAddressesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list peers addresses unauthorized response
func (o *ListPeersAddressesUnauthorized) Code() int {
	return 401
}

func (o *ListPeersAddressesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /config/peers][%d] listPeersAddressesUnauthorized ", 401)
}

func (o *ListPeersAddressesUnauthorized) String() string {
	return fmt.Sprintf("[GET /config/peers][%d] listPeersAddressesUnauthorized ", 401)
}

func (o *ListPeersAddressesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListPeersAddressesForbidden creates a ListPeersAddressesForbidden with default headers values
func NewListPeersAddressesForbidden() *ListPeersAddressesForbidden {
	return &ListPeersAddressesForbidden{}
}

/*
ListPeersAddressesForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type ListPeersAddressesForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this list peers addresses forbidden response has a 2xx status code
func (o *ListPeersAddressesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list peers addresses forbidden response has a 3xx status code
func (o *ListPeersAddressesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list peers addresses forbidden response has a 4xx status code
func (o *ListPeersAddressesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list peers addresses forbidden response has a 5xx status code
func (o *ListPeersAddressesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list peers addresses forbidden response a status code equal to that given
func (o *ListPeersAddressesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list peers addresses forbidden response
func (o *ListPeersAddressesForbidden) Code() int {
	return 403
}

func (o *ListPeersAddressesForbidden) Error() string {
	return fmt.Sprintf("[GET /config/peers][%d] listPeersAddressesForbidden  %+v", 403, o.Payload)
}

func (o *ListPeersAddressesForbidden) String() string {
	return fmt.Sprintf("[GET /config/peers][%d] listPeersAddressesForbidden  %+v", 403, o.Payload)
}

func (o *ListPeersAddressesForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ListPeersAddressesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPeersAddressesNotFound creates a ListPeersAddressesNotFound with default headers values
func NewListPeersAddressesNotFound() *ListPeersAddressesNotFound {
	return &ListPeersAddressesNotFound{}
}

/*
ListPeersAddressesNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type ListPeersAddressesNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this list peers addresses not found response has a 2xx status code
func (o *ListPeersAddressesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list peers addresses not found response has a 3xx status code
func (o *ListPeersAddressesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list peers addresses not found response has a 4xx status code
func (o *ListPeersAddressesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list peers addresses not found response has a 5xx status code
func (o *ListPeersAddressesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list peers addresses not found response a status code equal to that given
func (o *ListPeersAddressesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list peers addresses not found response
func (o *ListPeersAddressesNotFound) Code() int {
	return 404
}

func (o *ListPeersAddressesNotFound) Error() string {
	return fmt.Sprintf("[GET /config/peers][%d] listPeersAddressesNotFound  %+v", 404, o.Payload)
}

func (o *ListPeersAddressesNotFound) String() string {
	return fmt.Sprintf("[GET /config/peers][%d] listPeersAddressesNotFound  %+v", 404, o.Payload)
}

func (o *ListPeersAddressesNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ListPeersAddressesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPeersAddressesInternalServerError creates a ListPeersAddressesInternalServerError with default headers values
func NewListPeersAddressesInternalServerError() *ListPeersAddressesInternalServerError {
	return &ListPeersAddressesInternalServerError{}
}

/*
ListPeersAddressesInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type ListPeersAddressesInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this list peers addresses internal server error response has a 2xx status code
func (o *ListPeersAddressesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list peers addresses internal server error response has a 3xx status code
func (o *ListPeersAddressesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list peers addresses internal server error response has a 4xx status code
func (o *ListPeersAddressesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list peers addresses internal server error response has a 5xx status code
func (o *ListPeersAddressesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list peers addresses internal server error response a status code equal to that given
func (o *ListPeersAddressesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list peers addresses internal server error response
func (o *ListPeersAddressesInternalServerError) Code() int {
	return 500
}

func (o *ListPeersAddressesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /config/peers][%d] listPeersAddressesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPeersAddressesInternalServerError) String() string {
	return fmt.Sprintf("[GET /config/peers][%d] listPeersAddressesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPeersAddressesInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *ListPeersAddressesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
