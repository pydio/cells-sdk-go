// Code generated by go-swagger; DO NOT EDIT.

package tree_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// CreateSelectionReader is a Reader for the CreateSelection structure.
type CreateSelectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSelectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSelectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateSelectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateSelectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateSelectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateSelectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /tree/selection] CreateSelection", response, response.Code())
	}
}

// NewCreateSelectionOK creates a CreateSelectionOK with default headers values
func NewCreateSelectionOK() *CreateSelectionOK {
	return &CreateSelectionOK{}
}

/*
CreateSelectionOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreateSelectionOK struct {
	Payload *models.RestCreateSelectionResponse
}

// IsSuccess returns true when this create selection o k response has a 2xx status code
func (o *CreateSelectionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create selection o k response has a 3xx status code
func (o *CreateSelectionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create selection o k response has a 4xx status code
func (o *CreateSelectionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create selection o k response has a 5xx status code
func (o *CreateSelectionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create selection o k response a status code equal to that given
func (o *CreateSelectionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create selection o k response
func (o *CreateSelectionOK) Code() int {
	return 200
}

func (o *CreateSelectionOK) Error() string {
	return fmt.Sprintf("[POST /tree/selection][%d] createSelectionOK  %+v", 200, o.Payload)
}

func (o *CreateSelectionOK) String() string {
	return fmt.Sprintf("[POST /tree/selection][%d] createSelectionOK  %+v", 200, o.Payload)
}

func (o *CreateSelectionOK) GetPayload() *models.RestCreateSelectionResponse {
	return o.Payload
}

func (o *CreateSelectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestCreateSelectionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSelectionUnauthorized creates a CreateSelectionUnauthorized with default headers values
func NewCreateSelectionUnauthorized() *CreateSelectionUnauthorized {
	return &CreateSelectionUnauthorized{}
}

/*
CreateSelectionUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type CreateSelectionUnauthorized struct {
	Payload *models.RestError
}

// IsSuccess returns true when this create selection unauthorized response has a 2xx status code
func (o *CreateSelectionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create selection unauthorized response has a 3xx status code
func (o *CreateSelectionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create selection unauthorized response has a 4xx status code
func (o *CreateSelectionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create selection unauthorized response has a 5xx status code
func (o *CreateSelectionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create selection unauthorized response a status code equal to that given
func (o *CreateSelectionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create selection unauthorized response
func (o *CreateSelectionUnauthorized) Code() int {
	return 401
}

func (o *CreateSelectionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /tree/selection][%d] createSelectionUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateSelectionUnauthorized) String() string {
	return fmt.Sprintf("[POST /tree/selection][%d] createSelectionUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateSelectionUnauthorized) GetPayload() *models.RestError {
	return o.Payload
}

func (o *CreateSelectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSelectionForbidden creates a CreateSelectionForbidden with default headers values
func NewCreateSelectionForbidden() *CreateSelectionForbidden {
	return &CreateSelectionForbidden{}
}

/*
CreateSelectionForbidden describes a response with status code 403, with default header values.

User has no permission to access this particular resource
*/
type CreateSelectionForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this create selection forbidden response has a 2xx status code
func (o *CreateSelectionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create selection forbidden response has a 3xx status code
func (o *CreateSelectionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create selection forbidden response has a 4xx status code
func (o *CreateSelectionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create selection forbidden response has a 5xx status code
func (o *CreateSelectionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create selection forbidden response a status code equal to that given
func (o *CreateSelectionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create selection forbidden response
func (o *CreateSelectionForbidden) Code() int {
	return 403
}

func (o *CreateSelectionForbidden) Error() string {
	return fmt.Sprintf("[POST /tree/selection][%d] createSelectionForbidden  %+v", 403, o.Payload)
}

func (o *CreateSelectionForbidden) String() string {
	return fmt.Sprintf("[POST /tree/selection][%d] createSelectionForbidden  %+v", 403, o.Payload)
}

func (o *CreateSelectionForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *CreateSelectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSelectionNotFound creates a CreateSelectionNotFound with default headers values
func NewCreateSelectionNotFound() *CreateSelectionNotFound {
	return &CreateSelectionNotFound{}
}

/*
CreateSelectionNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type CreateSelectionNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this create selection not found response has a 2xx status code
func (o *CreateSelectionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create selection not found response has a 3xx status code
func (o *CreateSelectionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create selection not found response has a 4xx status code
func (o *CreateSelectionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create selection not found response has a 5xx status code
func (o *CreateSelectionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create selection not found response a status code equal to that given
func (o *CreateSelectionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create selection not found response
func (o *CreateSelectionNotFound) Code() int {
	return 404
}

func (o *CreateSelectionNotFound) Error() string {
	return fmt.Sprintf("[POST /tree/selection][%d] createSelectionNotFound  %+v", 404, o.Payload)
}

func (o *CreateSelectionNotFound) String() string {
	return fmt.Sprintf("[POST /tree/selection][%d] createSelectionNotFound  %+v", 404, o.Payload)
}

func (o *CreateSelectionNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *CreateSelectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSelectionInternalServerError creates a CreateSelectionInternalServerError with default headers values
func NewCreateSelectionInternalServerError() *CreateSelectionInternalServerError {
	return &CreateSelectionInternalServerError{}
}

/*
CreateSelectionInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type CreateSelectionInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this create selection internal server error response has a 2xx status code
func (o *CreateSelectionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create selection internal server error response has a 3xx status code
func (o *CreateSelectionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create selection internal server error response has a 4xx status code
func (o *CreateSelectionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create selection internal server error response has a 5xx status code
func (o *CreateSelectionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create selection internal server error response a status code equal to that given
func (o *CreateSelectionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create selection internal server error response
func (o *CreateSelectionInternalServerError) Code() int {
	return 500
}

func (o *CreateSelectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /tree/selection][%d] createSelectionInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateSelectionInternalServerError) String() string {
	return fmt.Sprintf("[POST /tree/selection][%d] createSelectionInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateSelectionInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *CreateSelectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
