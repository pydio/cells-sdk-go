// Code generated by go-swagger; DO NOT EDIT.

package install_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new install service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for install service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAgreement loads a textual agreement for using the software
*/
func (a *Client) GetAgreement(params *GetAgreementParams) (*GetAgreementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgreementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAgreement",
		Method:             "GET",
		PathPattern:        "/install/agreement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &GetAgreementReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAgreementOK), nil

}

/*
GetInstall loads default values for install form
*/
func (a *Client) GetInstall(params *GetInstallParams) (*GetInstallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstall",
		Method:             "GET",
		PathPattern:        "/install",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &GetInstallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstallOK), nil

}

/*
InstallEvents install events API
*/
func (a *Client) InstallEvents(params *InstallEventsParams) (*InstallEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InstallEvents",
		Method:             "GET",
		PathPattern:        "/install/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &InstallEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InstallEventsOK), nil

}

/*
PerformInstallCheck performs a check during install like a valid d b connection
*/
func (a *Client) PerformInstallCheck(params *PerformInstallCheckParams) (*PerformInstallCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformInstallCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PerformInstallCheck",
		Method:             "POST",
		PathPattern:        "/install/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PerformInstallCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PerformInstallCheckOK), nil

}

/*
PostInstall posts values to be saved for install
*/
func (a *Client) PostInstall(params *PostInstallParams) (*PostInstallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInstallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostInstall",
		Method:             "POST",
		PathPattern:        "/install",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PostInstallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostInstallOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
