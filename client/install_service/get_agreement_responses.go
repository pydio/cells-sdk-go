// Code generated by go-swagger; DO NOT EDIT.

package install_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// GetAgreementReader is a Reader for the GetAgreement structure.
type GetAgreementReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAgreementReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAgreementOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAgreementUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAgreementForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAgreementNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAgreementInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /install/agreement] GetAgreement", response, response.Code())
	}
}

// NewGetAgreementOK creates a GetAgreementOK with default headers values
func NewGetAgreementOK() *GetAgreementOK {
	return &GetAgreementOK{}
}

/*
GetAgreementOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetAgreementOK struct {
	Payload *models.InstallGetAgreementResponse
}

// IsSuccess returns true when this get agreement o k response has a 2xx status code
func (o *GetAgreementOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get agreement o k response has a 3xx status code
func (o *GetAgreementOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get agreement o k response has a 4xx status code
func (o *GetAgreementOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get agreement o k response has a 5xx status code
func (o *GetAgreementOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get agreement o k response a status code equal to that given
func (o *GetAgreementOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get agreement o k response
func (o *GetAgreementOK) Code() int {
	return 200
}

func (o *GetAgreementOK) Error() string {
	return fmt.Sprintf("[GET /install/agreement][%d] getAgreementOK  %+v", 200, o.Payload)
}

func (o *GetAgreementOK) String() string {
	return fmt.Sprintf("[GET /install/agreement][%d] getAgreementOK  %+v", 200, o.Payload)
}

func (o *GetAgreementOK) GetPayload() *models.InstallGetAgreementResponse {
	return o.Payload
}

func (o *GetAgreementOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InstallGetAgreementResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAgreementUnauthorized creates a GetAgreementUnauthorized with default headers values
func NewGetAgreementUnauthorized() *GetAgreementUnauthorized {
	return &GetAgreementUnauthorized{}
}

/*
GetAgreementUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type GetAgreementUnauthorized struct {
}

// IsSuccess returns true when this get agreement unauthorized response has a 2xx status code
func (o *GetAgreementUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get agreement unauthorized response has a 3xx status code
func (o *GetAgreementUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get agreement unauthorized response has a 4xx status code
func (o *GetAgreementUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get agreement unauthorized response has a 5xx status code
func (o *GetAgreementUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get agreement unauthorized response a status code equal to that given
func (o *GetAgreementUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get agreement unauthorized response
func (o *GetAgreementUnauthorized) Code() int {
	return 401
}

func (o *GetAgreementUnauthorized) Error() string {
	return fmt.Sprintf("[GET /install/agreement][%d] getAgreementUnauthorized ", 401)
}

func (o *GetAgreementUnauthorized) String() string {
	return fmt.Sprintf("[GET /install/agreement][%d] getAgreementUnauthorized ", 401)
}

func (o *GetAgreementUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAgreementForbidden creates a GetAgreementForbidden with default headers values
func NewGetAgreementForbidden() *GetAgreementForbidden {
	return &GetAgreementForbidden{}
}

/*
GetAgreementForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type GetAgreementForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this get agreement forbidden response has a 2xx status code
func (o *GetAgreementForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get agreement forbidden response has a 3xx status code
func (o *GetAgreementForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get agreement forbidden response has a 4xx status code
func (o *GetAgreementForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get agreement forbidden response has a 5xx status code
func (o *GetAgreementForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get agreement forbidden response a status code equal to that given
func (o *GetAgreementForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get agreement forbidden response
func (o *GetAgreementForbidden) Code() int {
	return 403
}

func (o *GetAgreementForbidden) Error() string {
	return fmt.Sprintf("[GET /install/agreement][%d] getAgreementForbidden  %+v", 403, o.Payload)
}

func (o *GetAgreementForbidden) String() string {
	return fmt.Sprintf("[GET /install/agreement][%d] getAgreementForbidden  %+v", 403, o.Payload)
}

func (o *GetAgreementForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *GetAgreementForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAgreementNotFound creates a GetAgreementNotFound with default headers values
func NewGetAgreementNotFound() *GetAgreementNotFound {
	return &GetAgreementNotFound{}
}

/*
GetAgreementNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type GetAgreementNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this get agreement not found response has a 2xx status code
func (o *GetAgreementNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get agreement not found response has a 3xx status code
func (o *GetAgreementNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get agreement not found response has a 4xx status code
func (o *GetAgreementNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get agreement not found response has a 5xx status code
func (o *GetAgreementNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get agreement not found response a status code equal to that given
func (o *GetAgreementNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get agreement not found response
func (o *GetAgreementNotFound) Code() int {
	return 404
}

func (o *GetAgreementNotFound) Error() string {
	return fmt.Sprintf("[GET /install/agreement][%d] getAgreementNotFound  %+v", 404, o.Payload)
}

func (o *GetAgreementNotFound) String() string {
	return fmt.Sprintf("[GET /install/agreement][%d] getAgreementNotFound  %+v", 404, o.Payload)
}

func (o *GetAgreementNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *GetAgreementNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAgreementInternalServerError creates a GetAgreementInternalServerError with default headers values
func NewGetAgreementInternalServerError() *GetAgreementInternalServerError {
	return &GetAgreementInternalServerError{}
}

/*
GetAgreementInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type GetAgreementInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this get agreement internal server error response has a 2xx status code
func (o *GetAgreementInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get agreement internal server error response has a 3xx status code
func (o *GetAgreementInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get agreement internal server error response has a 4xx status code
func (o *GetAgreementInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get agreement internal server error response has a 5xx status code
func (o *GetAgreementInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get agreement internal server error response a status code equal to that given
func (o *GetAgreementInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get agreement internal server error response
func (o *GetAgreementInternalServerError) Code() int {
	return 500
}

func (o *GetAgreementInternalServerError) Error() string {
	return fmt.Sprintf("[GET /install/agreement][%d] getAgreementInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAgreementInternalServerError) String() string {
	return fmt.Sprintf("[GET /install/agreement][%d] getAgreementInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAgreementInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *GetAgreementInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
