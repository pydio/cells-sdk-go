// Code generated by go-swagger; DO NOT EDIT.

package acl_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// PutACLReader is a Reader for the PutACL structure.
type PutACLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutACLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutACLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutACLUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutACLForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutACLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutACLInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /acl] PutAcl", response, response.Code())
	}
}

// NewPutACLOK creates a PutACLOK with default headers values
func NewPutACLOK() *PutACLOK {
	return &PutACLOK{}
}

/*
PutACLOK describes a response with status code 200, with default header values.

A successful response.
*/
type PutACLOK struct {
	Payload *models.IdmACL
}

// IsSuccess returns true when this put Acl o k response has a 2xx status code
func (o *PutACLOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put Acl o k response has a 3xx status code
func (o *PutACLOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put Acl o k response has a 4xx status code
func (o *PutACLOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put Acl o k response has a 5xx status code
func (o *PutACLOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put Acl o k response a status code equal to that given
func (o *PutACLOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put Acl o k response
func (o *PutACLOK) Code() int {
	return 200
}

func (o *PutACLOK) Error() string {
	return fmt.Sprintf("[PUT /acl][%d] putAclOK  %+v", 200, o.Payload)
}

func (o *PutACLOK) String() string {
	return fmt.Sprintf("[PUT /acl][%d] putAclOK  %+v", 200, o.Payload)
}

func (o *PutACLOK) GetPayload() *models.IdmACL {
	return o.Payload
}

func (o *PutACLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IdmACL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutACLUnauthorized creates a PutACLUnauthorized with default headers values
func NewPutACLUnauthorized() *PutACLUnauthorized {
	return &PutACLUnauthorized{}
}

/*
PutACLUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type PutACLUnauthorized struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put Acl unauthorized response has a 2xx status code
func (o *PutACLUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put Acl unauthorized response has a 3xx status code
func (o *PutACLUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put Acl unauthorized response has a 4xx status code
func (o *PutACLUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put Acl unauthorized response has a 5xx status code
func (o *PutACLUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put Acl unauthorized response a status code equal to that given
func (o *PutACLUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put Acl unauthorized response
func (o *PutACLUnauthorized) Code() int {
	return 401
}

func (o *PutACLUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /acl][%d] putAclUnauthorized  %+v", 401, o.Payload)
}

func (o *PutACLUnauthorized) String() string {
	return fmt.Sprintf("[PUT /acl][%d] putAclUnauthorized  %+v", 401, o.Payload)
}

func (o *PutACLUnauthorized) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutACLUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutACLForbidden creates a PutACLForbidden with default headers values
func NewPutACLForbidden() *PutACLForbidden {
	return &PutACLForbidden{}
}

/*
PutACLForbidden describes a response with status code 403, with default header values.

User has no permission to access this particular resource
*/
type PutACLForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put Acl forbidden response has a 2xx status code
func (o *PutACLForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put Acl forbidden response has a 3xx status code
func (o *PutACLForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put Acl forbidden response has a 4xx status code
func (o *PutACLForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put Acl forbidden response has a 5xx status code
func (o *PutACLForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put Acl forbidden response a status code equal to that given
func (o *PutACLForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put Acl forbidden response
func (o *PutACLForbidden) Code() int {
	return 403
}

func (o *PutACLForbidden) Error() string {
	return fmt.Sprintf("[PUT /acl][%d] putAclForbidden  %+v", 403, o.Payload)
}

func (o *PutACLForbidden) String() string {
	return fmt.Sprintf("[PUT /acl][%d] putAclForbidden  %+v", 403, o.Payload)
}

func (o *PutACLForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutACLForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutACLNotFound creates a PutACLNotFound with default headers values
func NewPutACLNotFound() *PutACLNotFound {
	return &PutACLNotFound{}
}

/*
PutACLNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type PutACLNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put Acl not found response has a 2xx status code
func (o *PutACLNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put Acl not found response has a 3xx status code
func (o *PutACLNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put Acl not found response has a 4xx status code
func (o *PutACLNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put Acl not found response has a 5xx status code
func (o *PutACLNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put Acl not found response a status code equal to that given
func (o *PutACLNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put Acl not found response
func (o *PutACLNotFound) Code() int {
	return 404
}

func (o *PutACLNotFound) Error() string {
	return fmt.Sprintf("[PUT /acl][%d] putAclNotFound  %+v", 404, o.Payload)
}

func (o *PutACLNotFound) String() string {
	return fmt.Sprintf("[PUT /acl][%d] putAclNotFound  %+v", 404, o.Payload)
}

func (o *PutACLNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutACLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutACLInternalServerError creates a PutACLInternalServerError with default headers values
func NewPutACLInternalServerError() *PutACLInternalServerError {
	return &PutACLInternalServerError{}
}

/*
PutACLInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type PutACLInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put Acl internal server error response has a 2xx status code
func (o *PutACLInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put Acl internal server error response has a 3xx status code
func (o *PutACLInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put Acl internal server error response has a 4xx status code
func (o *PutACLInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put Acl internal server error response has a 5xx status code
func (o *PutACLInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put Acl internal server error response a status code equal to that given
func (o *PutACLInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the put Acl internal server error response
func (o *PutACLInternalServerError) Code() int {
	return 500
}

func (o *PutACLInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /acl][%d] putAclInternalServerError  %+v", 500, o.Payload)
}

func (o *PutACLInternalServerError) String() string {
	return fmt.Sprintf("[PUT /acl][%d] putAclInternalServerError  %+v", 500, o.Payload)
}

func (o *PutACLInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutACLInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
