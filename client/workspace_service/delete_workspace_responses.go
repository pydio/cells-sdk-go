// Code generated by go-swagger; DO NOT EDIT.

package workspace_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// DeleteWorkspaceReader is a Reader for the DeleteWorkspace structure.
type DeleteWorkspaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteWorkspaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteWorkspaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteWorkspaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteWorkspaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteWorkspaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteWorkspaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /workspace/{Slug}] DeleteWorkspace", response, response.Code())
	}
}

// NewDeleteWorkspaceOK creates a DeleteWorkspaceOK with default headers values
func NewDeleteWorkspaceOK() *DeleteWorkspaceOK {
	return &DeleteWorkspaceOK{}
}

/*
DeleteWorkspaceOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteWorkspaceOK struct {
	Payload *models.RestDeleteResponse
}

// IsSuccess returns true when this delete workspace o k response has a 2xx status code
func (o *DeleteWorkspaceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete workspace o k response has a 3xx status code
func (o *DeleteWorkspaceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workspace o k response has a 4xx status code
func (o *DeleteWorkspaceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete workspace o k response has a 5xx status code
func (o *DeleteWorkspaceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workspace o k response a status code equal to that given
func (o *DeleteWorkspaceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete workspace o k response
func (o *DeleteWorkspaceOK) Code() int {
	return 200
}

func (o *DeleteWorkspaceOK) Error() string {
	return fmt.Sprintf("[DELETE /workspace/{Slug}][%d] deleteWorkspaceOK  %+v", 200, o.Payload)
}

func (o *DeleteWorkspaceOK) String() string {
	return fmt.Sprintf("[DELETE /workspace/{Slug}][%d] deleteWorkspaceOK  %+v", 200, o.Payload)
}

func (o *DeleteWorkspaceOK) GetPayload() *models.RestDeleteResponse {
	return o.Payload
}

func (o *DeleteWorkspaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestDeleteResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteWorkspaceUnauthorized creates a DeleteWorkspaceUnauthorized with default headers values
func NewDeleteWorkspaceUnauthorized() *DeleteWorkspaceUnauthorized {
	return &DeleteWorkspaceUnauthorized{}
}

/*
DeleteWorkspaceUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type DeleteWorkspaceUnauthorized struct {
	Payload *models.RestError
}

// IsSuccess returns true when this delete workspace unauthorized response has a 2xx status code
func (o *DeleteWorkspaceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete workspace unauthorized response has a 3xx status code
func (o *DeleteWorkspaceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workspace unauthorized response has a 4xx status code
func (o *DeleteWorkspaceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete workspace unauthorized response has a 5xx status code
func (o *DeleteWorkspaceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workspace unauthorized response a status code equal to that given
func (o *DeleteWorkspaceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete workspace unauthorized response
func (o *DeleteWorkspaceUnauthorized) Code() int {
	return 401
}

func (o *DeleteWorkspaceUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /workspace/{Slug}][%d] deleteWorkspaceUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteWorkspaceUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /workspace/{Slug}][%d] deleteWorkspaceUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteWorkspaceUnauthorized) GetPayload() *models.RestError {
	return o.Payload
}

func (o *DeleteWorkspaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteWorkspaceForbidden creates a DeleteWorkspaceForbidden with default headers values
func NewDeleteWorkspaceForbidden() *DeleteWorkspaceForbidden {
	return &DeleteWorkspaceForbidden{}
}

/*
DeleteWorkspaceForbidden describes a response with status code 403, with default header values.

User has no permission to access this particular resource
*/
type DeleteWorkspaceForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this delete workspace forbidden response has a 2xx status code
func (o *DeleteWorkspaceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete workspace forbidden response has a 3xx status code
func (o *DeleteWorkspaceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workspace forbidden response has a 4xx status code
func (o *DeleteWorkspaceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete workspace forbidden response has a 5xx status code
func (o *DeleteWorkspaceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workspace forbidden response a status code equal to that given
func (o *DeleteWorkspaceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete workspace forbidden response
func (o *DeleteWorkspaceForbidden) Code() int {
	return 403
}

func (o *DeleteWorkspaceForbidden) Error() string {
	return fmt.Sprintf("[DELETE /workspace/{Slug}][%d] deleteWorkspaceForbidden  %+v", 403, o.Payload)
}

func (o *DeleteWorkspaceForbidden) String() string {
	return fmt.Sprintf("[DELETE /workspace/{Slug}][%d] deleteWorkspaceForbidden  %+v", 403, o.Payload)
}

func (o *DeleteWorkspaceForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *DeleteWorkspaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteWorkspaceNotFound creates a DeleteWorkspaceNotFound with default headers values
func NewDeleteWorkspaceNotFound() *DeleteWorkspaceNotFound {
	return &DeleteWorkspaceNotFound{}
}

/*
DeleteWorkspaceNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type DeleteWorkspaceNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this delete workspace not found response has a 2xx status code
func (o *DeleteWorkspaceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete workspace not found response has a 3xx status code
func (o *DeleteWorkspaceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workspace not found response has a 4xx status code
func (o *DeleteWorkspaceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete workspace not found response has a 5xx status code
func (o *DeleteWorkspaceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workspace not found response a status code equal to that given
func (o *DeleteWorkspaceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete workspace not found response
func (o *DeleteWorkspaceNotFound) Code() int {
	return 404
}

func (o *DeleteWorkspaceNotFound) Error() string {
	return fmt.Sprintf("[DELETE /workspace/{Slug}][%d] deleteWorkspaceNotFound  %+v", 404, o.Payload)
}

func (o *DeleteWorkspaceNotFound) String() string {
	return fmt.Sprintf("[DELETE /workspace/{Slug}][%d] deleteWorkspaceNotFound  %+v", 404, o.Payload)
}

func (o *DeleteWorkspaceNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *DeleteWorkspaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteWorkspaceInternalServerError creates a DeleteWorkspaceInternalServerError with default headers values
func NewDeleteWorkspaceInternalServerError() *DeleteWorkspaceInternalServerError {
	return &DeleteWorkspaceInternalServerError{}
}

/*
DeleteWorkspaceInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type DeleteWorkspaceInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this delete workspace internal server error response has a 2xx status code
func (o *DeleteWorkspaceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete workspace internal server error response has a 3xx status code
func (o *DeleteWorkspaceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workspace internal server error response has a 4xx status code
func (o *DeleteWorkspaceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete workspace internal server error response has a 5xx status code
func (o *DeleteWorkspaceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete workspace internal server error response a status code equal to that given
func (o *DeleteWorkspaceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete workspace internal server error response
func (o *DeleteWorkspaceInternalServerError) Code() int {
	return 500
}

func (o *DeleteWorkspaceInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /workspace/{Slug}][%d] deleteWorkspaceInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteWorkspaceInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /workspace/{Slug}][%d] deleteWorkspaceInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteWorkspaceInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *DeleteWorkspaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
