// Code generated by go-swagger; DO NOT EDIT.

package user_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pydio/cells-sdk-go/v4/models"
)

// PutUserReader is a Reader for the PutUser structure.
type PutUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /user/{Login}] PutUser", response, response.Code())
	}
}

// NewPutUserOK creates a PutUserOK with default headers values
func NewPutUserOK() *PutUserOK {
	return &PutUserOK{}
}

/*
PutUserOK describes a response with status code 200, with default header values.

A successful response.
*/
type PutUserOK struct {
	Payload *models.IdmUser
}

// IsSuccess returns true when this put user o k response has a 2xx status code
func (o *PutUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put user o k response has a 3xx status code
func (o *PutUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user o k response has a 4xx status code
func (o *PutUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put user o k response has a 5xx status code
func (o *PutUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put user o k response a status code equal to that given
func (o *PutUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put user o k response
func (o *PutUserOK) Code() int {
	return 200
}

func (o *PutUserOK) Error() string {
	return fmt.Sprintf("[PUT /user/{Login}][%d] putUserOK  %+v", 200, o.Payload)
}

func (o *PutUserOK) String() string {
	return fmt.Sprintf("[PUT /user/{Login}][%d] putUserOK  %+v", 200, o.Payload)
}

func (o *PutUserOK) GetPayload() *models.IdmUser {
	return o.Payload
}

func (o *PutUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IdmUser)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserUnauthorized creates a PutUserUnauthorized with default headers values
func NewPutUserUnauthorized() *PutUserUnauthorized {
	return &PutUserUnauthorized{}
}

/*
PutUserUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type PutUserUnauthorized struct {
}

// IsSuccess returns true when this put user unauthorized response has a 2xx status code
func (o *PutUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user unauthorized response has a 3xx status code
func (o *PutUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user unauthorized response has a 4xx status code
func (o *PutUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user unauthorized response has a 5xx status code
func (o *PutUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put user unauthorized response a status code equal to that given
func (o *PutUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put user unauthorized response
func (o *PutUserUnauthorized) Code() int {
	return 401
}

func (o *PutUserUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /user/{Login}][%d] putUserUnauthorized ", 401)
}

func (o *PutUserUnauthorized) String() string {
	return fmt.Sprintf("[PUT /user/{Login}][%d] putUserUnauthorized ", 401)
}

func (o *PutUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUserForbidden creates a PutUserForbidden with default headers values
func NewPutUserForbidden() *PutUserForbidden {
	return &PutUserForbidden{}
}

/*
PutUserForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type PutUserForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put user forbidden response has a 2xx status code
func (o *PutUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user forbidden response has a 3xx status code
func (o *PutUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user forbidden response has a 4xx status code
func (o *PutUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user forbidden response has a 5xx status code
func (o *PutUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put user forbidden response a status code equal to that given
func (o *PutUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put user forbidden response
func (o *PutUserForbidden) Code() int {
	return 403
}

func (o *PutUserForbidden) Error() string {
	return fmt.Sprintf("[PUT /user/{Login}][%d] putUserForbidden  %+v", 403, o.Payload)
}

func (o *PutUserForbidden) String() string {
	return fmt.Sprintf("[PUT /user/{Login}][%d] putUserForbidden  %+v", 403, o.Payload)
}

func (o *PutUserForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserNotFound creates a PutUserNotFound with default headers values
func NewPutUserNotFound() *PutUserNotFound {
	return &PutUserNotFound{}
}

/*
PutUserNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type PutUserNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put user not found response has a 2xx status code
func (o *PutUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user not found response has a 3xx status code
func (o *PutUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user not found response has a 4xx status code
func (o *PutUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user not found response has a 5xx status code
func (o *PutUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put user not found response a status code equal to that given
func (o *PutUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put user not found response
func (o *PutUserNotFound) Code() int {
	return 404
}

func (o *PutUserNotFound) Error() string {
	return fmt.Sprintf("[PUT /user/{Login}][%d] putUserNotFound  %+v", 404, o.Payload)
}

func (o *PutUserNotFound) String() string {
	return fmt.Sprintf("[PUT /user/{Login}][%d] putUserNotFound  %+v", 404, o.Payload)
}

func (o *PutUserNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserInternalServerError creates a PutUserInternalServerError with default headers values
func NewPutUserInternalServerError() *PutUserInternalServerError {
	return &PutUserInternalServerError{}
}

/*
PutUserInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type PutUserInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put user internal server error response has a 2xx status code
func (o *PutUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user internal server error response has a 3xx status code
func (o *PutUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user internal server error response has a 4xx status code
func (o *PutUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put user internal server error response has a 5xx status code
func (o *PutUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put user internal server error response a status code equal to that given
func (o *PutUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the put user internal server error response
func (o *PutUserInternalServerError) Code() int {
	return 500
}

func (o *PutUserInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /user/{Login}][%d] putUserInternalServerError  %+v", 500, o.Payload)
}

func (o *PutUserInternalServerError) String() string {
	return fmt.Sprintf("[PUT /user/{Login}][%d] putUserInternalServerError  %+v", 500, o.Payload)
}

func (o *PutUserInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutUserBody User can represent either a User or a Group
swagger:model PutUserBody
*/
type PutUserBody struct {

	// A free list of attributes
	Attributes map[string]string `json:"Attributes,omitempty"`

	// Label of the group, field is empty for users
	GroupLabel string `json:"GroupLabel,omitempty"`

	// Path to the parent group
	GroupPath string `json:"GroupPath,omitempty"`

	// Whether this object is a group or a user
	IsGroup bool `json:"IsGroup,omitempty"`

	// Last successful connection timestamp
	LastConnected int32 `json:"LastConnected,omitempty"`

	// OldPassword must be set when a user updates her own password
	OldPassword string `json:"OldPassword,omitempty"`

	// Password can be passed to be updated (but never read back), field is empty for groups
	Password string `json:"Password,omitempty"`

	// Policies securing access to this user
	Policies []*models.ServiceResourcePolicy `json:"Policies"`

	// Context-resolved to quickly check if user is editable or not.
	PoliciesContextEditable bool `json:"PoliciesContextEditable,omitempty"`

	// List of roles applied to this user or group
	Roles []*models.IdmRole `json:"Roles"`

	// User unique identifier
	UUID string `json:"Uuid,omitempty"`
}

// Validate validates this put user body
func (o *PutUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutUserBody) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(o.Policies) { // not required
		return nil
	}

	for i := 0; i < len(o.Policies); i++ {
		if swag.IsZero(o.Policies[i]) { // not required
			continue
		}

		if o.Policies[i] != nil {
			if err := o.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PutUserBody) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(o.Roles) { // not required
		return nil
	}

	for i := 0; i < len(o.Roles); i++ {
		if swag.IsZero(o.Roles[i]) { // not required
			continue
		}

		if o.Roles[i] != nil {
			if err := o.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this put user body based on the context it is used
func (o *PutUserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutUserBody) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Policies); i++ {

		if o.Policies[i] != nil {

			if swag.IsZero(o.Policies[i]) { // not required
				return nil
			}

			if err := o.Policies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PutUserBody) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Roles); i++ {

		if o.Roles[i] != nil {

			if swag.IsZero(o.Roles[i]) { // not required
				return nil
			}

			if err := o.Roles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserBody) UnmarshalBinary(b []byte) error {
	var res PutUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
