// Code generated by go-swagger; DO NOT EDIT.

package user_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pydio/cells-sdk-go/v5/models"
)

// PutRolesReader is a Reader for the PutRoles structure.
type PutRolesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRolesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRolesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutRolesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRolesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRolesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutRolesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /user/roles/{Login}] PutRoles", response, response.Code())
	}
}

// NewPutRolesOK creates a PutRolesOK with default headers values
func NewPutRolesOK() *PutRolesOK {
	return &PutRolesOK{}
}

/*
PutRolesOK describes a response with status code 200, with default header values.

A successful response.
*/
type PutRolesOK struct {
	Payload *models.IdmUser
}

// IsSuccess returns true when this put roles o k response has a 2xx status code
func (o *PutRolesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put roles o k response has a 3xx status code
func (o *PutRolesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put roles o k response has a 4xx status code
func (o *PutRolesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put roles o k response has a 5xx status code
func (o *PutRolesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put roles o k response a status code equal to that given
func (o *PutRolesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put roles o k response
func (o *PutRolesOK) Code() int {
	return 200
}

func (o *PutRolesOK) Error() string {
	return fmt.Sprintf("[PUT /user/roles/{Login}][%d] putRolesOK  %+v", 200, o.Payload)
}

func (o *PutRolesOK) String() string {
	return fmt.Sprintf("[PUT /user/roles/{Login}][%d] putRolesOK  %+v", 200, o.Payload)
}

func (o *PutRolesOK) GetPayload() *models.IdmUser {
	return o.Payload
}

func (o *PutRolesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IdmUser)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRolesUnauthorized creates a PutRolesUnauthorized with default headers values
func NewPutRolesUnauthorized() *PutRolesUnauthorized {
	return &PutRolesUnauthorized{}
}

/*
PutRolesUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type PutRolesUnauthorized struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put roles unauthorized response has a 2xx status code
func (o *PutRolesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put roles unauthorized response has a 3xx status code
func (o *PutRolesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put roles unauthorized response has a 4xx status code
func (o *PutRolesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put roles unauthorized response has a 5xx status code
func (o *PutRolesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put roles unauthorized response a status code equal to that given
func (o *PutRolesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put roles unauthorized response
func (o *PutRolesUnauthorized) Code() int {
	return 401
}

func (o *PutRolesUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /user/roles/{Login}][%d] putRolesUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRolesUnauthorized) String() string {
	return fmt.Sprintf("[PUT /user/roles/{Login}][%d] putRolesUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRolesUnauthorized) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutRolesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRolesForbidden creates a PutRolesForbidden with default headers values
func NewPutRolesForbidden() *PutRolesForbidden {
	return &PutRolesForbidden{}
}

/*
PutRolesForbidden describes a response with status code 403, with default header values.

User has no permission to access this particular resource
*/
type PutRolesForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put roles forbidden response has a 2xx status code
func (o *PutRolesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put roles forbidden response has a 3xx status code
func (o *PutRolesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put roles forbidden response has a 4xx status code
func (o *PutRolesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put roles forbidden response has a 5xx status code
func (o *PutRolesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put roles forbidden response a status code equal to that given
func (o *PutRolesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put roles forbidden response
func (o *PutRolesForbidden) Code() int {
	return 403
}

func (o *PutRolesForbidden) Error() string {
	return fmt.Sprintf("[PUT /user/roles/{Login}][%d] putRolesForbidden  %+v", 403, o.Payload)
}

func (o *PutRolesForbidden) String() string {
	return fmt.Sprintf("[PUT /user/roles/{Login}][%d] putRolesForbidden  %+v", 403, o.Payload)
}

func (o *PutRolesForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutRolesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRolesNotFound creates a PutRolesNotFound with default headers values
func NewPutRolesNotFound() *PutRolesNotFound {
	return &PutRolesNotFound{}
}

/*
PutRolesNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type PutRolesNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put roles not found response has a 2xx status code
func (o *PutRolesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put roles not found response has a 3xx status code
func (o *PutRolesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put roles not found response has a 4xx status code
func (o *PutRolesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put roles not found response has a 5xx status code
func (o *PutRolesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put roles not found response a status code equal to that given
func (o *PutRolesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put roles not found response
func (o *PutRolesNotFound) Code() int {
	return 404
}

func (o *PutRolesNotFound) Error() string {
	return fmt.Sprintf("[PUT /user/roles/{Login}][%d] putRolesNotFound  %+v", 404, o.Payload)
}

func (o *PutRolesNotFound) String() string {
	return fmt.Sprintf("[PUT /user/roles/{Login}][%d] putRolesNotFound  %+v", 404, o.Payload)
}

func (o *PutRolesNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutRolesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRolesInternalServerError creates a PutRolesInternalServerError with default headers values
func NewPutRolesInternalServerError() *PutRolesInternalServerError {
	return &PutRolesInternalServerError{}
}

/*
PutRolesInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type PutRolesInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put roles internal server error response has a 2xx status code
func (o *PutRolesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put roles internal server error response has a 3xx status code
func (o *PutRolesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put roles internal server error response has a 4xx status code
func (o *PutRolesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put roles internal server error response has a 5xx status code
func (o *PutRolesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put roles internal server error response a status code equal to that given
func (o *PutRolesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the put roles internal server error response
func (o *PutRolesInternalServerError) Code() int {
	return 500
}

func (o *PutRolesInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /user/roles/{Login}][%d] putRolesInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRolesInternalServerError) String() string {
	return fmt.Sprintf("[PUT /user/roles/{Login}][%d] putRolesInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRolesInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutRolesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutRolesBody User can represent either a User or a Group
swagger:model PutRolesBody
*/
type PutRolesBody struct {

	// A free list of attributes
	Attributes map[string]string `json:"Attributes,omitempty"`

	// Label of the group, field is empty for users
	GroupLabel string `json:"GroupLabel,omitempty"`

	// Path to the parent group
	GroupPath string `json:"GroupPath,omitempty"`

	// Whether this object is a group or a user
	IsGroup bool `json:"IsGroup,omitempty"`

	// Last successful connection timestamp
	LastConnected int32 `json:"LastConnected,omitempty"`

	// OldPassword must be set when a user updates her own password
	OldPassword string `json:"OldPassword,omitempty"`

	// Password can be passed to be updated (but never read back), field is empty for groups
	Password string `json:"Password,omitempty"`

	// Policies securing access to this user
	Policies []*models.ServiceResourcePolicy `json:"Policies"`

	// Context-resolved to quickly check if user is editable or not.
	PoliciesContextEditable bool `json:"PoliciesContextEditable,omitempty"`

	// List of roles applied to this user or group
	Roles []*models.IdmRole `json:"Roles"`

	// User unique identifier
	UUID string `json:"Uuid,omitempty"`
}

// Validate validates this put roles body
func (o *PutRolesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutRolesBody) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(o.Policies) { // not required
		return nil
	}

	for i := 0; i < len(o.Policies); i++ {
		if swag.IsZero(o.Policies[i]) { // not required
			continue
		}

		if o.Policies[i] != nil {
			if err := o.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PutRolesBody) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(o.Roles) { // not required
		return nil
	}

	for i := 0; i < len(o.Roles); i++ {
		if swag.IsZero(o.Roles[i]) { // not required
			continue
		}

		if o.Roles[i] != nil {
			if err := o.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this put roles body based on the context it is used
func (o *PutRolesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutRolesBody) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Policies); i++ {

		if o.Policies[i] != nil {

			if swag.IsZero(o.Policies[i]) { // not required
				return nil
			}

			if err := o.Policies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PutRolesBody) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Roles); i++ {

		if o.Roles[i] != nil {

			if swag.IsZero(o.Roles[i]) { // not required
				return nil
			}

			if err := o.Roles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutRolesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutRolesBody) UnmarshalBinary(b []byte) error {
	var res PutRolesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
