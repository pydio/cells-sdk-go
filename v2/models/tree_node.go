// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TreeNode tree node
// swagger:model treeNode
type TreeNode struct {

	// Can be used for output when node is appearing in multiple workspaces
	AppearsIn []*TreeWorkspaceRelativePath `json:"AppearsIn"`

	// List of successive commits
	Commits []*TreeChangeLog `json:"Commits"`

	// Hash of the content if node is a LEAF, Uuid or
	Etag string `json:"Etag,omitempty"`

	// Last modification Timestamp
	MTime string `json:"MTime,omitempty"`

	// ------------------------------------
	// Then a free K => V representation of any kind of metadata
	// ------------------------------------
	MetaStore map[string]string `json:"MetaStore,omitempty"`

	// Permission mode, like 0777
	Mode int32 `json:"Mode,omitempty"`

	// path
	Path string `json:"Path,omitempty"`

	// Size of the file, or cumulated size of folder
	Size string `json:"Size,omitempty"`

	// type
	Type TreeNodeType `json:"Type,omitempty"`

	// ------------------------------------
	// Core identification of the node
	// ------------------------------------
	UUID string `json:"Uuid,omitempty"`
}

// Validate validates this tree node
func (m *TreeNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppearsIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TreeNode) validateAppearsIn(formats strfmt.Registry) error {

	if swag.IsZero(m.AppearsIn) { // not required
		return nil
	}

	for i := 0; i < len(m.AppearsIn); i++ {
		if swag.IsZero(m.AppearsIn[i]) { // not required
			continue
		}

		if m.AppearsIn[i] != nil {
			if err := m.AppearsIn[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AppearsIn" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TreeNode) validateCommits(formats strfmt.Registry) error {

	if swag.IsZero(m.Commits) { // not required
		return nil
	}

	for i := 0; i < len(m.Commits); i++ {
		if swag.IsZero(m.Commits[i]) { // not required
			continue
		}

		if m.Commits[i] != nil {
			if err := m.Commits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Commits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TreeNode) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TreeNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TreeNode) UnmarshalBinary(b []byte) error {
	var res TreeNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
