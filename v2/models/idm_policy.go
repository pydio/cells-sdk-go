// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IdmPolicy idm policy
// swagger:model idmPolicy
type IdmPolicy struct {

	// actions
	Actions []string `json:"actions"`

	// conditions
	Conditions map[string]IdmPolicyCondition `json:"conditions,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// effect
	Effect IdmPolicyEffect `json:"effect,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// resources
	Resources []string `json:"resources"`

	// subjects
	Subjects []string `json:"subjects"`
}

// Validate validates this idm policy
func (m *IdmPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffect(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdmPolicy) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for k := range m.Conditions {

		if err := validate.Required("conditions"+"."+k, "body", m.Conditions[k]); err != nil {
			return err
		}
		if val, ok := m.Conditions[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IdmPolicy) validateEffect(formats strfmt.Registry) error {

	if swag.IsZero(m.Effect) { // not required
		return nil
	}

	if err := m.Effect.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("effect")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdmPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdmPolicy) UnmarshalBinary(b []byte) error {
	var res IdmPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
