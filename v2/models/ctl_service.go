// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CtlService ctl service
// swagger:model ctlService
type CtlService struct {

	// controllable
	Controllable bool `json:"Controllable,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// running peers
	RunningPeers []*CtlPeer `json:"RunningPeers"`

	// status
	Status CtlServiceStatus `json:"Status,omitempty"`

	// tag
	Tag string `json:"Tag,omitempty"`

	// version
	Version string `json:"Version,omitempty"`
}

// Validate validates this ctl service
func (m *CtlService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunningPeers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CtlService) validateRunningPeers(formats strfmt.Registry) error {

	if swag.IsZero(m.RunningPeers) { // not required
		return nil
	}

	for i := 0; i < len(m.RunningPeers); i++ {
		if swag.IsZero(m.RunningPeers[i]) { // not required
			continue
		}

		if m.RunningPeers[i] != nil {
			if err := m.RunningPeers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RunningPeers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CtlService) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CtlService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CtlService) UnmarshalBinary(b []byte) error {
	var res CtlService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
