// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// CtlServiceStatus ctl service status
// swagger:model ctlServiceStatus
type CtlServiceStatus string

const (

	// CtlServiceStatusANY captures enum value "ANY"
	CtlServiceStatusANY CtlServiceStatus = "ANY"

	// CtlServiceStatusSTOPPED captures enum value "STOPPED"
	CtlServiceStatusSTOPPED CtlServiceStatus = "STOPPED"

	// CtlServiceStatusSTARTING captures enum value "STARTING"
	CtlServiceStatusSTARTING CtlServiceStatus = "STARTING"

	// CtlServiceStatusSTOPPING captures enum value "STOPPING"
	CtlServiceStatusSTOPPING CtlServiceStatus = "STOPPING"

	// CtlServiceStatusSTARTED captures enum value "STARTED"
	CtlServiceStatusSTARTED CtlServiceStatus = "STARTED"
)

// for schema
var ctlServiceStatusEnum []interface{}

func init() {
	var res []CtlServiceStatus
	if err := json.Unmarshal([]byte(`["ANY","STOPPED","STARTING","STOPPING","STARTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ctlServiceStatusEnum = append(ctlServiceStatusEnum, v)
	}
}

func (m CtlServiceStatus) validateCtlServiceStatusEnum(path, location string, value CtlServiceStatus) error {
	if err := validate.Enum(path, location, value, ctlServiceStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this ctl service status
func (m CtlServiceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCtlServiceStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
