// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PackagePackageStatus package package status
// swagger:model PackagePackageStatus
type PackagePackageStatus string

const (

	// PackagePackageStatusDraft captures enum value "Draft"
	PackagePackageStatusDraft PackagePackageStatus = "Draft"

	// PackagePackageStatusPending captures enum value "Pending"
	PackagePackageStatusPending PackagePackageStatus = "Pending"

	// PackagePackageStatusReleased captures enum value "Released"
	PackagePackageStatusReleased PackagePackageStatus = "Released"
)

// for schema
var packagePackageStatusEnum []interface{}

func init() {
	var res []PackagePackageStatus
	if err := json.Unmarshal([]byte(`["Draft","Pending","Released"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packagePackageStatusEnum = append(packagePackageStatusEnum, v)
	}
}

func (m PackagePackageStatus) validatePackagePackageStatusEnum(path, location string, value PackagePackageStatus) error {
	if err := validate.Enum(path, location, value, packagePackageStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this package package status
func (m PackagePackageStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePackagePackageStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
