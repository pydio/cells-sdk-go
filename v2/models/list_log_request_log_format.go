// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ListLogRequestLogFormat Output Format
// swagger:model ListLogRequestLogFormat
type ListLogRequestLogFormat string

const (

	// ListLogRequestLogFormatJSON captures enum value "JSON"
	ListLogRequestLogFormatJSON ListLogRequestLogFormat = "JSON"

	// ListLogRequestLogFormatCSV captures enum value "CSV"
	ListLogRequestLogFormatCSV ListLogRequestLogFormat = "CSV"

	// ListLogRequestLogFormatXLSX captures enum value "XLSX"
	ListLogRequestLogFormatXLSX ListLogRequestLogFormat = "XLSX"
)

// for schema
var listLogRequestLogFormatEnum []interface{}

func init() {
	var res []ListLogRequestLogFormat
	if err := json.Unmarshal([]byte(`["JSON","CSV","XLSX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listLogRequestLogFormatEnum = append(listLogRequestLogFormatEnum, v)
	}
}

func (m ListLogRequestLogFormat) validateListLogRequestLogFormatEnum(path, location string, value ListLogRequestLogFormat) error {
	if err := validate.Enum(path, location, value, listLogRequestLogFormatEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this list log request log format
func (m ListLogRequestLogFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateListLogRequestLogFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
