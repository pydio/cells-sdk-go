// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TreeGeoQuery tree geo query
// swagger:model treeGeoQuery
type TreeGeoQuery struct {

	// bottom right
	BottomRight *TreeGeoPoint `json:"BottomRight,omitempty"`

	// Either use a center point and a distance
	Center *TreeGeoPoint `json:"Center,omitempty"`

	// Example formats supported:
	// "5in" "5inch" "7yd" "7yards" "9ft" "9feet" "11km" "11kilometers"
	// "3nm" "3nauticalmiles" "13mm" "13millimeters" "15cm" "15centimeters"
	// "17mi" "17miles" "19m" "19meters"
	// If the unit cannot be determined, the entire string is parsed and the
	// unit of meters is assumed.
	Distance string `json:"Distance,omitempty"`

	// Or use a bounding box with TopLeft and BottomRight points
	TopLeft *TreeGeoPoint `json:"TopLeft,omitempty"`
}

// Validate validates this tree geo query
func (m *TreeGeoQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBottomRight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopLeft(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TreeGeoQuery) validateBottomRight(formats strfmt.Registry) error {

	if swag.IsZero(m.BottomRight) { // not required
		return nil
	}

	if m.BottomRight != nil {
		if err := m.BottomRight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BottomRight")
			}
			return err
		}
	}

	return nil
}

func (m *TreeGeoQuery) validateCenter(formats strfmt.Registry) error {

	if swag.IsZero(m.Center) { // not required
		return nil
	}

	if m.Center != nil {
		if err := m.Center.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Center")
			}
			return err
		}
	}

	return nil
}

func (m *TreeGeoQuery) validateTopLeft(formats strfmt.Registry) error {

	if swag.IsZero(m.TopLeft) { // not required
		return nil
	}

	if m.TopLeft != nil {
		if err := m.TopLeft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TopLeft")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TreeGeoQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TreeGeoQuery) UnmarshalBinary(b []byte) error {
	var res TreeGeoQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
