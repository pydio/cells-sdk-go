// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RestTemplateNode A template node is representing a file or a folder
// swagger:model restTemplateNode
type RestTemplateNode struct {

	// If stored in binary store, the binary Uuid
	BinaryUUUID string `json:"BinaryUUUID,omitempty"`

	// One or more children
	Children []*RestTemplateNode `json:"Children"`

	// If it's embedded in binary
	EmbedPath string `json:"EmbedPath,omitempty"`

	// Whether it's a file or a folder
	IsFile bool `json:"IsFile,omitempty"`
}

// Validate validates this rest template node
func (m *RestTemplateNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestTemplateNode) validateChildren(formats strfmt.Registry) error {

	if swag.IsZero(m.Children) { // not required
		return nil
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestTemplateNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestTemplateNode) UnmarshalBinary(b []byte) error {
	var res RestTemplateNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
