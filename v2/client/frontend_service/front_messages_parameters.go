// Code generated by go-swagger; DO NOT EDIT.

package frontend_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFrontMessagesParams creates a new FrontMessagesParams object
// with the default values initialized.
func NewFrontMessagesParams() *FrontMessagesParams {
	var ()
	return &FrontMessagesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFrontMessagesParamsWithTimeout creates a new FrontMessagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFrontMessagesParamsWithTimeout(timeout time.Duration) *FrontMessagesParams {
	var ()
	return &FrontMessagesParams{

		timeout: timeout,
	}
}

// NewFrontMessagesParamsWithContext creates a new FrontMessagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewFrontMessagesParamsWithContext(ctx context.Context) *FrontMessagesParams {
	var ()
	return &FrontMessagesParams{

		Context: ctx,
	}
}

// NewFrontMessagesParamsWithHTTPClient creates a new FrontMessagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFrontMessagesParamsWithHTTPClient(client *http.Client) *FrontMessagesParams {
	var ()
	return &FrontMessagesParams{
		HTTPClient: client,
	}
}

/*FrontMessagesParams contains all the parameters to send to the API endpoint
for the front messages operation typically these are written to a http.Request
*/
type FrontMessagesParams struct {

	/*Lang*/
	Lang string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the front messages params
func (o *FrontMessagesParams) WithTimeout(timeout time.Duration) *FrontMessagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the front messages params
func (o *FrontMessagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the front messages params
func (o *FrontMessagesParams) WithContext(ctx context.Context) *FrontMessagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the front messages params
func (o *FrontMessagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the front messages params
func (o *FrontMessagesParams) WithHTTPClient(client *http.Client) *FrontMessagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the front messages params
func (o *FrontMessagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLang adds the lang to the front messages params
func (o *FrontMessagesParams) WithLang(lang string) *FrontMessagesParams {
	o.SetLang(lang)
	return o
}

// SetLang adds the lang to the front messages params
func (o *FrontMessagesParams) SetLang(lang string) {
	o.Lang = lang
}

// WriteToRequest writes these params to a swagger request
func (o *FrontMessagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Lang
	if err := r.SetPathParam("Lang", o.Lang); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
