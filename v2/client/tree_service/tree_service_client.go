// Code generated by go-swagger; DO NOT EDIT.

package tree_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tree service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tree service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
BulkStatNodes lists meta for a list of nodes or a full directory using path syntax
*/
func (a *Client) BulkStatNodes(params *BulkStatNodesParams) (*BulkStatNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkStatNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BulkStatNodes",
		Method:             "POST",
		PathPattern:        "/tree/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &BulkStatNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BulkStatNodesOK), nil

}

/*
CreateNodes creates dirs or empty files inside the tree
*/
func (a *Client) CreateNodes(params *CreateNodesParams) (*CreateNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateNodes",
		Method:             "POST",
		PathPattern:        "/tree/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &CreateNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNodesOK), nil

}

/*
CreateSelection creates a temporary selection for further action namely download
*/
func (a *Client) CreateSelection(params *CreateSelectionParams) (*CreateSelectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSelectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateSelection",
		Method:             "POST",
		PathPattern:        "/tree/selection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &CreateSelectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSelectionOK), nil

}

/*
DeleteNodes handles nodes deletion
*/
func (a *Client) DeleteNodes(params *DeleteNodesParams) (*DeleteNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNodes",
		Method:             "POST",
		PathPattern:        "/tree/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodesOK), nil

}

/*
HeadNode returns node meta without the node content itself
*/
func (a *Client) HeadNode(params *HeadNodeParams) (*HeadNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HeadNode",
		Method:             "GET",
		PathPattern:        "/tree/stat/{Node}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &HeadNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HeadNodeOK), nil

}

/*
RestoreNodes handles nodes restoration from recycle bin
*/
func (a *Client) RestoreNodes(params *RestoreNodesParams) (*RestoreNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RestoreNodes",
		Method:             "POST",
		PathPattern:        "/tree/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &RestoreNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RestoreNodesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
