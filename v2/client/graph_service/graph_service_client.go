// Code generated by go-swagger; DO NOT EDIT.

package graph_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new graph service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for graph service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Relation computes relation of context user with another user
*/
func (a *Client) Relation(params *RelationParams) (*RelationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRelationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Relation",
		Method:             "GET",
		PathPattern:        "/graph/relation/{UserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &RelationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RelationOK), nil

}

/*
UserState computes accessible workspaces for a given user
*/
func (a *Client) UserState(params *UserStateParams) (*UserStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserState",
		Method:             "GET",
		PathPattern:        "/graph/state/{Segment}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &UserStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserStateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
