// Code generated by go-swagger; DO NOT EDIT.

package activity_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new activity service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for activity service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SearchSubscriptions loads subscriptions to other users nodes feeds
*/
func (a *Client) SearchSubscriptions(params *SearchSubscriptionsParams) (*SearchSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchSubscriptions",
		Method:             "POST",
		PathPattern:        "/activity/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &SearchSubscriptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchSubscriptionsOK), nil

}

/*
Stream loads the the feeds of the currently logged user
*/
func (a *Client) Stream(params *StreamParams) (*StreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Stream",
		Method:             "POST",
		PathPattern:        "/activity/stream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &StreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StreamOK), nil

}

/*
Subscribe manages subscriptions to other users nodes feeds
*/
func (a *Client) Subscribe(params *SubscribeParams) (*SubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Subscribe",
		Method:             "POST",
		PathPattern:        "/activity/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &SubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubscribeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
