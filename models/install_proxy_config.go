// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InstallProxyConfig ProxyConfig gives necessary URL and TLS configurations to start proxy
// swagger:model installProxyConfig
type InstallProxyConfig struct {

	// bind URL
	BindURL string `json:"BindURL,omitempty"`

	// certificate
	Certificate *InstallTLSCertificate `json:"Certificate,omitempty"`

	// external URL
	ExternalURL string `json:"ExternalURL,omitempty"`

	// lets encrypt
	LetsEncrypt *InstallTLSLetsEncrypt `json:"LetsEncrypt,omitempty"`

	// redirect urls
	RedirectUrls []string `json:"RedirectURLs"`

	// self signed
	SelfSigned *InstallTLSSelfSigned `json:"SelfSigned,omitempty"`
}

// Validate validates this install proxy config
func (m *InstallProxyConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetsEncrypt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfSigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstallProxyConfig) validateCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Certificate")
			}
			return err
		}
	}

	return nil
}

func (m *InstallProxyConfig) validateLetsEncrypt(formats strfmt.Registry) error {

	if swag.IsZero(m.LetsEncrypt) { // not required
		return nil
	}

	if m.LetsEncrypt != nil {
		if err := m.LetsEncrypt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LetsEncrypt")
			}
			return err
		}
	}

	return nil
}

func (m *InstallProxyConfig) validateSelfSigned(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfSigned) { // not required
		return nil
	}

	if m.SelfSigned != nil {
		if err := m.SelfSigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SelfSigned")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstallProxyConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstallProxyConfig) UnmarshalBinary(b []byte) error {
	var res InstallProxyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
