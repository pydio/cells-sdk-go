// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IdmUserMeta Piece of metadata attached to a node
//
// swagger:model idmUserMeta
type IdmUserMeta struct {

	// Json encoded value used to pass any type of values
	JSONValue string `json:"JsonValue,omitempty"`

	// Namespace for the metadata
	Namespace string `json:"Namespace,omitempty"`

	// Unique identifier of the node to which meta is attached
	NodeUUID string `json:"NodeUuid,omitempty"`

	// Policies for securing access
	Policies []*ServiceResourcePolicy `json:"Policies"`

	// Context-resolved to quickly check if this meta is editable or not
	PoliciesContextEditable bool `json:"PoliciesContextEditable,omitempty"`

	// Pass along resolved Node for advanced filtering
	ResolvedNode *TreeNode `json:"ResolvedNode,omitempty"`

	// Unique identifier of the metadata
	UUID string `json:"Uuid,omitempty"`
}

// Validate validates this idm user meta
func (m *IdmUserMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolvedNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdmUserMeta) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IdmUserMeta) validateResolvedNode(formats strfmt.Registry) error {
	if swag.IsZero(m.ResolvedNode) { // not required
		return nil
	}

	if m.ResolvedNode != nil {
		if err := m.ResolvedNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResolvedNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResolvedNode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this idm user meta based on the context it is used
func (m *IdmUserMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResolvedNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdmUserMeta) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Policies); i++ {

		if m.Policies[i] != nil {

			if swag.IsZero(m.Policies[i]) { // not required
				return nil
			}

			if err := m.Policies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IdmUserMeta) contextValidateResolvedNode(ctx context.Context, formats strfmt.Registry) error {

	if m.ResolvedNode != nil {

		if swag.IsZero(m.ResolvedNode) { // not required
			return nil
		}

		if err := m.ResolvedNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResolvedNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResolvedNode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdmUserMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdmUserMeta) UnmarshalBinary(b []byte) error {
	var res IdmUserMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
