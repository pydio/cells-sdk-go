// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegistryItem registry item
//
// swagger:model registryItem
type RegistryItem struct {

	// adjacents
	Adjacents []*RegistryItem `json:"adjacents"`

	// dao
	Dao *RegistryDao `json:"dao,omitempty"`

	// edge
	Edge *RegistryEdge `json:"edge,omitempty"`

	// generic
	Generic *RegistryGeneric `json:"generic,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// node
	Node *RegistryNode `json:"node,omitempty"`

	// server
	Server *RegistryServer `json:"server,omitempty"`

	// service
	Service *RegistryService `json:"service,omitempty"`
}

// Validate validates this registry item
func (m *RegistryItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjacents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDao(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistryItem) validateAdjacents(formats strfmt.Registry) error {
	if swag.IsZero(m.Adjacents) { // not required
		return nil
	}

	for i := 0; i < len(m.Adjacents); i++ {
		if swag.IsZero(m.Adjacents[i]) { // not required
			continue
		}

		if m.Adjacents[i] != nil {
			if err := m.Adjacents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adjacents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adjacents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegistryItem) validateDao(formats strfmt.Registry) error {
	if swag.IsZero(m.Dao) { // not required
		return nil
	}

	if m.Dao != nil {
		if err := m.Dao.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dao")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dao")
			}
			return err
		}
	}

	return nil
}

func (m *RegistryItem) validateEdge(formats strfmt.Registry) error {
	if swag.IsZero(m.Edge) { // not required
		return nil
	}

	if m.Edge != nil {
		if err := m.Edge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge")
			}
			return err
		}
	}

	return nil
}

func (m *RegistryItem) validateGeneric(formats strfmt.Registry) error {
	if swag.IsZero(m.Generic) { // not required
		return nil
	}

	if m.Generic != nil {
		if err := m.Generic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generic")
			}
			return err
		}
	}

	return nil
}

func (m *RegistryItem) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

func (m *RegistryItem) validateServer(formats strfmt.Registry) error {
	if swag.IsZero(m.Server) { // not required
		return nil
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server")
			}
			return err
		}
	}

	return nil
}

func (m *RegistryItem) validateService(formats strfmt.Registry) error {
	if swag.IsZero(m.Service) { // not required
		return nil
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this registry item based on the context it is used
func (m *RegistryItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdjacents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDao(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeneric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistryItem) contextValidateAdjacents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Adjacents); i++ {

		if m.Adjacents[i] != nil {
			if err := m.Adjacents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adjacents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adjacents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegistryItem) contextValidateDao(ctx context.Context, formats strfmt.Registry) error {

	if m.Dao != nil {
		if err := m.Dao.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dao")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dao")
			}
			return err
		}
	}

	return nil
}

func (m *RegistryItem) contextValidateEdge(ctx context.Context, formats strfmt.Registry) error {

	if m.Edge != nil {
		if err := m.Edge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge")
			}
			return err
		}
	}

	return nil
}

func (m *RegistryItem) contextValidateGeneric(ctx context.Context, formats strfmt.Registry) error {

	if m.Generic != nil {
		if err := m.Generic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generic")
			}
			return err
		}
	}

	return nil
}

func (m *RegistryItem) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

func (m *RegistryItem) contextValidateServer(ctx context.Context, formats strfmt.Registry) error {

	if m.Server != nil {
		if err := m.Server.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server")
			}
			return err
		}
	}

	return nil
}

func (m *RegistryItem) contextValidateService(ctx context.Context, formats strfmt.Registry) error {

	if m.Service != nil {
		if err := m.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegistryItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistryItem) UnmarshalBinary(b []byte) error {
	var res RegistryItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
