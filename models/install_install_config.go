// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InstallInstallConfig install install config
// swagger:model installInstallConfig
type InstallInstallConfig struct {

	// check results
	CheckResults []*InstallCheckResult `json:"CheckResults"`

	// db connection type
	DbConnectionType string `json:"dbConnectionType,omitempty"`

	// db manual d s n
	DbManualDSN string `json:"dbManualDSN,omitempty"`

	// db socket file
	DbSocketFile string `json:"dbSocketFile,omitempty"`

	// db socket name
	DbSocketName string `json:"dbSocketName,omitempty"`

	// db socket password
	DbSocketPassword string `json:"dbSocketPassword,omitempty"`

	// db socket user
	DbSocketUser string `json:"dbSocketUser,omitempty"`

	// db TCP hostname
	DbTCPHostname string `json:"dbTCPHostname,omitempty"`

	// db TCP name
	DbTCPName string `json:"dbTCPName,omitempty"`

	// db TCP password
	DbTCPPassword string `json:"dbTCPPassword,omitempty"`

	// db TCP port
	DbTCPPort string `json:"dbTCPPort,omitempty"`

	// db TCP user
	DbTCPUser string `json:"dbTCPUser,omitempty"`

	// ds folder
	DsFolder string `json:"dsFolder,omitempty"`

	// ds name
	DsName string `json:"dsName,omitempty"`

	// ds port
	DsPort string `json:"dsPort,omitempty"`

	// external d a v
	ExternalDAV string `json:"externalDAV,omitempty"`

	// external dex
	ExternalDex string `json:"externalDex,omitempty"`

	// external dex ID
	ExternalDexID string `json:"externalDexID,omitempty"`

	// external dex secret
	ExternalDexSecret string `json:"externalDexSecret,omitempty"`

	// external front plugins
	ExternalFrontPlugins string `json:"externalFrontPlugins,omitempty"`

	// external gateway
	ExternalGateway string `json:"externalGateway,omitempty"`

	// external micro
	ExternalMicro string `json:"externalMicro,omitempty"`

	// external w o p i
	ExternalWOPI string `json:"externalWOPI,omitempty"`

	// external websocket
	ExternalWebsocket string `json:"externalWebsocket,omitempty"`

	// frontend application title
	FrontendApplicationTitle string `json:"frontendApplicationTitle,omitempty"`

	// frontend default language
	FrontendDefaultLanguage string `json:"frontendDefaultLanguage,omitempty"`

	// frontend hosts
	FrontendHosts string `json:"frontendHosts,omitempty"`

	// frontend login
	FrontendLogin string `json:"frontendLogin,omitempty"`

	// frontend password
	FrontendPassword string `json:"frontendPassword,omitempty"`

	// frontend repeat password
	FrontendRepeatPassword string `json:"frontendRepeatPassword,omitempty"`

	// internal Url
	InternalURL string `json:"internalUrl,omitempty"`

	// license required
	LicenseRequired bool `json:"licenseRequired,omitempty"`

	// license string
	LicenseString string `json:"licenseString,omitempty"`
}

// Validate validates this install install config
func (m *InstallInstallConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstallInstallConfig) validateCheckResults(formats strfmt.Registry) error {

	if swag.IsZero(m.CheckResults) { // not required
		return nil
	}

	for i := 0; i < len(m.CheckResults); i++ {
		if swag.IsZero(m.CheckResults[i]) { // not required
			continue
		}

		if m.CheckResults[i] != nil {
			if err := m.CheckResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CheckResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstallInstallConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstallInstallConfig) UnmarshalBinary(b []byte) error {
	var res InstallInstallConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
