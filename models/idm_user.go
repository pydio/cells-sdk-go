// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IdmUser User can represent either a User or a Group
// swagger:model idmUser
type IdmUser struct {

	// A free list of attributes
	Attributes map[string]string `json:"Attributes,omitempty"`

	// Label of the group, field is empty for users
	GroupLabel string `json:"GroupLabel,omitempty"`

	// Path to the parent group
	GroupPath string `json:"GroupPath,omitempty"`

	// Whether this object is a group or a user
	IsGroup bool `json:"IsGroup,omitempty"`

	// Last successful connection timestamp
	LastConnected int32 `json:"LastConnected,omitempty"`

	// User login is used to connect, field is empty for groups
	Login string `json:"Login,omitempty"`

	// OldPassword must be set when a user updates her own password
	OldPassword string `json:"OldPassword,omitempty"`

	// Password can be passed to be updated (but never read back), field is empty for groups
	Password string `json:"Password,omitempty"`

	// Policies securing access to this user
	Policies []*ServiceResourcePolicy `json:"Policies"`

	// Context-resolved to quickly check if user is editable or not.
	PoliciesContextEditable bool `json:"PoliciesContextEditable,omitempty"`

	// List of roles applied to this user or group
	Roles []*IdmRole `json:"Roles"`

	// User unique identifier
	UUID string `json:"Uuid,omitempty"`
}

// Validate validates this idm user
func (m *IdmUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdmUser) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IdmUser) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdmUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdmUser) UnmarshalBinary(b []byte) error {
	var res IdmUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
