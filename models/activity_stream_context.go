// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ActivityStreamContext activity stream context
//
// swagger:model activityStreamContext
type ActivityStreamContext string

func NewActivityStreamContext(value ActivityStreamContext) *ActivityStreamContext {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ActivityStreamContext.
func (m ActivityStreamContext) Pointer() *ActivityStreamContext {
	return &m
}

const (

	// ActivityStreamContextMYFEED captures enum value "MYFEED"
	ActivityStreamContextMYFEED ActivityStreamContext = "MYFEED"

	// ActivityStreamContextUSERID captures enum value "USER_ID"
	ActivityStreamContextUSERID ActivityStreamContext = "USER_ID"

	// ActivityStreamContextNODEID captures enum value "NODE_ID"
	ActivityStreamContextNODEID ActivityStreamContext = "NODE_ID"
)

// for schema
var activityStreamContextEnum []interface{}

func init() {
	var res []ActivityStreamContext
	if err := json.Unmarshal([]byte(`["MYFEED","USER_ID","NODE_ID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		activityStreamContextEnum = append(activityStreamContextEnum, v)
	}
}

func (m ActivityStreamContext) validateActivityStreamContextEnum(path, location string, value ActivityStreamContext) error {
	if err := validate.EnumCase(path, location, value, activityStreamContextEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this activity stream context
func (m ActivityStreamContext) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateActivityStreamContextEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this activity stream context based on context it is used
func (m ActivityStreamContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
