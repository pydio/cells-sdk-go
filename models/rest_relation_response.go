// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestRelationResponse rest relation response
//
// swagger:model restRelationResponse
type RestRelationResponse struct {

	// belongs to teams
	BelongsToTeams []*IdmRole `json:"BelongsToTeams"`

	// shared cells
	SharedCells []*IdmWorkspace `json:"SharedCells"`
}

// Validate validates this rest relation response
func (m *RestRelationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBelongsToTeams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedCells(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestRelationResponse) validateBelongsToTeams(formats strfmt.Registry) error {
	if swag.IsZero(m.BelongsToTeams) { // not required
		return nil
	}

	for i := 0; i < len(m.BelongsToTeams); i++ {
		if swag.IsZero(m.BelongsToTeams[i]) { // not required
			continue
		}

		if m.BelongsToTeams[i] != nil {
			if err := m.BelongsToTeams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BelongsToTeams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("BelongsToTeams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestRelationResponse) validateSharedCells(formats strfmt.Registry) error {
	if swag.IsZero(m.SharedCells) { // not required
		return nil
	}

	for i := 0; i < len(m.SharedCells); i++ {
		if swag.IsZero(m.SharedCells[i]) { // not required
			continue
		}

		if m.SharedCells[i] != nil {
			if err := m.SharedCells[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SharedCells" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SharedCells" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this rest relation response based on the context it is used
func (m *RestRelationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBelongsToTeams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharedCells(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestRelationResponse) contextValidateBelongsToTeams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BelongsToTeams); i++ {

		if m.BelongsToTeams[i] != nil {

			if swag.IsZero(m.BelongsToTeams[i]) { // not required
				return nil
			}

			if err := m.BelongsToTeams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BelongsToTeams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("BelongsToTeams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestRelationResponse) contextValidateSharedCells(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SharedCells); i++ {

		if m.SharedCells[i] != nil {

			if swag.IsZero(m.SharedCells[i]) { // not required
				return nil
			}

			if err := m.SharedCells[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SharedCells" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SharedCells" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestRelationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestRelationResponse) UnmarshalBinary(b []byte) error {
	var res RestRelationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
