// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RestFrontSessionResponse rest front session response
// swagger:model restFrontSessionResponse
type RestFrontSessionResponse struct {

	// error
	Error string `json:"Error,omitempty"`

	// expire time
	ExpireTime int32 `json:"ExpireTime,omitempty"`

	// Legacy information (now in token)
	JWT string `json:"JWT,omitempty"`

	// redirect to
	RedirectTo string `json:"RedirectTo,omitempty"`

	// token
	Token *AuthToken `json:"Token,omitempty"`

	// Trigger a specific Auth step
	Trigger string `json:"Trigger,omitempty"`

	// Additional data for the trigger
	TriggerInfo map[string]string `json:"TriggerInfo,omitempty"`
}

// Validate validates this rest front session response
func (m *RestFrontSessionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestFrontSessionResponse) validateToken(formats strfmt.Registry) error {

	if swag.IsZero(m.Token) { // not required
		return nil
	}

	if m.Token != nil {
		if err := m.Token.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Token")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestFrontSessionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestFrontSessionResponse) UnmarshalBinary(b []byte) error {
	var res RestFrontSessionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
