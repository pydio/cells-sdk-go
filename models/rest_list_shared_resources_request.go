// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestListSharedResourcesRequest rest list shared resources request
//
// swagger:model restListSharedResourcesRequest
type RestListSharedResourcesRequest struct {

	// Limit number of results
	Limit int32 `json:"Limit,omitempty"`

	// Start listing at a given offset
	Offset int32 `json:"Offset,omitempty"`

	// If true, will also check filter the output to shares actually owned by subject
	OwnedBySubject bool `json:"OwnedBySubject,omitempty"`

	// Filter output to a given type
	ShareType *ListSharedResourcesRequestListShareType `json:"ShareType,omitempty"`

	// Will restrict the list to the shares readable by a specific subject.
	// In user-context, current user is used by default. In admin-context, this can
	// be any resource policy subject
	Subject string `json:"Subject,omitempty"`
}

// Validate validates this rest list shared resources request
func (m *RestListSharedResourcesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShareType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestListSharedResourcesRequest) validateShareType(formats strfmt.Registry) error {
	if swag.IsZero(m.ShareType) { // not required
		return nil
	}

	if m.ShareType != nil {
		if err := m.ShareType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShareType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShareType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rest list shared resources request based on the context it is used
func (m *RestListSharedResourcesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShareType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestListSharedResourcesRequest) contextValidateShareType(ctx context.Context, formats strfmt.Registry) error {

	if m.ShareType != nil {

		if swag.IsZero(m.ShareType) { // not required
			return nil
		}

		if err := m.ShareType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShareType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShareType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestListSharedResourcesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestListSharedResourcesRequest) UnmarshalBinary(b []byte) error {
	var res RestListSharedResourcesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
