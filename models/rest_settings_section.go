// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestSettingsSection rest settings section
//
// swagger:model restSettingsSection
type RestSettingsSection struct {

	// c h i l d r e n
	CHILDREN []*RestSettingsEntry `json:"CHILDREN"`

	// d e s c r IP t i o n
	DESCRIPTION string `json:"DESCRIPTION,omitempty"`

	// key
	Key string `json:"Key,omitempty"`

	// l a b e l
	LABEL string `json:"LABEL,omitempty"`
}

// Validate validates this rest settings section
func (m *RestSettingsSection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCHILDREN(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestSettingsSection) validateCHILDREN(formats strfmt.Registry) error {
	if swag.IsZero(m.CHILDREN) { // not required
		return nil
	}

	for i := 0; i < len(m.CHILDREN); i++ {
		if swag.IsZero(m.CHILDREN[i]) { // not required
			continue
		}

		if m.CHILDREN[i] != nil {
			if err := m.CHILDREN[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CHILDREN" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CHILDREN" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this rest settings section based on the context it is used
func (m *RestSettingsSection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCHILDREN(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestSettingsSection) contextValidateCHILDREN(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CHILDREN); i++ {

		if m.CHILDREN[i] != nil {

			if swag.IsZero(m.CHILDREN[i]) { // not required
				return nil
			}

			if err := m.CHILDREN[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CHILDREN" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CHILDREN" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestSettingsSection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestSettingsSection) UnmarshalBinary(b []byte) error {
	var res RestSettingsSection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
