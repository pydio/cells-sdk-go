// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MailerMail mailer mail
//
// swagger:model mailerMail
type MailerMail struct {

	// List of attachments
	Attachments []string `json:"Attachments"`

	// List of target users to put in CC
	Cc []*MailerUser `json:"Cc"`

	// HTML content used for the body
	ContentHTML string `json:"ContentHtml,omitempty"`

	// Markdown content used for the body
	ContentMarkdown string `json:"ContentMarkdown,omitempty"`

	// Plain-text content used for the body, if not set will be generated from the ContentHtml
	ContentPlain string `json:"ContentPlain,omitempty"`

	// Date of sending
	DateSent string `json:"DateSent,omitempty"`

	// User object used to compute the From header
	From *MailerUser `json:"From,omitempty"`

	// Number of retries after failed attempts (used internally)
	Retries int32 `json:"Retries,omitempty"`

	// User object used to compute the Sender header
	Sender *MailerUser `json:"Sender,omitempty"`

	// String used as subject for the email
	Subject string `json:"Subject,omitempty"`

	// Key/values to pass to the template
	TemplateData map[string]string `json:"TemplateData,omitempty"`

	// Mail Template Id refers to predefined templates
	TemplateID string `json:"TemplateId,omitempty"`

	// Not used, could be used to create conversations
	ThreadIndex string `json:"ThreadIndex,omitempty"`

	// Not used, could be used to create conversations
	ThreadUUID string `json:"ThreadUuid,omitempty"`

	// List of target users to send the mail to
	To []*MailerUser `json:"To"`

	// Errors stacked on failed attempts
	SendErrors []string `json:"sendErrors"`
}

// Validate validates this mailer mail
func (m *MailerMail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MailerMail) validateCc(formats strfmt.Registry) error {
	if swag.IsZero(m.Cc) { // not required
		return nil
	}

	for i := 0; i < len(m.Cc); i++ {
		if swag.IsZero(m.Cc[i]) { // not required
			continue
		}

		if m.Cc[i] != nil {
			if err := m.Cc[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Cc" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Cc" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MailerMail) validateFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.From) { // not required
		return nil
	}

	if m.From != nil {
		if err := m.From.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("From")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("From")
			}
			return err
		}
	}

	return nil
}

func (m *MailerMail) validateSender(formats strfmt.Registry) error {
	if swag.IsZero(m.Sender) { // not required
		return nil
	}

	if m.Sender != nil {
		if err := m.Sender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Sender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Sender")
			}
			return err
		}
	}

	return nil
}

func (m *MailerMail) validateTo(formats strfmt.Registry) error {
	if swag.IsZero(m.To) { // not required
		return nil
	}

	for i := 0; i < len(m.To); i++ {
		if swag.IsZero(m.To[i]) { // not required
			continue
		}

		if m.To[i] != nil {
			if err := m.To[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("To" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("To" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mailer mail based on the context it is used
func (m *MailerMail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSender(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MailerMail) contextValidateCc(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Cc); i++ {

		if m.Cc[i] != nil {

			if swag.IsZero(m.Cc[i]) { // not required
				return nil
			}

			if err := m.Cc[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Cc" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Cc" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MailerMail) contextValidateFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.From != nil {

		if swag.IsZero(m.From) { // not required
			return nil
		}

		if err := m.From.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("From")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("From")
			}
			return err
		}
	}

	return nil
}

func (m *MailerMail) contextValidateSender(ctx context.Context, formats strfmt.Registry) error {

	if m.Sender != nil {

		if swag.IsZero(m.Sender) { // not required
			return nil
		}

		if err := m.Sender.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Sender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Sender")
			}
			return err
		}
	}

	return nil
}

func (m *MailerMail) contextValidateTo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.To); i++ {

		if m.To[i] != nil {

			if swag.IsZero(m.To[i]) { // not required
				return nil
			}

			if err := m.To[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("To" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("To" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MailerMail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MailerMail) UnmarshalBinary(b []byte) error {
	var res MailerMail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
