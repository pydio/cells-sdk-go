// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IdmWorkspace A Workspace is composed of a set of nodes UUIDs and is used to provide accesses to the tree via ACLs.
//
// swagger:model idmWorkspace
type IdmWorkspace struct {

	// JSON-encoded list of attributes
	Attributes string `json:"Attributes,omitempty"`

	// Description of the workspace (max length 1000)
	Description string `json:"Description,omitempty"`

	// Label of the workspace (max length 500)
	Label string `json:"Label,omitempty"`

	// Last modification time
	LastUpdated int32 `json:"LastUpdated,omitempty"`

	// Policies for securing access
	Policies []*ServiceResourcePolicy `json:"Policies"`

	// Context-resolved to quickly check if workspace is editable or not
	PoliciesContextEditable bool `json:"PoliciesContextEditable,omitempty"`

	// List of the Root Nodes in the tree that compose this workspace
	RootNodes map[string]TreeNode `json:"RootNodes,omitempty"`

	// Quick list of the RootNodes uuids
	RootUUIDs []string `json:"RootUUIDs"`

	// Scope can be ADMIN, ROOM (=CELL) or LINK
	Scope *IdmWorkspaceScope `json:"Scope,omitempty"`

	// Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)
	Slug string `json:"Slug,omitempty"`

	// Unique identifier of the workspace
	UUID string `json:"UUID,omitempty"`
}

// Validate validates this idm workspace
func (m *IdmWorkspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdmWorkspace) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IdmWorkspace) validateRootNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.RootNodes) { // not required
		return nil
	}

	for k := range m.RootNodes {

		if err := validate.Required("RootNodes"+"."+k, "body", m.RootNodes[k]); err != nil {
			return err
		}
		if val, ok := m.RootNodes[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RootNodes" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("RootNodes" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *IdmWorkspace) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Scope")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this idm workspace based on the context it is used
func (m *IdmWorkspace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdmWorkspace) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Policies); i++ {

		if m.Policies[i] != nil {

			if swag.IsZero(m.Policies[i]) { // not required
				return nil
			}

			if err := m.Policies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IdmWorkspace) contextValidateRootNodes(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.RootNodes {

		if val, ok := m.RootNodes[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IdmWorkspace) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {

		if swag.IsZero(m.Scope) { // not required
			return nil
		}

		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Scope")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdmWorkspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdmWorkspace) UnmarshalBinary(b []byte) error {
	var res IdmWorkspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
