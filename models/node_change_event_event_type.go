// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// NodeChangeEventEventType node change event event type
// swagger:model NodeChangeEventEventType
type NodeChangeEventEventType string

const (

	// NodeChangeEventEventTypeCREATE captures enum value "CREATE"
	NodeChangeEventEventTypeCREATE NodeChangeEventEventType = "CREATE"

	// NodeChangeEventEventTypeREAD captures enum value "READ"
	NodeChangeEventEventTypeREAD NodeChangeEventEventType = "READ"

	// NodeChangeEventEventTypeUPDATEPATH captures enum value "UPDATE_PATH"
	NodeChangeEventEventTypeUPDATEPATH NodeChangeEventEventType = "UPDATE_PATH"

	// NodeChangeEventEventTypeUPDATECONTENT captures enum value "UPDATE_CONTENT"
	NodeChangeEventEventTypeUPDATECONTENT NodeChangeEventEventType = "UPDATE_CONTENT"

	// NodeChangeEventEventTypeUPDATEMETA captures enum value "UPDATE_META"
	NodeChangeEventEventTypeUPDATEMETA NodeChangeEventEventType = "UPDATE_META"

	// NodeChangeEventEventTypeUPDATEUSERMETA captures enum value "UPDATE_USER_META"
	NodeChangeEventEventTypeUPDATEUSERMETA NodeChangeEventEventType = "UPDATE_USER_META"

	// NodeChangeEventEventTypeDELETE captures enum value "DELETE"
	NodeChangeEventEventTypeDELETE NodeChangeEventEventType = "DELETE"
)

// for schema
var nodeChangeEventEventTypeEnum []interface{}

func init() {
	var res []NodeChangeEventEventType
	if err := json.Unmarshal([]byte(`["CREATE","READ","UPDATE_PATH","UPDATE_CONTENT","UPDATE_META","UPDATE_USER_META","DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeChangeEventEventTypeEnum = append(nodeChangeEventEventTypeEnum, v)
	}
}

func (m NodeChangeEventEventType) validateNodeChangeEventEventTypeEnum(path, location string, value NodeChangeEventEventType) error {
	if err := validate.Enum(path, location, value, nodeChangeEventEventTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this node change event event type
func (m NodeChangeEventEventType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNodeChangeEventEventTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
