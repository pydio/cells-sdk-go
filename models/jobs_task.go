// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JobsTask jobs task
//
// swagger:model jobsTask
type JobsTask struct {

	// Logs of all the actions performed
	ActionsLogs []*JobsActionLog `json:"ActionsLogs"`

	// Can be paused/resumed
	CanPause bool `json:"CanPause,omitempty"`

	// Can be interrupted
	CanStop bool `json:"CanStop,omitempty"`

	// end time
	EndTime int32 `json:"EndTime,omitempty"`

	// Tasks publish a progress
	HasProgress bool `json:"HasProgress,omitempty"`

	// ID
	ID string `json:"ID,omitempty"`

	// job ID
	JobID string `json:"JobID,omitempty"`

	// Float value of the progress between 0 and 1
	Progress float32 `json:"Progress,omitempty"`

	// start time
	StartTime int32 `json:"StartTime,omitempty"`

	// status
	Status *JobsTaskStatus `json:"Status,omitempty"`

	// status message
	StatusMessage string `json:"StatusMessage,omitempty"`

	// trigger owner
	TriggerOwner string `json:"TriggerOwner,omitempty"`
}

// Validate validates this jobs task
func (m *JobsTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionsLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobsTask) validateActionsLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionsLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionsLogs); i++ {
		if swag.IsZero(m.ActionsLogs[i]) { // not required
			continue
		}

		if m.ActionsLogs[i] != nil {
			if err := m.ActionsLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ActionsLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ActionsLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JobsTask) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this jobs task based on the context it is used
func (m *JobsTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActionsLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobsTask) contextValidateActionsLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActionsLogs); i++ {

		if m.ActionsLogs[i] != nil {
			if err := m.ActionsLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ActionsLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ActionsLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JobsTask) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobsTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobsTask) UnmarshalBinary(b []byte) error {
	var res JobsTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
