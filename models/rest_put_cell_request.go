// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestPutCellRequest Request for creating a Cell
//
// swagger:model restPutCellRequest
type RestPutCellRequest struct {

	// Whether to create a dedicated folder for this cell at creation
	CreateEmptyRoot bool `json:"CreateEmptyRoot,omitempty"`

	// Content of the Cell (Room is legacy name)
	Room *RestCell `json:"Room,omitempty"`
}

// Validate validates this rest put cell request
func (m *RestPutCellRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestPutCellRequest) validateRoom(formats strfmt.Registry) error {
	if swag.IsZero(m.Room) { // not required
		return nil
	}

	if m.Room != nil {
		if err := m.Room.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Room")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Room")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rest put cell request based on the context it is used
func (m *RestPutCellRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestPutCellRequest) contextValidateRoom(ctx context.Context, formats strfmt.Registry) error {

	if m.Room != nil {
		if err := m.Room.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Room")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Room")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestPutCellRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestPutCellRequest) UnmarshalBinary(b []byte) error {
	var res RestPutCellRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
