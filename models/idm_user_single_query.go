// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IdmUserSingleQuery idm user single query
//
// swagger:model idmUserSingleQuery
type IdmUserSingleQuery struct {

	// Search for the existence of the AttributeName, whatever its value
	AttributeAnyValue bool `json:"AttributeAnyValue,omitempty"`

	// Search on attribute, to be combined with AttributeValue
	AttributeName string `json:"AttributeName,omitempty"`

	// Value used for comparison
	AttributeValue string `json:"AttributeValue,omitempty"`

	// Lookup by last connection date. Must be a timestamp with a leading comparison symbol ('<' or '>')
	ConnectedSince string `json:"ConnectedSince,omitempty"`

	// Search one specific Group by its path
	FullPath string `json:"FullPath,omitempty"`

	// List users below a specific on group path
	GroupPath string `json:"GroupPath,omitempty"`

	// Lookup by profile name (e.g. admin, standard, shared). This is a shortcut for searching on the pydio:profile attribute
	HasProfile string `json:"HasProfile,omitempty"`

	// Search users having a specific role UUID
	HasRole string `json:"HasRole,omitempty"`

	// Lookup a user by Login
	Login string `json:"Login,omitempty"`

	// Filter/Search by NodeType (generally user or group)
	NodeType *IdmNodeType `json:"NodeType,omitempty"`

	// Lookup by hashed password, probably never used
	Password string `json:"Password,omitempty"`

	// When searching on group path, load all users and groups recursively
	Recursive bool `json:"Recursive,omitempty"`

	// Lookup a user by its Uuid
	UUID string `json:"Uuid,omitempty"`

	// Internal - Negate the query/filter result
	Not bool `json:"not,omitempty"`
}

// Validate validates this idm user single query
func (m *IdmUserSingleQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdmUserSingleQuery) validateNodeType(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeType) { // not required
		return nil
	}

	if m.NodeType != nil {
		if err := m.NodeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NodeType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NodeType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this idm user single query based on the context it is used
func (m *IdmUserSingleQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdmUserSingleQuery) contextValidateNodeType(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeType != nil {

		if swag.IsZero(m.NodeType) { // not required
			return nil
		}

		if err := m.NodeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NodeType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NodeType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdmUserSingleQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdmUserSingleQuery) UnmarshalBinary(b []byte) error {
	var res IdmUserSingleQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
