// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ActivityStreamActivitiesRequest activity stream activities request
//
// swagger:model activityStreamActivitiesRequest
type ActivityStreamActivitiesRequest struct {

	// Compute a digest of all unread activities
	AsDigest bool `json:"AsDigest,omitempty"`

	// Target inbox or outbox for the given object
	BoxName string `json:"BoxName,omitempty"`

	// Define the context of the stream
	Context *ActivityStreamContext `json:"Context,omitempty"`

	// Value for the context (e.g. User Id, Node Id)
	ContextData string `json:"ContextData,omitempty"`

	// Provide language information for building the human-readable strings.
	Language string `json:"Language,omitempty"`

	// Limit the number of results
	Limit string `json:"Limit,omitempty"`

	// Start listing at a given position
	Offset string `json:"Offset,omitempty"`

	// Provide context for building the human-readable strings of each activity
	PointOfView *ActivitySummaryPointOfView `json:"PointOfView,omitempty"`

	// Json-encoded filter
	StreamFilter string `json:"StreamFilter,omitempty"`

	// Count last activities that were not loaded yet
	UnreadCountOnly bool `json:"UnreadCountOnly,omitempty"`
}

// Validate validates this activity stream activities request
func (m *ActivityStreamActivitiesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePointOfView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivityStreamActivitiesRequest) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Context")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStreamActivitiesRequest) validatePointOfView(formats strfmt.Registry) error {
	if swag.IsZero(m.PointOfView) { // not required
		return nil
	}

	if m.PointOfView != nil {
		if err := m.PointOfView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PointOfView")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PointOfView")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this activity stream activities request based on the context it is used
func (m *ActivityStreamActivitiesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePointOfView(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivityStreamActivitiesRequest) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	if m.Context != nil {

		if swag.IsZero(m.Context) { // not required
			return nil
		}

		if err := m.Context.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Context")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStreamActivitiesRequest) contextValidatePointOfView(ctx context.Context, formats strfmt.Registry) error {

	if m.PointOfView != nil {

		if swag.IsZero(m.PointOfView) { // not required
			return nil
		}

		if err := m.PointOfView.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PointOfView")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PointOfView")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActivityStreamActivitiesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActivityStreamActivitiesRequest) UnmarshalBinary(b []byte) error {
	var res ActivityStreamActivitiesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
