// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TreeNodeType ==========================================================
// * Standard Messages
// ==========================================================
//
// swagger:model treeNodeType
type TreeNodeType string

func NewTreeNodeType(value TreeNodeType) *TreeNodeType {
	v := value
	return &v
}

const (

	// TreeNodeTypeUNKNOWN captures enum value "UNKNOWN"
	TreeNodeTypeUNKNOWN TreeNodeType = "UNKNOWN"

	// TreeNodeTypeLEAF captures enum value "LEAF"
	TreeNodeTypeLEAF TreeNodeType = "LEAF"

	// TreeNodeTypeCOLLECTION captures enum value "COLLECTION"
	TreeNodeTypeCOLLECTION TreeNodeType = "COLLECTION"
)

// for schema
var treeNodeTypeEnum []interface{}

func init() {
	var res []TreeNodeType
	if err := json.Unmarshal([]byte(`["UNKNOWN","LEAF","COLLECTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeNodeTypeEnum = append(treeNodeTypeEnum, v)
	}
}

func (m TreeNodeType) validateTreeNodeTypeEnum(path, location string, value TreeNodeType) error {
	if err := validate.EnumCase(path, location, value, treeNodeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tree node type
func (m TreeNodeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTreeNodeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tree node type based on context it is used
func (m TreeNodeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
