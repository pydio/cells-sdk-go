// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// JobsDataSourceSelectorType jobs data source selector type
//
// swagger:model jobsDataSourceSelectorType
type JobsDataSourceSelectorType string

func NewJobsDataSourceSelectorType(value JobsDataSourceSelectorType) *JobsDataSourceSelectorType {
	v := value
	return &v
}

const (

	// JobsDataSourceSelectorTypeDataSource captures enum value "DataSource"
	JobsDataSourceSelectorTypeDataSource JobsDataSourceSelectorType = "DataSource"

	// JobsDataSourceSelectorTypeObject captures enum value "Object"
	JobsDataSourceSelectorTypeObject JobsDataSourceSelectorType = "Object"
)

// for schema
var jobsDataSourceSelectorTypeEnum []interface{}

func init() {
	var res []JobsDataSourceSelectorType
	if err := json.Unmarshal([]byte(`["DataSource","Object"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobsDataSourceSelectorTypeEnum = append(jobsDataSourceSelectorTypeEnum, v)
	}
}

func (m JobsDataSourceSelectorType) validateJobsDataSourceSelectorTypeEnum(path, location string, value JobsDataSourceSelectorType) error {
	if err := validate.EnumCase(path, location, value, jobsDataSourceSelectorTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this jobs data source selector type
func (m JobsDataSourceSelectorType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateJobsDataSourceSelectorTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this jobs data source selector type based on context it is used
func (m JobsDataSourceSelectorType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
