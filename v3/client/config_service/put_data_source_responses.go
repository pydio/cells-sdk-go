// Code generated by go-swagger; DO NOT EDIT.

package config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v3/models"
)

// PutDataSourceReader is a Reader for the PutDataSource structure.
type PutDataSourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDataSourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDataSourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutDataSourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutDataSourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDataSourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutDataSourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutDataSourceOK creates a PutDataSourceOK with default headers values
func NewPutDataSourceOK() *PutDataSourceOK {
	return &PutDataSourceOK{}
}

/* PutDataSourceOK describes a response with status code 200, with default header values.

PutDataSourceOK put data source o k
*/
type PutDataSourceOK struct {
	Payload *models.ObjectDataSource
}

func (o *PutDataSourceOK) Error() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceOK  %+v", 200, o.Payload)
}
func (o *PutDataSourceOK) GetPayload() *models.ObjectDataSource {
	return o.Payload
}

func (o *PutDataSourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ObjectDataSource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDataSourceUnauthorized creates a PutDataSourceUnauthorized with default headers values
func NewPutDataSourceUnauthorized() *PutDataSourceUnauthorized {
	return &PutDataSourceUnauthorized{}
}

/* PutDataSourceUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type PutDataSourceUnauthorized struct {
}

func (o *PutDataSourceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceUnauthorized ", 401)
}

func (o *PutDataSourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDataSourceForbidden creates a PutDataSourceForbidden with default headers values
func NewPutDataSourceForbidden() *PutDataSourceForbidden {
	return &PutDataSourceForbidden{}
}

/* PutDataSourceForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type PutDataSourceForbidden struct {
	Payload *models.RestError
}

func (o *PutDataSourceForbidden) Error() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceForbidden  %+v", 403, o.Payload)
}
func (o *PutDataSourceForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutDataSourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDataSourceNotFound creates a PutDataSourceNotFound with default headers values
func NewPutDataSourceNotFound() *PutDataSourceNotFound {
	return &PutDataSourceNotFound{}
}

/* PutDataSourceNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type PutDataSourceNotFound struct {
	Payload *models.RestError
}

func (o *PutDataSourceNotFound) Error() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceNotFound  %+v", 404, o.Payload)
}
func (o *PutDataSourceNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutDataSourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDataSourceInternalServerError creates a PutDataSourceInternalServerError with default headers values
func NewPutDataSourceInternalServerError() *PutDataSourceInternalServerError {
	return &PutDataSourceInternalServerError{}
}

/* PutDataSourceInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type PutDataSourceInternalServerError struct {
	Payload *models.RestError
}

func (o *PutDataSourceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /config/datasource/{Name}][%d] putDataSourceInternalServerError  %+v", 500, o.Payload)
}
func (o *PutDataSourceInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutDataSourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
