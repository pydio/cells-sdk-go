// Code generated by go-swagger; DO NOT EDIT.

package user_meta_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v3/models"
)

// UpdateUserMetaReader is a Reader for the UpdateUserMeta structure.
type UpdateUserMetaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserMetaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserMetaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateUserMetaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserMetaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserMetaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUserMetaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateUserMetaOK creates a UpdateUserMetaOK with default headers values
func NewUpdateUserMetaOK() *UpdateUserMetaOK {
	return &UpdateUserMetaOK{}
}

/* UpdateUserMetaOK describes a response with status code 200, with default header values.

UpdateUserMetaOK update user meta o k
*/
type UpdateUserMetaOK struct {
	Payload *models.IdmUpdateUserMetaResponse
}

func (o *UpdateUserMetaOK) Error() string {
	return fmt.Sprintf("[PUT /user-meta/update][%d] updateUserMetaOK  %+v", 200, o.Payload)
}
func (o *UpdateUserMetaOK) GetPayload() *models.IdmUpdateUserMetaResponse {
	return o.Payload
}

func (o *UpdateUserMetaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IdmUpdateUserMetaResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserMetaUnauthorized creates a UpdateUserMetaUnauthorized with default headers values
func NewUpdateUserMetaUnauthorized() *UpdateUserMetaUnauthorized {
	return &UpdateUserMetaUnauthorized{}
}

/* UpdateUserMetaUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type UpdateUserMetaUnauthorized struct {
}

func (o *UpdateUserMetaUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /user-meta/update][%d] updateUserMetaUnauthorized ", 401)
}

func (o *UpdateUserMetaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserMetaForbidden creates a UpdateUserMetaForbidden with default headers values
func NewUpdateUserMetaForbidden() *UpdateUserMetaForbidden {
	return &UpdateUserMetaForbidden{}
}

/* UpdateUserMetaForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type UpdateUserMetaForbidden struct {
	Payload *models.RestError
}

func (o *UpdateUserMetaForbidden) Error() string {
	return fmt.Sprintf("[PUT /user-meta/update][%d] updateUserMetaForbidden  %+v", 403, o.Payload)
}
func (o *UpdateUserMetaForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *UpdateUserMetaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserMetaNotFound creates a UpdateUserMetaNotFound with default headers values
func NewUpdateUserMetaNotFound() *UpdateUserMetaNotFound {
	return &UpdateUserMetaNotFound{}
}

/* UpdateUserMetaNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type UpdateUserMetaNotFound struct {
	Payload *models.RestError
}

func (o *UpdateUserMetaNotFound) Error() string {
	return fmt.Sprintf("[PUT /user-meta/update][%d] updateUserMetaNotFound  %+v", 404, o.Payload)
}
func (o *UpdateUserMetaNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *UpdateUserMetaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserMetaInternalServerError creates a UpdateUserMetaInternalServerError with default headers values
func NewUpdateUserMetaInternalServerError() *UpdateUserMetaInternalServerError {
	return &UpdateUserMetaInternalServerError{}
}

/* UpdateUserMetaInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type UpdateUserMetaInternalServerError struct {
	Payload *models.RestError
}

func (o *UpdateUserMetaInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /user-meta/update][%d] updateUserMetaInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateUserMetaInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *UpdateUserMetaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
