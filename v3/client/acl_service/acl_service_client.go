// Code generated by go-swagger; DO NOT EDIT.

package acl_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new acl service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for acl service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteACL(params *DeleteACLParams, opts ...ClientOption) (*DeleteACLOK, error)

	PutACL(params *PutACLParams, opts ...ClientOption) (*PutACLOK, error)

	SearchAcls(params *SearchAclsParams, opts ...ClientOption) (*SearchAclsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteACL deletes one or more a c ls
*/
func (a *Client) DeleteACL(params *DeleteACLParams, opts ...ClientOption) (*DeleteACLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteACLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAcl",
		Method:             "POST",
		PathPattern:        "/acl/bulk/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteACLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteACLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAcl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutACL stores an ACL
*/
func (a *Client) PutACL(params *PutACLParams, opts ...ClientOption) (*PutACLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutACLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAcl",
		Method:             "PUT",
		PathPattern:        "/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutACLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutACLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAcl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAcls searches acls
*/
func (a *Client) SearchAcls(params *SearchAclsParams, opts ...ClientOption) (*SearchAclsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAclsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAcls",
		Method:             "POST",
		PathPattern:        "/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &SearchAclsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAclsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAcls: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
