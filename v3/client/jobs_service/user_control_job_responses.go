// Code generated by go-swagger; DO NOT EDIT.

package jobs_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-sdk-go/v3/models"
)

// UserControlJobReader is a Reader for the UserControlJob structure.
type UserControlJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserControlJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserControlJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUserControlJobUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserControlJobForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserControlJobNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserControlJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserControlJobOK creates a UserControlJobOK with default headers values
func NewUserControlJobOK() *UserControlJobOK {
	return &UserControlJobOK{}
}

/* UserControlJobOK describes a response with status code 200, with default header values.

UserControlJobOK user control job o k
*/
type UserControlJobOK struct {
	Payload *models.JobsCtrlCommandResponse
}

func (o *UserControlJobOK) Error() string {
	return fmt.Sprintf("[PUT /jobs/user][%d] userControlJobOK  %+v", 200, o.Payload)
}
func (o *UserControlJobOK) GetPayload() *models.JobsCtrlCommandResponse {
	return o.Payload
}

func (o *UserControlJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobsCtrlCommandResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserControlJobUnauthorized creates a UserControlJobUnauthorized with default headers values
func NewUserControlJobUnauthorized() *UserControlJobUnauthorized {
	return &UserControlJobUnauthorized{}
}

/* UserControlJobUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type UserControlJobUnauthorized struct {
}

func (o *UserControlJobUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /jobs/user][%d] userControlJobUnauthorized ", 401)
}

func (o *UserControlJobUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserControlJobForbidden creates a UserControlJobForbidden with default headers values
func NewUserControlJobForbidden() *UserControlJobForbidden {
	return &UserControlJobForbidden{}
}

/* UserControlJobForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type UserControlJobForbidden struct {
	Payload *models.RestError
}

func (o *UserControlJobForbidden) Error() string {
	return fmt.Sprintf("[PUT /jobs/user][%d] userControlJobForbidden  %+v", 403, o.Payload)
}
func (o *UserControlJobForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *UserControlJobForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserControlJobNotFound creates a UserControlJobNotFound with default headers values
func NewUserControlJobNotFound() *UserControlJobNotFound {
	return &UserControlJobNotFound{}
}

/* UserControlJobNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type UserControlJobNotFound struct {
	Payload *models.RestError
}

func (o *UserControlJobNotFound) Error() string {
	return fmt.Sprintf("[PUT /jobs/user][%d] userControlJobNotFound  %+v", 404, o.Payload)
}
func (o *UserControlJobNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *UserControlJobNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserControlJobInternalServerError creates a UserControlJobInternalServerError with default headers values
func NewUserControlJobInternalServerError() *UserControlJobInternalServerError {
	return &UserControlJobInternalServerError{}
}

/* UserControlJobInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type UserControlJobInternalServerError struct {
	Payload *models.RestError
}

func (o *UserControlJobInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /jobs/user][%d] userControlJobInternalServerError  %+v", 500, o.Payload)
}
func (o *UserControlJobInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *UserControlJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
